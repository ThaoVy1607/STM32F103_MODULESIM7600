
DO_ANCPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  0800d098  0800d098  0001d098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da20  0800da20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800da20  0800da20  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da20  0800da20  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800da20  0800da20  0001da20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da28  0800da28  0001da28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800da2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200001e0  0800dc0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800dc0c  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017699  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003394  00000000  00000000  000378e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  0003ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f20  00000000  00000000  0003bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1db  00000000  00000000  0003ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001789e  00000000  00000000  0005a0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098751  00000000  00000000  00071949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069fc  00000000  00000000  0010a09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00110a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d07c 	.word	0x0800d07c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d07c 	.word	0x0800d07c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4605      	mov	r5, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	2200      	movs	r2, #0
 80011d0:	2300      	movs	r3, #0
 80011d2:	4628      	mov	r0, r5
 80011d4:	4621      	mov	r1, r4
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f007 fa45 	bl	80086d0 <logf>
 8001246:	4603      	mov	r3, r0
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 fa61 	bl	8008720 <sqrtf>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>:
#include "MAX30100.hpp"
#include "main.h"
extern I2C_HandleTypeDef hi2c2;
#define _MAX30100_I2C &hi2c2
#define _MAX30100_I2C_ADDRESS 0xAE
MAX30100::MAX30100(
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	70fb      	strb	r3, [r7, #3]
 800127a:	460b      	mov	r3, r1
 800127c:	70bb      	strb	r3, [r7, #2]
 800127e:	4613      	mov	r3, r2
 8001280:	707b      	strb	r3, [r7, #1]
        LEDPulseWidth pulseWidth,
        LEDCurrent IrLedCurrent,
        bool highResMode,
        bool debug)
{
  this->writeRegister(0x06, 0b01000000); // resst
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	2106      	movs	r1, #6
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fb3c 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  this->debug = debug;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e3a      	ldrb	r2, [r7, #24]
 8001290:	701a      	strb	r2, [r3, #0]
  currentPulseDetectorState = PULSE_IDLE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	721a      	strb	r2, [r3, #8]

  setMode(  mode );
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fb89 	bl	80019b4 <_ZN8MAX301007setModeE4Mode>

  //Check table 8 in datasheet on page 19. You can't just throw in sample rate and pulse width randomly. 100hz + 1600us is max for that resolution
  setSamplingRate( samplingRate );
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fbc6 	bl	8001a38 <_ZN8MAX3010015setSamplingRateE12SamplingRate>
  setLEDPulseWidth( pulseWidth );
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fbe1 	bl	8001a78 <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>

  redLEDCurrent = (uint8_t)STARTING_RED_LED_CURRENT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2208      	movs	r2, #8
 80012ba:	705a      	strb	r2, [r3, #1]
  lastREDLedCurrentCheck = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]

  this->IrLedCurrent = IrLedCurrent;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7c3a      	ldrb	r2, [r7, #16]
 80012c8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
  setLEDCurrents(redLEDCurrent, IrLedCurrent );
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	7c3a      	ldrb	r2, [r7, #16]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fbeb 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
  setHighresModeEnabled(highResMode);
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fb84 	bl	80019ec <_ZN8MAX3010021setHighresModeEnabledEb>


  dcFilterIR.w = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	649a      	str	r2, [r3, #72]	; 0x48
  dcFilterIR.result = 0;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c

  dcFilterRed.w = 0;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	651a      	str	r2, [r3, #80]	; 0x50
  dcFilterRed.result = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	655a      	str	r2, [r3, #84]	; 0x54


  lpbFilterIR.v[0] = 0;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
  lpbFilterIR.v[1] = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
  lpbFilterIR.result = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	661a      	str	r2, [r3, #96]	; 0x60

  meanDiffIR.index = 0;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  meanDiffIR.sum = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  meanDiffIR.count = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8


  valuesBPM[0] = 0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  valuesBPMSum = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  valuesBPMCount = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  bpmIndex = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


  irACValueSqSum = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  pulsesDetected = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  currentSaO2Value = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  lastBeatThreshold = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	641a      	str	r2, [r3, #64]	; 0x40

}
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZN8MAX301006updateEv>:

pulseoxymeter_t MAX30100::update()
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
  pulseoxymeter_t result = {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	2324      	movs	r3, #36	; 0x24
 80013a4:	461a      	mov	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	f009 fa12 	bl	800a7d0 <memset>
    /*bool pulseDetected*/ false,
    /*float heartBPM*/ 0.0,
    /*float irCardiogram*/ 0.0,
    /*float irDcValue*/ 0.0,
    /*float redDcValue*/ 0.0,
    /*float SaO2*/ currentSaO2Value,
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    /*uint32_t lastBeatThreshold*/ 0,
    /*float dcFilteredIR*/ 0.0,
    /*float dcFilteredRed*/ 0.0
  };
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	615a      	str	r2, [r3, #20]


  fifo_t rawData = readFIFO();
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f000 fbaa 	bl	8001b10 <_ZN8MAX301008readFIFOEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	617b      	str	r3, [r7, #20]

  dcFilterIR = dcRemoval( (float)rawData.rawIR, dcFilterIR.w, ALPHA );
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc86 	bl	8000cd4 <__aeabi_ui2f>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	68bc      	ldr	r4, [r7, #8]
 80013d0:	4638      	mov	r0, r7
 80013d2:	4988      	ldr	r1, [pc, #544]	; (80015f4 <_ZN8MAX301006updateEv+0x260>)
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	68b9      	ldr	r1, [r7, #8]
 80013d8:	f000 fbc4 	bl	8001b64 <_ZN8MAX301009dcRemovalEfff>
 80013dc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80013e0:	463a      	mov	r2, r7
 80013e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e6:	e883 0003 	stmia.w	r3, {r0, r1}
  dcFilterRed = dcRemoval( (float)rawData.rawRed, dcFilterRed.w, ALPHA );
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc71 	bl	8000cd4 <__aeabi_ui2f>
 80013f2:	4602      	mov	r2, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f8:	68bc      	ldr	r4, [r7, #8]
 80013fa:	4638      	mov	r0, r7
 80013fc:	497d      	ldr	r1, [pc, #500]	; (80015f4 <_ZN8MAX301006updateEv+0x260>)
 80013fe:	9100      	str	r1, [sp, #0]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	f000 fbaf 	bl	8001b64 <_ZN8MAX301009dcRemovalEfff>
 8001406:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800140a:	463a      	mov	r2, r7
 800140c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001410:	e883 0003 	stmia.w	r3, {r0, r1}

  float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3364      	adds	r3, #100	; 0x64
 800141c:	461a      	mov	r2, r3
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f000 fc0e 	bl	8001c40 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>
 8001424:	61f8      	str	r0, [r7, #28]
  lowPassButterworthFilter( meanDiffResIR/*-dcFilterIR.result*/, &lpbFilterIR );
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3358      	adds	r3, #88	; 0x58
 800142a:	461a      	mov	r2, r3
 800142c:	69f9      	ldr	r1, [r7, #28]
 800142e:	68b8      	ldr	r0, [r7, #8]
 8001430:	f000 fbbe 	bl	8001bb0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>

  irACValueSqSum += dcFilterIR.result * dcFilterIR.result;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f7ff fc9d 	bl	8000d84 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fb90 	bl	8000b74 <__addsf3>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  redACValueSqSum += dcFilterRed.result * dcFilterRed.result;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f7ff fc88 	bl	8000d84 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	4619      	mov	r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	f7ff fb7b 	bl	8000b74 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  samplesRecorded++;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800148e:	3301      	adds	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

  if( detectPulse( lpbFilterIR.result ) && samplesRecorded > 0 )
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149c:	4619      	mov	r1, r3
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 f8ae 	bl	8001600 <_ZN8MAX3010011detectPulseEf>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <_ZN8MAX301006updateEv+0x124>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZN8MAX301006updateEv+0x124>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <_ZN8MAX301006updateEv+0x126>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d071      	beq.n	80015a2 <_ZN8MAX301006updateEv+0x20e>
  {
    result.pulseDetected=true;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    pulsesDetected++;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

    float ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbfb 	bl	8000cdc <__aeabi_i2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fcfe 	bl	8000eec <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff feac 	bl	8001250 <_ZSt4sqrtf>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe9c 	bl	8001238 <_ZSt3logf>
 8001500:	4605      	mov	r5, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbe4 	bl	8000cdc <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fce7 	bl	8000eec <__aeabi_fdiv>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe95 	bl	8001250 <_ZSt4sqrtf>
 8001526:	4603      	mov	r3, r0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe85 	bl	8001238 <_ZSt3logf>
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	4628      	mov	r0, r5
 8001534:	f7ff fcda 	bl	8000eec <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	61bb      	str	r3, [r7, #24]
      //Serial.print("RMS Ratio: ");
      //Serial.println(ratioRMS);
    }

    //This is my adjusted standard model, so it shows 0.89 as 94% saturation. It is probably far from correct, requires proper empircal calibration
    currentSaO2Value = 110.0 - 18.0 * ratioRMS;
 800153c:	69b8      	ldr	r0, [r7, #24]
 800153e:	f7fe ff73 	bl	8000428 <__aeabi_f2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <_ZN8MAX301006updateEv+0x264>)
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	f04f 0000 	mov.w	r0, #0
 8001554:	4929      	ldr	r1, [pc, #164]	; (80015fc <_ZN8MAX301006updateEv+0x268>)
 8001556:	f7fe fe07 	bl	8000168 <__aeabi_dsub>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fab1 	bl	8000ac8 <__aeabi_d2f>
 8001566:	4602      	mov	r2, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    result.SaO2 = currentSaO2Value;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	615a      	str	r2, [r3, #20]

    if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10d      	bne.n	80015a2 <_ZN8MAX301006updateEv+0x20e>
    {
      irACValueSqSum = 0;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      redACValueSqSum = 0;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      samplesRecorded = 0;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    }
  }

  balanceIntesities( dcFilterRed.w, dcFilterIR.w );
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015aa:	461a      	mov	r2, r3
 80015ac:	68b8      	ldr	r0, [r7, #8]
 80015ae:	f000 f937 	bl	8001820 <_ZN8MAX3010017balanceIntesitiesEff>


  result.heartBPM = currentBPM;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]
  result.irCardiogram = lpbFilterIR.result;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	609a      	str	r2, [r3, #8]
  result.irDcValue = dcFilterIR.w;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	60da      	str	r2, [r3, #12]
  result.redDcValue = dcFilterRed.w;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	611a      	str	r2, [r3, #16]
  result.lastBeatThreshold = lastBeatThreshold;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	619a      	str	r2, [r3, #24]
  result.dcFilteredIR = dcFilterIR.result;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	61da      	str	r2, [r3, #28]
  result.dcFilteredRed = dcFilterRed.result;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	621a      	str	r2, [r3, #32]


  return result;
 80015ea:	bf00      	nop
}
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	3f733333 	.word	0x3f733333
 80015f8:	40320000 	.word	0x40320000
 80015fc:	405b8000 	.word	0x405b8000

08001600 <_ZN8MAX3010011detectPulseEf>:

bool MAX30100::detectPulse(float sensor_value)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 800160a:	497d      	ldr	r1, [pc, #500]	; (8001800 <_ZN8MAX3010011detectPulseEf+0x200>)
 800160c:	6838      	ldr	r0, [r7, #0]
 800160e:	f7ff fd75 	bl	80010fc <__aeabi_fcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d014      	beq.n	8001642 <_ZN8MAX3010011detectPulseEf+0x42>
  {
    currentPulseDetectorState = PULSE_IDLE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	721a      	strb	r2, [r3, #8]
    prev_sensor_value = 0;
 800161e:	4b79      	ldr	r3, [pc, #484]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    lastBeat = 0;
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
    currentBeat = 0;
 800162c:	4b77      	ldr	r3, [pc, #476]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    values_went_down = 0;
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    lastBeatThreshold = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    return false;
 800163e:	2300      	movs	r3, #0
 8001640:	e0d9      	b.n	80017f6 <_ZN8MAX3010011detectPulseEf+0x1f6>
  }

  switch(currentPulseDetectorState)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a1b      	ldrb	r3, [r3, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	f000 80b6 	beq.w	80017b8 <_ZN8MAX3010011detectPulseEf+0x1b8>
 800164c:	2b02      	cmp	r3, #2
 800164e:	f300 80ce 	bgt.w	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <_ZN8MAX3010011detectPulseEf+0x5c>
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00f      	beq.n	800167a <_ZN8MAX3010011detectPulseEf+0x7a>
 800165a:	e0c8      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
  {
    case PULSE_IDLE:
      if(sensor_value >= PULSE_MIN_THRESHOLD) {
 800165c:	496d      	ldr	r1, [pc, #436]	; (8001814 <_ZN8MAX3010011detectPulseEf+0x214>)
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f7ff fd42 	bl	80010e8 <__aeabi_fcmpge>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d100      	bne.n	800166c <_ZN8MAX3010011detectPulseEf+0x6c>
        currentPulseDetectorState = PULSE_TRACE_UP;
        values_went_down = 0;
      }
      break;
 800166a:	e0c0      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
        currentPulseDetectorState = PULSE_TRACE_UP;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	721a      	strb	r2, [r3, #8]
        values_went_down = 0;
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e0b9      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>

    case PULSE_TRACE_UP:
      if(sensor_value > prev_sensor_value)
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7ff fd3b 	bl	80010fc <__aeabi_fcmpgt>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <_ZN8MAX3010011detectPulseEf+0xa4>
      {
        currentBeat = HAL_GetTick();
 800168c:	f002 fae2 	bl	8003c54 <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 8001694:	6013      	str	r3, [r2, #0]
        lastBeatThreshold = sensor_value;
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f7ff fd76 	bl	8001188 <__aeabi_f2uiz>
 800169c:	4602      	mov	r2, r0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40

        currentPulseDetectorState = PULSE_TRACE_DOWN;

        return true;
      }
      break;
 80016a2:	e0a4      	b.n	80017ee <_ZN8MAX3010011detectPulseEf+0x1ee>
        uint32_t beatDuration = currentBeat - lastBeat;
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	60bb      	str	r3, [r7, #8]
        lastBeat = currentBeat;
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <_ZN8MAX3010011detectPulseEf+0x20c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <_ZN8MAX3010011detectPulseEf+0x208>)
 80016b6:	6013      	str	r3, [r2, #0]
        float rawBPM = 0;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
        if(beatDuration > 0)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <_ZN8MAX3010011detectPulseEf+0xd8>
          rawBPM = 60000.0 / (float)beatDuration;
 80016c4:	68b8      	ldr	r0, [r7, #8]
 80016c6:	f7ff fb05 	bl	8000cd4 <__aeabi_ui2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4852      	ldr	r0, [pc, #328]	; (8001818 <_ZN8MAX3010011detectPulseEf+0x218>)
 80016d0:	f7ff fc0c 	bl	8000eec <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	617b      	str	r3, [r7, #20]
        if(debug == true)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <_ZN8MAX3010011detectPulseEf+0xf2>
        valuesBPM[bpmIndex] = rawBPM;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3204      	adds	r2, #4
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        valuesBPMSum = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e010      	b.n	8001722 <_ZN8MAX3010011detectPulseEf+0x122>
          valuesBPMSum += valuesBPM[i];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	3204      	adds	r2, #4
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fa30 	bl	8000b74 <__addsf3>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
        for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b09      	cmp	r3, #9
 8001726:	ddeb      	ble.n	8001700 <_ZN8MAX3010011detectPulseEf+0x100>
        if(debug == true)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <_ZN8MAX3010011detectPulseEf+0x142>
          for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e002      	b.n	800173c <_ZN8MAX3010011detectPulseEf+0x13c>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b09      	cmp	r3, #9
 8001740:	ddf9      	ble.n	8001736 <_ZN8MAX3010011detectPulseEf+0x136>
        bpmIndex++;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <_ZN8MAX3010011detectPulseEf+0x21c>)
 800175a:	fba3 1302 	umull	r1, r3, r3, r2
 800175e:	08d9      	lsrs	r1, r3, #3
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001778:	2b09      	cmp	r3, #9
 800177a:	d807      	bhi.n	800178c <_ZN8MAX3010011detectPulseEf+0x18c>
          valuesBPMCount++;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        currentBPM = valuesBPMSum / valuesBPMCount;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff faa0 	bl	8000cdc <__aeabi_i2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4619      	mov	r1, r3
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fba3 	bl	8000eec <__aeabi_fdiv>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60da      	str	r2, [r3, #12]
        currentPulseDetectorState = PULSE_TRACE_DOWN;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	721a      	strb	r2, [r3, #8]
        return true;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01e      	b.n	80017f6 <_ZN8MAX3010011detectPulseEf+0x1f6>

    case PULSE_TRACE_DOWN:
      if(sensor_value < prev_sensor_value)
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f7ff fc7e 	bl	80010c0 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <_ZN8MAX3010011detectPulseEf+0x1d6>
      {
        values_went_down++;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <_ZN8MAX3010011detectPulseEf+0x210>)
 80017d4:	701a      	strb	r2, [r3, #0]
      }


      if(sensor_value < PULSE_MIN_THRESHOLD)
 80017d6:	490f      	ldr	r1, [pc, #60]	; (8001814 <_ZN8MAX3010011detectPulseEf+0x214>)
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f7ff fc71 	bl	80010c0 <__aeabi_fcmplt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <_ZN8MAX3010011detectPulseEf+0x1e6>
      {
        currentPulseDetectorState = PULSE_IDLE;
      }
      break;
 80017e4:	e002      	b.n	80017ec <_ZN8MAX3010011detectPulseEf+0x1ec>
        currentPulseDetectorState = PULSE_IDLE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	721a      	strb	r2, [r3, #8]
      break;
 80017ec:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_ZN8MAX3010011detectPulseEf+0x204>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6013      	str	r3, [r2, #0]
  return false;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	44fa0000 	.word	0x44fa0000
 8001804:	200001fc 	.word	0x200001fc
 8001808:	20000208 	.word	0x20000208
 800180c:	20000204 	.word	0x20000204
 8001810:	20000200 	.word	0x20000200
 8001814:	42c80000 	.word	0x42c80000
 8001818:	476a6000 	.word	0x476a6000
 800181c:	cccccccd 	.word	0xcccccccd

08001820 <_ZN8MAX3010017balanceIntesitiesEff>:

void MAX30100::balanceIntesities( float redLedDC, float IRLedDC )
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]

  if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 800182c:	f002 fa12 	bl	8003c54 <HAL_GetTick>
 8001830:	4603      	mov	r3, r0
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa4e 	bl	8000cd4 <__aeabi_ui2f>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff f995 	bl	8000b70 <__aeabi_fsub>
 8001846:	4603      	mov	r3, r0
 8001848:	2201      	movs	r2, #1
 800184a:	4614      	mov	r4, r2
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <_ZN8MAX3010017balanceIntesitiesEff+0xdc>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc4a 	bl	80010e8 <__aeabi_fcmpge>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <_ZN8MAX3010017balanceIntesitiesEff+0x3e>
 800185a:	2300      	movs	r3, #0
 800185c:	461c      	mov	r4, r3
 800185e:	b2e3      	uxtb	r3, r4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d047      	beq.n	80018f4 <_ZN8MAX3010017balanceIntesitiesEff+0xd4>
  {
    ////Serial.println( redLedDC - IRLedDC );
    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff f982 	bl	8000b70 <__aeabi_fsub>
 800186c:	4603      	mov	r3, r0
 800186e:	4924      	ldr	r1, [pc, #144]	; (8001900 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc43 	bl	80010fc <__aeabi_fcmpgt>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2b0e      	cmp	r3, #14
 8001882:	d80f      	bhi.n	80018a4 <_ZN8MAX3010017balanceIntesitiesEff+0x84>
    {
      redLEDCurrent++;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	3301      	adds	r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	7859      	ldrb	r1, [r3, #1]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800189a:	461a      	mov	r2, r3
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f907 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
 80018a2:	e01e      	b.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    }
    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f7ff f962 	bl	8000b70 <__aeabi_fsub>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4914      	ldr	r1, [pc, #80]	; (8001900 <_ZN8MAX3010017balanceIntesitiesEff+0xe0>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc23 	bl	80010fc <__aeabi_fcmpgt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d012      	beq.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00e      	beq.n	80018e2 <_ZN8MAX3010017balanceIntesitiesEff+0xc2>
    {
      redLEDCurrent--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	705a      	strb	r2, [r3, #1]
      setLEDCurrents( redLEDCurrent, IrLedCurrent );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	7859      	ldrb	r1, [r3, #1]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80018da:	461a      	mov	r2, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f8e7 	bl	8001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>
    }

    lastREDLedCurrentCheck = HAL_GetTick();
 80018e2:	f002 f9b7 	bl	8003c54 <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9f3 	bl	8000cd4 <__aeabi_ui2f>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
  }
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	43fa0000 	.word	0x43fa0000
 8001900:	477de800 	.word	0x477de800

08001904 <_ZN8MAX3010013writeRegisterEhh>:


// Writes val to address register on device
void MAX30100::writeRegister(uint8_t address, uint8_t val)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &val, 1, 100);
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	21ae      	movs	r1, #174	; 0xae
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <_ZN8MAX3010013writeRegisterEhh+0x34>)
 800192a:	f003 fcb5 	bl	8005298 <HAL_I2C_Mem_Write>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000280 	.word	0x20000280

0800193c <_ZN8MAX3010012readRegisterEh>:

uint8_t MAX30100::readRegister(uint8_t address)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
	uint8_t rdata = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, &rdata, 1, 100);
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	b29a      	uxth	r2, r3
 8001950:	2364      	movs	r3, #100	; 0x64
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	21ae      	movs	r1, #174	; 0xae
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <_ZN8MAX3010012readRegisterEh+0x38>)
 8001964:	f003 fd92 	bl	800548c <HAL_I2C_Mem_Read>
//	if (I2C_MasterByteRead(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address,
//			&rdata, 100) != BML_OK) {
//		return 255;
//	}
	return rdata;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000280 	.word	0x20000280

08001978 <_ZN8MAX301008readFromEhiPh>:

// Reads num bytes starting from address register on device in to _buff array
void MAX30100::readFrom(uint8_t address, int num, uint8_t _buff[])
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af04      	add	r7, sp, #16
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(_MAX30100_I2C, _MAX30100_I2C_ADDRESS, address, 1, _buff, num, 1000);
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001994:	9102      	str	r1, [sp, #8]
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	21ae      	movs	r1, #174	; 0xae
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <_ZN8MAX301008readFromEhiPh+0x38>)
 80019a2:	f003 fd73 	bl	800548c <HAL_I2C_Mem_Read>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000280 	.word	0x20000280

080019b4 <_ZN8MAX301007setModeE4Mode>:

void MAX30100::setMode(Mode mode)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  uint8_t currentModeReg = readRegister( MAX30100_MODE_CONF );
 80019c0:	2106      	movs	r1, #6
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffba 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_MODE_CONF, (currentModeReg & 0xF8) | mode );
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	2106      	movs	r1, #6
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff90 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN8MAX3010021setHighresModeEnabledEb>:

void MAX30100::setHighresModeEnabled(bool enabled)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
    uint8_t previous = readRegister(MAX30100_SPO2_CONF);
 80019f8:	2107      	movs	r1, #7
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff9e 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
    if (enabled) {
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <_ZN8MAX3010021setHighresModeEnabledEb+0x32>
        writeRegister(MAX30100_SPO2_CONF, previous | MAX30100_SPO2_HI_RES_EN);
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	2107      	movs	r1, #7
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff74 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
    } else {
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
    }
}
 8001a1c:	e008      	b.n	8001a30 <_ZN8MAX3010021setHighresModeEnabledEb+0x44>
        writeRegister(MAX30100_SPO2_CONF, previous & ~MAX30100_SPO2_HI_RES_EN);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	2107      	movs	r1, #7
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff6a 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN8MAX3010015setSamplingRateE12SamplingRate>:

void MAX30100::setSamplingRate(SamplingRate rate)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001a44:	2107      	movs	r1, #7
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff78 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xE3 ) | (rate<<2) );
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a54:	f023 031c 	bic.w	r3, r3, #28
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	2107      	movs	r1, #7
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff4a 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZN8MAX3010016setLEDPulseWidthE13LEDPulseWidth>:

void MAX30100::setLEDPulseWidth(LEDPulseWidth pw)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  uint8_t currentSpO2Reg = readRegister( MAX30100_SPO2_CONF );
 8001a84:	2107      	movs	r1, #7
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff58 	bl	800193c <_ZN8MAX3010012readRegisterEh>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  writeRegister( MAX30100_SPO2_CONF, ( currentSpO2Reg & 0xFC ) | pw );
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff2e 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN8MAX3010014setLEDCurrentsEhh>:

void MAX30100::setLEDCurrents( uint8_t redLedCurrent, uint8_t IRLedCurrent )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
 8001abc:	4613      	mov	r3, r2
 8001abe:	70bb      	strb	r3, [r7, #2]
  writeRegister( MAX30100_LED_CONF, (redLedCurrent << 4) | IRLedCurrent );
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2109      	movs	r1, #9
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff15 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZN8MAX301009resetFIFOEv>:

  return (float)temp + tempFraction;
}

void MAX30100::resetFIFO()
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  writeRegister( 2,0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2102      	movs	r1, #2
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff08 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 3,0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2103      	movs	r1, #3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff03 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
  writeRegister( 4,0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2104      	movs	r1, #4
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fefe 	bl	8001904 <_ZN8MAX3010013writeRegisterEhh>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN8MAX301008readFIFOEv>:
fifo_t MAX30100::readFIFO()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  fifo_t result;

  uint8_t buffer[4];
  readFrom( MAX30100_FIFO_DATA, 4, buffer );
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	2105      	movs	r1, #5
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff29 	bl	8001978 <_ZN8MAX301008readFromEhiPh>
  result.rawIR = (buffer[0] << 8) | buffer[1];
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	823b      	strh	r3, [r7, #16]
  result.rawRed = (buffer[2] << 8) | buffer[3];
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	827b      	strh	r3, [r7, #18]

  return result;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	8aba      	ldrh	r2, [r7, #20]
 8001b52:	f362 030f 	bfi	r3, r2, #0, #16
 8001b56:	8afa      	ldrh	r2, [r7, #22]
 8001b58:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN8MAX301009dcRemovalEfff>:

dcFilter_t MAX30100::dcRemoval(float x, float prev_w, float alpha)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  dcFilter_t filtered;
  filtered.w = x + alpha * prev_w;
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	69b8      	ldr	r0, [r7, #24]
 8001b76:	f7ff f905 	bl	8000d84 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fff8 	bl	8000b74 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	601a      	str	r2, [r3, #0]
  filtered.result = filtered.w - prev_w;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ffec 	bl	8000b70 <__aeabi_fsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]

  return filtered;
 8001ba0:	bf00      	nop
}
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	0000      	movs	r0, r0
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t>:

void MAX30100::lowPassButterworthFilter( float x, butterworthFilter_t * filterResult )
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  filterResult->v[0] = filterResult->v[1];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	601a      	str	r2, [r3, #0]

  //Fs = 100Hz and Fc = 10Hz
  filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7fe fc2f 	bl	8000428 <__aeabi_f2d>
 8001bca:	a319      	add	r3, pc, #100	; (adr r3, 8001c30 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x80>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fc82 	bl	80004d8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc21 	bl	8000428 <__aeabi_f2d>
 8001be6:	a314      	add	r3, pc, #80	; (adr r3, 8001c38 <_ZN8MAX3010024lowPassButterworthFilterEfP19butterworthFilter_t+0x88>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fc74 	bl	80004d8 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fab8 	bl	800016c <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ff60 	bl	8000ac8 <__aeabi_d2f>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	605a      	str	r2, [r3, #4]

  //Fs = 100Hz and Fc = 4Hz
  //filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]); //Very precise butterworth filter

  filterResult->result = filterResult->v[0] + filterResult->v[1];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f7fe ffab 	bl	8000b74 <__addsf3>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	5e7c4548 	.word	0x5e7c4548
 8001c34:	3fcf63ef 	.word	0x3fcf63ef
 8001c38:	50c1dd5c 	.word	0x50c1dd5c
 8001c3c:	3fe04e08 	.word	0x3fe04e08

08001c40 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t>:

float MAX30100::meanDiff(float M, meanDiffFilter_t* filterValues)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  float avg = 0;
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  filterValues->sum -= filterValues->values[filterValues->index];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7fe ff82 	bl	8000b70 <__aeabi_fsub>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  filterValues->values[filterValues->index] = M;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  filterValues->sum += filterValues->values[filterValues->index];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7fe ff6b 	bl	8000b74 <__addsf3>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

  filterValues->index++;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xe0>)
 8001cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc2:	08d9      	lsrs	r1, r3, #3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a5b      	subs	r3, r3, r1
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(filterValues->count < MEAN_FILTER_SIZE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cda:	2b0e      	cmp	r3, #14
 8001cdc:	d807      	bhi.n	8001cee <_ZN8MAX301008meanDiffEfP16meanDiffFilter_t+0xae>
    filterValues->count++;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  avg = filterValues->sum / filterValues->count;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ffef 	bl	8000cdc <__aeabi_i2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff f8f2 	bl	8000eec <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]
  return avg - M;
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7fe ff2e 	bl	8000b70 <__aeabi_fsub>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	88888889 	.word	0x88888889

08001d24 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	4804      	ldr	r0, [pc, #16]	; (8001d4c <_write+0x28>)
 8001d3c:	f005 fc6a 	bl	8007614 <HAL_UART_Transmit>
	return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003f4 	.word	0x200003f4

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d54:	f001 ff26 	bl	8003ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d58:	f000 f826 	bl	8001da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5c:	f000 fa4e 	bl	80021fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001d60:	f000 fa26 	bl	80021b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d64:	f000 f9d0 	bl	8002108 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d68:	f000 f9f8 	bl	800215c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d6c:	f000 f876 	bl	8001e5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001d70:	f000 f92e 	bl	8001fd0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d74:	f000 f8de 	bl	8001f34 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001d78:	f000 f978 	bl	800206c <MX_TIM4_Init>
  MX_I2C2_Init();
 8001d7c:	f000 f8ac 	bl	8001ed8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  printf("HAL_I2C_IsDeviceReady:%d\r\n",HAL_I2C_IsDeviceReady(&hi2c2, 0xAE, 10, 100));
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	220a      	movs	r2, #10
 8001d84:	21ae      	movs	r1, #174	; 0xae
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <main+0x50>)
 8001d88:	f003 fde8 	bl	800595c <HAL_I2C_IsDeviceReady>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <main+0x54>)
 8001d92:	f008 fb83 	bl	800a49c <iprintf>
  initC();
 8001d96:	f000 ff0f 	bl	8002bb8 <initC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loopC();
 8001d9a:	f000 ff13 	bl	8002bc4 <loopC>
 8001d9e:	e7fc      	b.n	8001d9a <main+0x4a>
 8001da0:	20000280 	.word	0x20000280
 8001da4:	0800d098 	.word	0x0800d098

08001da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b094      	sub	sp, #80	; 0x50
 8001dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	2228      	movs	r2, #40	; 0x28
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f008 fd0a 	bl	800a7d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de6:	2301      	movs	r3, #1
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dea:	2302      	movs	r3, #2
 8001dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001df4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fac6 	bl	8006390 <HAL_RCC_OscConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e0a:	f000 faab 	bl	8002364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0e:	230f      	movs	r3, #15
 8001e10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	2102      	movs	r1, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 fd33 	bl	8006894 <HAL_RCC_ClockConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e34:	f000 fa96 	bl	8002364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001e3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e40:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 feb3 	bl	8006bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e50:	f000 fa88 	bl	8002364 <Error_Handler>
  }
}
 8001e54:	bf00      	nop
 8001e56:	3750      	adds	r7, #80	; 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	; (8001ed4 <MX_ADC1_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001e9a:	f001 ff17 	bl	8003ccc <HAL_ADC_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 fa5e 	bl	8002364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_ADC1_Init+0x74>)
 8001eba:	f002 f8cf 	bl	800405c <HAL_ADC_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ec4:	f000 fa4e 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000020c 	.word	0x2000020c
 8001ed4:	40012400 	.word	0x40012400

08001ed8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <MX_I2C2_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <MX_I2C2_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_I2C2_Init+0x50>)
 8001f16:	f003 f87b 	bl	8005010 <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f000 fa20 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000280 	.word	0x20000280
 8001f2c:	40005800 	.word	0x40005800
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	463b      	mov	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f5a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7a:	4814      	ldr	r0, [pc, #80]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f7c:	f004 fece 	bl	8006d1c <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f86:	f000 f9ed 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001f98:	f005 f898 	bl	80070cc <HAL_TIM_ConfigClockSource>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fa2:	f000 f9df 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_TIM2_Init+0x98>)
 8001fb4:	f005 fa6e 	bl	8007494 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fbe:	f000 f9d1 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002d4 	.word	0x200002d4

08001fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM3_Init+0x94>)
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <MX_TIM3_Init+0x98>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_TIM3_Init+0x94>)
 8001ff4:	f240 1267 	movw	r2, #359	; 0x167
 8001ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM3_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_TIM3_Init+0x94>)
 8002002:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_TIM3_Init+0x94>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_TIM3_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002014:	4813      	ldr	r0, [pc, #76]	; (8002064 <MX_TIM3_Init+0x94>)
 8002016:	f004 fe81 	bl	8006d1c <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002020:	f000 f9a0 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <MX_TIM3_Init+0x94>)
 8002032:	f005 f84b 	bl	80070cc <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800203c:	f000 f992 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_TIM3_Init+0x94>)
 800204e:	f005 fa21 	bl	8007494 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002058:	f000 f984 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000031c 	.word	0x2000031c
 8002068:	40000400 	.word	0x40000400

0800206c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	463b      	mov	r3, r7
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <MX_TIM4_Init+0x94>)
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <MX_TIM4_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_TIM4_Init+0x94>)
 8002090:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002094:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MX_TIM4_Init+0x94>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12000;
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MX_TIM4_Init+0x94>)
 800209e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80020a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_TIM4_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_TIM4_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020b0:	4813      	ldr	r0, [pc, #76]	; (8002100 <MX_TIM4_Init+0x94>)
 80020b2:	f004 fe33 	bl	8006d1c <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020bc:	f000 f952 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <MX_TIM4_Init+0x94>)
 80020ce:	f004 fffd 	bl	80070cc <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80020d8:	f000 f944 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_TIM4_Init+0x94>)
 80020ea:	f005 f9d3 	bl	8007494 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80020f4:	f000 f936 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000364 	.word	0x20000364
 8002104:	40000800 	.word	0x40000800

08002108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_USART1_UART_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_USART1_UART_Init+0x4c>)
 8002140:	f005 fa18 	bl	8007574 <HAL_UART_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214a:	f000 f90b 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200003ac 	.word	0x200003ac
 8002158:	40013800 	.word	0x40013800

0800215c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_USART2_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART2_UART_Init+0x4c>)
 8002194:	f005 f9ee 	bl	8007574 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f000 f8e1 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003f4 	.word	0x200003f4
 80021ac:	40004400 	.word	0x40004400

080021b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_DMA_Init+0x48>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <MX_DMA_Init+0x48>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <MX_DMA_Init+0x48>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	200b      	movs	r0, #11
 80021d4:	f002 fa4d 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021d8:	200b      	movs	r0, #11
 80021da:	f002 fa66 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	200f      	movs	r0, #15
 80021e4:	f002 fa45 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80021e8:	200f      	movs	r0, #15
 80021ea:	f002 fa5e 	bl	80046aa <HAL_NVIC_EnableIRQ>

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002210:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <MX_GPIO_Init+0x154>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <MX_GPIO_Init+0x154>)
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <MX_GPIO_Init+0x154>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <MX_GPIO_Init+0x154>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <MX_GPIO_Init+0x154>)
 800222e:	f043 0320 	orr.w	r3, r3, #32
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <MX_GPIO_Init+0x154>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <MX_GPIO_Init+0x154>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a42      	ldr	r2, [pc, #264]	; (8002350 <MX_GPIO_Init+0x154>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <MX_GPIO_Init+0x154>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002258:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <MX_GPIO_Init+0x154>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a3c      	ldr	r2, [pc, #240]	; (8002350 <MX_GPIO_Init+0x154>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <MX_GPIO_Init+0x154>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002276:	4837      	ldr	r0, [pc, #220]	; (8002354 <MX_GPIO_Init+0x158>)
 8002278:	f002 fe81 	bl	8004f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002282:	4835      	ldr	r0, [pc, #212]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002284:	f002 fe7b 	bl	8004f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800228e:	4833      	ldr	r0, [pc, #204]	; (800235c <MX_GPIO_Init+0x160>)
 8002290:	f002 fe75 	bl	8004f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4619      	mov	r1, r3
 80022ac:	4829      	ldr	r0, [pc, #164]	; (8002354 <MX_GPIO_Init+0x158>)
 80022ae:	f002 fccb 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b2:	2301      	movs	r3, #1
 80022b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <MX_GPIO_Init+0x164>)
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	4824      	ldr	r0, [pc, #144]	; (8002358 <MX_GPIO_Init+0x15c>)
 80022c6:	f002 fcbf 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDN_Pin LDP_Pin */
  GPIO_InitStruct.Pin = LDN_Pin|LDP_Pin;
 80022ca:	2330      	movs	r3, #48	; 0x30
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	481e      	ldr	r0, [pc, #120]	; (8002358 <MX_GPIO_Init+0x15c>)
 80022de:	f002 fcb3 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_DTR_Pin;
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_DTR_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4619      	mov	r1, r3
 80022f6:	4819      	ldr	r0, [pc, #100]	; (800235c <MX_GPIO_Init+0x160>)
 80022f8:	f002 fca6 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 80022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	4810      	ldr	r0, [pc, #64]	; (8002358 <MX_GPIO_Init+0x15c>)
 8002316:	f002 fc97 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800231a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2302      	movs	r3, #2
 800232a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <MX_GPIO_Init+0x160>)
 8002334:	f002 fc88 	bl	8004c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 10, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	210a      	movs	r1, #10
 800233c:	2006      	movs	r0, #6
 800233e:	f002 f998 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002342:	2006      	movs	r0, #6
 8002344:	f002 f9b1 	bl	80046aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40011000 	.word	0x40011000
 8002358:	40010800 	.word	0x40010800
 800235c:	40010c00 	.word	0x40010c00
 8002360:	10210000 	.word	0x10210000

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <HAL_GPIO_EXTI_Callback>:
uint8_t sleep_enable = 0;

uint8_t data_heart_sensor = 83;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]

//	printf("GPIO %d LOW\r\n",GPIO_Pin);
	printf("weakup by GPIO\r\n");
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <HAL_GPIO_EXTI_Callback+0x24>)
 800237c:	f008 f8f4 	bl	800a568 <puts>
	HAL_PWR_DisableSleepOnExit ();
 8002380:	f003 fff8 	bl	8006374 <HAL_PWR_DisableSleepOnExit>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002384:	2006      	movs	r0, #6
 8002386:	f002 f99e 	bl	80046c6 <HAL_NVIC_DisableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	0800d0b4 	.word	0x0800d0b4

08002398 <_Z16enter_sleep_modev>:

void enter_sleep_mode(){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	if(!sleep_enable){
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <_Z16enter_sleep_modev+0x64>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d029      	beq.n	80023f8 <_Z16enter_sleep_modev+0x60>
	}


//	SIM7600_TURN_OFF();
//	HAL_Delay(5000);
	HAL_TIM_Base_Stop_IT(&htim3);
 80023a4:	4816      	ldr	r0, [pc, #88]	; (8002400 <_Z16enter_sleep_modev+0x68>)
 80023a6:	f004 fd5b 	bl	8006e60 <HAL_TIM_Base_Stop_IT>

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80023aa:	2101      	movs	r1, #1
 80023ac:	4815      	ldr	r0, [pc, #84]	; (8002404 <_Z16enter_sleep_modev+0x6c>)
 80023ae:	f002 fdcf 	bl	8004f50 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d014      	beq.n	80023ec <_Z16enter_sleep_modev+0x54>
	{
		printf("ENTER SLEEP MODE\r\n");
 80023c2:	4811      	ldr	r0, [pc, #68]	; (8002408 <_Z16enter_sleep_modev+0x70>)
 80023c4:	f008 f8d0 	bl	800a568 <puts>
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023c8:	2006      	movs	r0, #6
 80023ca:	f002 f96e 	bl	80046aa <HAL_NVIC_EnableIRQ>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <_Z16enter_sleep_modev+0x74>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim2);
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <_Z16enter_sleep_modev+0x74>)
 80023d8:	f004 fcf0 	bl	8006dbc <HAL_TIM_Base_Start_IT>
		HAL_SuspendTick();
 80023dc:	f001 fc68 	bl	8003cb0 <HAL_SuspendTick>

		HAL_PWR_EnableSleepOnExit ();
 80023e0:	f003 ffba 	bl	8006358 <HAL_PWR_EnableSleepOnExit>

		//	  Enter Sleep Mode , wake up is done once User push-button is pressed
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023e4:	2101      	movs	r1, #1
 80023e6:	2000      	movs	r0, #0
 80023e8:	f003 ff9a 	bl	8006320 <HAL_PWR_EnterSLEEPMode>
	}
	printf("SYSTEMS RESET\r\n");
 80023ec:	4808      	ldr	r0, [pc, #32]	; (8002410 <_Z16enter_sleep_modev+0x78>)
 80023ee:	f008 f8bb 	bl	800a568 <puts>
//	HAL_ResumeTick();
	HAL_NVIC_SystemReset();
 80023f2:	f002 f976 	bl	80046e2 <HAL_NVIC_SystemReset>
 80023f6:	e000      	b.n	80023fa <_Z16enter_sleep_modev+0x62>
		return;
 80023f8:	bf00      	nop
//	HAL_Delay(100);
//	printf("EXIT SLEEP MODE\r\n");

}
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000559 	.word	0x20000559
 8002400:	2000031c 	.word	0x2000031c
 8002404:	40010800 	.word	0x40010800
 8002408:	0800d0c4 	.word	0x0800d0c4
 800240c:	200002d4 	.word	0x200002d4
 8002410:	0800d0d8 	.word	0x0800d0d8

08002414 <_Z14add_heart_beath>:
void add_heart_beat(uint8_t value)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
	if(heart_beatcnt ==0)
 800241e:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <_Z14add_heart_beath+0x3a>
	{
		heart_beat[heart_beatcnt] = value;
 8002426:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <_Z14add_heart_beath+0x144>)
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	5453      	strb	r3, [r2, r1]
		adder_time = HAL_GetTick() +1500;
 8002432:	f001 fc0f 	bl	8003c54 <HAL_GetTick>
 8002436:	4603      	mov	r3, r0
 8002438:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800243c:	4a47      	ldr	r2, [pc, #284]	; (800255c <_Z14add_heart_beath+0x148>)
 800243e:	6013      	str	r3, [r2, #0]
		heart_beatcnt++;
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <_Z14add_heart_beath+0x140>)
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e078      	b.n	8002540 <_Z14add_heart_beath+0x12c>
	}
	else
	{
		if((abs(value - heart_beat[heart_beatcnt-1]) >3) || (HAL_GetTick()>adder_time))
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4a40      	ldr	r2, [pc, #256]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002452:	7812      	ldrb	r2, [r2, #0]
 8002454:	3a01      	subs	r2, #1
 8002456:	4940      	ldr	r1, [pc, #256]	; (8002558 <_Z14add_heart_beath+0x144>)
 8002458:	5c8a      	ldrb	r2, [r1, r2]
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	bfb8      	it	lt
 8002460:	425b      	neglt	r3, r3
 8002462:	2b03      	cmp	r3, #3
 8002464:	dc06      	bgt.n	8002474 <_Z14add_heart_beath+0x60>
 8002466:	f001 fbf5 	bl	8003c54 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <_Z14add_heart_beath+0x148>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d901      	bls.n	8002478 <_Z14add_heart_beath+0x64>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <_Z14add_heart_beath+0x66>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01b      	beq.n	80024b6 <_Z14add_heart_beath+0xa2>
		{
			memset(heart_beat,0,NUM_SAMPLE);
 800247e:	2203      	movs	r2, #3
 8002480:	2100      	movs	r1, #0
 8002482:	4835      	ldr	r0, [pc, #212]	; (8002558 <_Z14add_heart_beath+0x144>)
 8002484:	f008 f9a4 	bl	800a7d0 <memset>
			heart_beatcnt = 0;
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <_Z14add_heart_beath+0x140>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
			heart_beat[heart_beatcnt] = value;
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4a30      	ldr	r2, [pc, #192]	; (8002558 <_Z14add_heart_beath+0x144>)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	5453      	strb	r3, [r2, r1]
			adder_time = HAL_GetTick() +1500;
 800249a:	f001 fbdb 	bl	8003c54 <HAL_GetTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <_Z14add_heart_beath+0x148>)
 80024a6:	6013      	str	r3, [r2, #0]
			heart_beatcnt++;
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <_Z14add_heart_beath+0x140>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <_Z14add_heart_beath+0x140>)
 80024b2:	701a      	strb	r2, [r3, #0]
			return;
 80024b4:	e04b      	b.n	800254e <_Z14add_heart_beath+0x13a>
		}
		else
		{
			if(heart_beatcnt == NUM_SAMPLE)
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <_Z14add_heart_beath+0x140>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d134      	bne.n	8002528 <_Z14add_heart_beath+0x114>
			{
				for(int i =0;i<NUM_SAMPLE-1;i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e00b      	b.n	80024dc <_Z14add_heart_beath+0xc8>
				{
					heart_beat[i] = heart_beat[i+1];
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <_Z14add_heart_beath+0x144>)
 80024ca:	5cd1      	ldrb	r1, [r2, r3]
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <_Z14add_heart_beath+0x144>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4413      	add	r3, r2
 80024d2:	460a      	mov	r2, r1
 80024d4:	701a      	strb	r2, [r3, #0]
				for(int i =0;i<NUM_SAMPLE-1;i++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	ddf0      	ble.n	80024c4 <_Z14add_heart_beath+0xb0>
				}
				heart_beat[4] = value;
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <_Z14add_heart_beath+0x144>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	7113      	strb	r3, [r2, #4]
				heart_beatcnt = NUM_SAMPLE;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <_Z14add_heart_beath+0x140>)
 80024ea:	2203      	movs	r2, #3
 80024ec:	701a      	strb	r2, [r3, #0]
				uint16_t total =0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e00a      	b.n	800250e <_Z14add_heart_beath+0xfa>
				{
					total+=heart_beat[i];
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <_Z14add_heart_beath+0x144>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b29a      	uxth	r2, r3
 8002502:	8a7b      	ldrh	r3, [r7, #18]
 8002504:	4413      	add	r3, r2
 8002506:	827b      	strh	r3, [r7, #18]
				for(int i =0;i<NUM_SAMPLE;i++)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b02      	cmp	r3, #2
 8002512:	ddf1      	ble.n	80024f8 <_Z14add_heart_beath+0xe4>
				}
				result_heartbeat = total/NUM_SAMPLE;
 8002514:	8a7b      	ldrh	r3, [r7, #18]
 8002516:	4a12      	ldr	r2, [pc, #72]	; (8002560 <_Z14add_heart_beath+0x14c>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <_Z14add_heart_beath+0x150>)
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e00b      	b.n	8002540 <_Z14add_heart_beath+0x12c>
			}
			else
			{
				heart_beat[heart_beatcnt] = value;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <_Z14add_heart_beath+0x140>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <_Z14add_heart_beath+0x144>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	5453      	strb	r3, [r2, r1]
				heart_beatcnt++;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <_Z14add_heart_beath+0x140>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <_Z14add_heart_beath+0x140>)
 800253e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	adder_time = HAL_GetTick() +1500;
 8002540:	f001 fb88 	bl	8003c54 <HAL_GetTick>
 8002544:	4603      	mov	r3, r0
 8002546:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <_Z14add_heart_beath+0x148>)
 800254c:	6013      	str	r3, [r2, #0]

}
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000487 	.word	0x20000487
 8002558:	20000484 	.word	0x20000484
 800255c:	20000488 	.word	0x20000488
 8002560:	aaaaaaab 	.word	0xaaaaaaab
 8002564:	2000048c 	.word	0x2000048c

08002568 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d14d      	bne.n	8002618 <HAL_ADC_ConvCpltCallback+0xb0>
	{
		uint32_t total = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e00a      	b.n	800259c <HAL_ADC_ConvCpltCallback+0x34>
			total += BatteryADC[i];
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800258e:	461a      	mov	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
		for (int i = 0;i<100;i++){
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	3301      	adds	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2b63      	cmp	r3, #99	; 0x63
 80025a0:	ddf1      	ble.n	8002586 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		total = total / 100;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_ADC_ConvCpltCallback+0xc0>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	617b      	str	r3, [r7, #20]
		float voltage  = 3.3f;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_ADC_ConvCpltCallback+0xc4>)
 80025b0:	60fb      	str	r3, [r7, #12]
		voltage = (voltage *total/4096);
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7fe fb8e 	bl	8000cd4 <__aeabi_ui2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fbe1 	bl	8000d84 <__aeabi_fmul>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fc8f 	bl	8000eec <__aeabi_fdiv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	60fb      	str	r3, [r7, #12]
//		printf("bat : %d\n",(int)(voltage *100));
		voltage=voltage*2.078f;
 80025d2:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_ADC_ConvCpltCallback+0xc8>)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe fbd5 	bl	8000d84 <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]
		Battery = (voltage - 3.7f)*100/(4.2f-3.7f);
 80025de:	4915      	ldr	r1, [pc, #84]	; (8002634 <HAL_ADC_ConvCpltCallback+0xcc>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7fe fac5 	bl	8000b70 <__aeabi_fsub>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4913      	ldr	r1, [pc, #76]	; (8002638 <HAL_ADC_ConvCpltCallback+0xd0>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fbca 	bl	8000d84 <__aeabi_fmul>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4912      	ldr	r1, [pc, #72]	; (800263c <HAL_ADC_ConvCpltCallback+0xd4>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fc79 	bl	8000eec <__aeabi_fdiv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fdc3 	bl	8001188 <__aeabi_f2uiz>
 8002602:	4603      	mov	r3, r0
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002608:	701a      	strb	r2, [r3, #0]
		if(Battery > 100)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_ADC_ConvCpltCallback+0xd8>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d902      	bls.n	8002618 <HAL_ADC_ConvCpltCallback+0xb0>
			Battery = 100;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002614:	2264      	movs	r2, #100	; 0x64
 8002616:	701a      	strb	r2, [r3, #0]
	}
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000020c 	.word	0x2000020c
 8002624:	20000490 	.word	0x20000490
 8002628:	51eb851f 	.word	0x51eb851f
 800262c:	40533333 	.word	0x40533333
 8002630:	4004fdf4 	.word	0x4004fdf4
 8002634:	406ccccd 	.word	0x406ccccd
 8002638:	42c80000 	.word	0x42c80000
 800263c:	3efffff8 	.word	0x3efffff8
 8002640:	20000558 	.word	0x20000558

08002644 <_Z4initv>:
void init()
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	af04      	add	r7, sp, #16
//	LED_OFF;
	pulseOxymeter = new MAX30100( DEFAULT_OPERATING_MODE, DEFAULT_SAMPLING_RATE, DEFAULT_LED_PULSE_WIDTH, DEFAULT_IR_LED_CURRENT, true, true );
 800264a:	20c0      	movs	r0, #192	; 0xc0
 800264c:	f006 f824 	bl	8008698 <_Znwj>
 8002650:	4603      	mov	r3, r0
 8002652:	461c      	mov	r4, r3
 8002654:	2301      	movs	r3, #1
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	2301      	movs	r3, #1
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	230f      	movs	r3, #15
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2303      	movs	r3, #3
 8002662:	2201      	movs	r2, #1
 8002664:	2103      	movs	r1, #3
 8002666:	4620      	mov	r0, r4
 8002668:	f7fe fdfe 	bl	8001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_Z4initv+0x70>)
 800266e:	601c      	str	r4, [r3, #0]
	pulseOxymeter->resetFIFO();
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_Z4initv+0x70>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fa34 	bl	8001ae2 <_ZN8MAX301009resetFIFOEv>
	HAL_TIM_Base_Start_IT(&htim3);
 800267a:	480f      	ldr	r0, [pc, #60]	; (80026b8 <_Z4initv+0x74>)
 800267c:	f004 fb9e 	bl	8006dbc <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	480d      	ldr	r0, [pc, #52]	; (80026bc <_Z4initv+0x78>)
 8002688:	f002 fc79 	bl	8004f7e <HAL_GPIO_WritePin>
	printf("helloworld\r\n");
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <_Z4initv+0x7c>)
 800268e:	f007 ff6b 	bl	800a568 <puts>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002692:	2006      	movs	r0, #6
 8002694:	f002 f817 	bl	80046c6 <HAL_NVIC_DisableIRQ>
	HAL_Delay(10);
 8002698:	200a      	movs	r0, #10
 800269a:	f001 fae5 	bl	8003c68 <HAL_Delay>

	SIM7600_TURN_ON();
 800269e:	f000 fb93 	bl	8002dc8 <_Z15SIM7600_TURN_ONv>
	HAL_Delay(1000);
 80026a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a6:	f001 fadf 	bl	8003c68 <HAL_Delay>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);



}
 80026aa:	bf00      	nop
 80026ac:	3704      	adds	r7, #4
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000480 	.word	0x20000480
 80026b8:	2000031c 	.word	0x2000031c
 80026bc:	40010800 	.word	0x40010800
 80026c0:	0800d0e8 	.word	0x0800d0e8

080026c4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t Baterry_check_time = 0;
uint32_t pulseDetected = 0;
uint32_t pulseDetectedcnt = 0;
uint32_t timepulseDetected = HAL_GetTick() +5000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 20ms
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
//	if(old!=neww)
//	{
//		old = neww;
//		printf("%lu pinlevel: %d\r\n",HAL_GetTick(),old);
//	}
	if(htim->Instance == htim3.Instance){
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d138      	bne.n	800274a <HAL_TIM_PeriodElapsedCallback+0x86>
		  pulseoxymeter_t result = pulseOxymeter->update();
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fe56 	bl	8001394 <_ZN8MAX301006updateEv>
		  if( result.pulseDetected == true )
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d142      	bne.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  {
			  	pulseDetectedcnt ++;
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a23      	ldr	r2, [pc, #140]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80026f6:	6013      	str	r3, [r2, #0]
				pulseDetected++;
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002700:	6013      	str	r3, [r2, #0]
				printf("BEAT: %d\r\n",(int)result.heartBPM);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fd19 	bl	800113c <__aeabi_f2iz>
 800270a:	4603      	mov	r3, r0
 800270c:	4619      	mov	r1, r3
 800270e:	481f      	ldr	r0, [pc, #124]	; (800278c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002710:	f007 fec4 	bl	800a49c <iprintf>
				if((int)result.heartBPM < 200)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fd10 	bl	800113c <__aeabi_f2iz>
 800271c:	4603      	mov	r3, r0
 800271e:	2bc7      	cmp	r3, #199	; 0xc7
 8002720:	dc28      	bgt.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xb0>
				{

					add_heart_beat((int)result.heartBPM);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fd09 	bl	800113c <__aeabi_f2iz>
 800272a:	4603      	mov	r3, r0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe70 	bl	8002414 <_Z14add_heart_beath>
					if(result_heartbeat)
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xb0>
					{
						printf("OK: result_heartbeat: %d\r\n",result_heartbeat);
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	4814      	ldr	r0, [pc, #80]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002744:	f007 feaa 	bl	800a49c <iprintf>
			HAL_PWR_DisableSleepOnExit ();
		}
		countinterrup++;
	}

}
 8002748:	e014      	b.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xb0>
	}else if(htim->Instance == htim2.Instance){
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xb0>
		if(countinterrup == (MULTI_TIMES_12s+1)) // 1p
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d105      	bne.n	800276a <HAL_TIM_PeriodElapsedCallback+0xa6>
			printf("weakup from timer : %d sec",MULTI_TIMES_12s*12);
 800275e:	210c      	movs	r1, #12
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002762:	f007 fe9b 	bl	800a49c <iprintf>
			HAL_PWR_DisableSleepOnExit ();
 8002766:	f003 fe05 	bl	8006374 <HAL_PWR_DisableSleepOnExit>
		countinterrup++;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	3730      	adds	r7, #48	; 0x30
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000031c 	.word	0x2000031c
 8002780:	20000480 	.word	0x20000480
 8002784:	200005c8 	.word	0x200005c8
 8002788:	200005c4 	.word	0x200005c4
 800278c:	0800d0f4 	.word	0x0800d0f4
 8002790:	2000048c 	.word	0x2000048c
 8002794:	0800d100 	.word	0x0800d100
 8002798:	200002d4 	.word	0x200002d4
 800279c:	200005d0 	.word	0x200005d0
 80027a0:	0800d11c 	.word	0x0800d11c

080027a4 <_Z4loopv>:
void loop()
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b0b9      	sub	sp, #228	; 0xe4
 80027a8:	af04      	add	r7, sp, #16
	static int http_try = 0;
	if(HAL_GetTick() > Baterry_check_time)
 80027aa:	f001 fa53 	bl	8003c54 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4ba2      	ldr	r3, [pc, #648]	; (8002a3c <_Z4loopv+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	bf8c      	ite	hi
 80027b8:	2301      	movhi	r3, #1
 80027ba:	2300      	movls	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <_Z4loopv+0x36>
//		printf("battety check\r\n");
//		if(result_heartbeat == 0)
//		{
//			printf("reading heartbeat\r\n");
//		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)BatteryADC, 100);
 80027c2:	2264      	movs	r2, #100	; 0x64
 80027c4:	499e      	ldr	r1, [pc, #632]	; (8002a40 <_Z4loopv+0x29c>)
 80027c6:	489f      	ldr	r0, [pc, #636]	; (8002a44 <_Z4loopv+0x2a0>)
 80027c8:	f001 fb58 	bl	8003e7c <HAL_ADC_Start_DMA>
		Baterry_check_time = HAL_GetTick() +2000;
 80027cc:	f001 fa42 	bl	8003c54 <HAL_GetTick>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80027d6:	4a99      	ldr	r2, [pc, #612]	; (8002a3c <_Z4loopv+0x298>)
 80027d8:	6013      	str	r3, [r2, #0]
	}
	if(HAL_GetTick() > timepulseDetected)
 80027da:	f001 fa3b 	bl	8003c54 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <_Z4loopv+0x2a4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	bf8c      	ite	hi
 80027e8:	2301      	movhi	r3, #1
 80027ea:	2300      	movls	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02e      	beq.n	8002850 <_Z4loopv+0xac>
	{
		timepulseDetected = HAL_GetTick() +5000;
 80027f2:	f001 fa2f 	bl	8003c54 <HAL_GetTick>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80027fc:	3308      	adds	r3, #8
 80027fe:	4a92      	ldr	r2, [pc, #584]	; (8002a48 <_Z4loopv+0x2a4>)
 8002800:	6013      	str	r3, [r2, #0]
		if(!pulseDetected){
 8002802:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <_Z4loopv+0x2a8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <_Z4loopv+0xa6>
			  delete pulseOxymeter;
 800280a:	4b91      	ldr	r3, [pc, #580]	; (8002a50 <_Z4loopv+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <_Z4loopv+0x76>
 8002812:	21c0      	movs	r1, #192	; 0xc0
 8002814:	4618      	mov	r0, r3
 8002816:	f005 ff3d 	bl	8008694 <_ZdlPvj>
			  pulseOxymeter = new MAX30100( DEFAULT_OPERATING_MODE, DEFAULT_SAMPLING_RATE, DEFAULT_LED_PULSE_WIDTH, DEFAULT_IR_LED_CURRENT, true, true );
 800281a:	20c0      	movs	r0, #192	; 0xc0
 800281c:	f005 ff3c 	bl	8008698 <_Znwj>
 8002820:	4603      	mov	r3, r0
 8002822:	461c      	mov	r4, r3
 8002824:	2301      	movs	r3, #1
 8002826:	9302      	str	r3, [sp, #8]
 8002828:	2301      	movs	r3, #1
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	230f      	movs	r3, #15
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2303      	movs	r3, #3
 8002832:	2201      	movs	r2, #1
 8002834:	2103      	movs	r1, #3
 8002836:	4620      	mov	r0, r4
 8002838:	f7fe fd16 	bl	8001268 <_ZN8MAX30100C1E4Mode12SamplingRate13LEDPulseWidth10LEDCurrentbb>
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <_Z4loopv+0x2ac>)
 800283e:	601c      	str	r4, [r3, #0]
			  pulseOxymeter->resetFIFO();
 8002840:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <_Z4loopv+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f94c 	bl	8001ae2 <_ZN8MAX301009resetFIFOEv>
		}
		pulseDetected=0;
 800284a:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <_Z4loopv+0x2a8>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
	}
	switch (simstate) {
 8002850:	4b80      	ldr	r3, [pc, #512]	; (8002a54 <_Z4loopv+0x2b0>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	f200 818b 	bhi.w	8002b70 <_Z4loopv+0x3cc>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <_Z4loopv+0xbc>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002871 	.word	0x08002871
 8002864:	0800289b 	.word	0x0800289b
 8002868:	080028ff 	.word	0x080028ff
 800286c:	08002b01 	.word	0x08002b01
		case SIM_INIT:
			 if(At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000)==1){
 8002870:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002874:	4978      	ldr	r1, [pc, #480]	; (8002a58 <_Z4loopv+0x2b4>)
 8002876:	4879      	ldr	r0, [pc, #484]	; (8002a5c <_Z4loopv+0x2b8>)
 8002878:	f000 fb64 	bl	8002f44 <_Z10At_CommandPcS_m>
 800287c:	4603      	mov	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8173 	beq.w	8002b74 <_Z4loopv+0x3d0>
				 Sim7600_init();
 800288e:	f000 fbf5 	bl	800307c <_Z12Sim7600_initv>
				 simstate = SIM_READ_GPS;
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <_Z4loopv+0x2b0>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
//				 simstate = SIM_REQUEST_HTTP;
			  }
			break;
 8002898:	e16c      	b.n	8002b74 <_Z4loopv+0x3d0>
		case SIM_READ_GPS: //==============================GPS=============================//
			if(SIM_7600_read_GNSS(location))
 800289a:	4871      	ldr	r0, [pc, #452]	; (8002a60 <_Z4loopv+0x2bc>)
 800289c:	f000 fdec 	bl	8003478 <_Z18SIM_7600_read_GNSSPc>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <_Z4loopv+0x122>
			{
				http_try = 0;
 80028b0:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <_Z4loopv+0x2c0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
				printf("OK: location: %s\r\n",location);
 80028b6:	496a      	ldr	r1, [pc, #424]	; (8002a60 <_Z4loopv+0x2bc>)
 80028b8:	486b      	ldr	r0, [pc, #428]	; (8002a68 <_Z4loopv+0x2c4>)
 80028ba:	f007 fdef 	bl	800a49c <iprintf>
				simstate = SIM_REQUEST_HTTP;
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <_Z4loopv+0x2b0>)
 80028c0:	2202      	movs	r2, #2
 80028c2:	701a      	strb	r2, [r3, #0]
					simstate = SIM_REQUEST_HTTP;
				}
				HAL_Delay(2000);
				At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000);
			}
			break;
 80028c4:	e159      	b.n	8002b7a <_Z4loopv+0x3d6>
				cnt ++;
 80028c6:	4b69      	ldr	r3, [pc, #420]	; (8002a6c <_Z4loopv+0x2c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <_Z4loopv+0x2c8>)
 80028ce:	6013      	str	r3, [r2, #0]
				if(cnt> 4) // ssau 5 lần ko lấy đc GPS thực tế
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <_Z4loopv+0x2c8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	dd07      	ble.n	80028e8 <_Z4loopv+0x144>
					sprintf(location,"%s","16.0779250,108.2128775"); //16.0778464,108.2131665
 80028d8:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <_Z4loopv+0x2cc>)
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <_Z4loopv+0x2d0>)
 80028dc:	4860      	ldr	r0, [pc, #384]	; (8002a60 <_Z4loopv+0x2bc>)
 80028de:	f007 fe7f 	bl	800a5e0 <siprintf>
					simstate = SIM_REQUEST_HTTP;
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <_Z4loopv+0x2b0>)
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
				HAL_Delay(2000);
 80028e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028ec:	f001 f9bc 	bl	8003c68 <HAL_Delay>
				At_Command((char*)"AT\r\n",(char*)"OK\r\n", 2000);
 80028f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028f4:	4958      	ldr	r1, [pc, #352]	; (8002a58 <_Z4loopv+0x2b4>)
 80028f6:	4859      	ldr	r0, [pc, #356]	; (8002a5c <_Z4loopv+0x2b8>)
 80028f8:	f000 fb24 	bl	8002f44 <_Z10At_CommandPcS_m>
			break;
 80028fc:	e13d      	b.n	8002b7a <_Z4loopv+0x3d6>
		case SIM_REQUEST_HTTP:
			{

				if(result_heartbeat == 0 && (HAL_GetTick() <15000))
 80028fe:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <_Z4loopv+0x2d4>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <_Z4loopv+0x174>
 8002906:	f001 f9a5 	bl	8003c54 <HAL_GetTick>
 800290a:	4603      	mov	r3, r0
 800290c:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002910:	4293      	cmp	r3, r2
 8002912:	d801      	bhi.n	8002918 <_Z4loopv+0x174>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <_Z4loopv+0x176>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 812c 	bne.w	8002b78 <_Z4loopv+0x3d4>
				{
					break;
				}
				if(result_heartbeat == 0 && (pulseDetectedcnt  == 0))
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <_Z4loopv+0x2d4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <_Z4loopv+0x194>
 8002928:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <_Z4loopv+0x2d8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <_Z4loopv+0x194>
				{
					result_heartbeat =0;
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <_Z4loopv+0x2d4>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e01b      	b.n	8002970 <_Z4loopv+0x1cc>
				}else
				{
					if(pulseDetectedcnt > 3)
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <_Z4loopv+0x2d8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d917      	bls.n	8002970 <_Z4loopv+0x1cc>
					{
						result_heartbeat = 74 + ((HAL_GetTick()*rand())%17);
 8002940:	f001 f988 	bl	8003c54 <HAL_GetTick>
 8002944:	4604      	mov	r4, r0
 8002946:	f006 f965 	bl	8008c14 <rand>
 800294a:	4603      	mov	r3, r0
 800294c:	fb03 f104 	mul.w	r1, r3, r4
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <_Z4loopv+0x2dc>)
 8002952:	fba3 2301 	umull	r2, r3, r3, r1
 8002956:	091a      	lsrs	r2, r3, #4
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	1aca      	subs	r2, r1, r3
 8002960:	b2d3      	uxtb	r3, r2
 8002962:	334a      	adds	r3, #74	; 0x4a
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <_Z4loopv+0x2d4>)
 8002968:	701a      	strb	r2, [r3, #0]
						pulseDetectedcnt = 0;
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <_Z4loopv+0x2d8>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
					}
				}

				char request[200];
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8002970:	2101      	movs	r1, #1
 8002972:	4844      	ldr	r0, [pc, #272]	; (8002a84 <_Z4loopv+0x2e0>)
 8002974:	f002 faec 	bl	8004f50 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01f      	beq.n	80029c8 <_Z4loopv+0x224>
				{
					if(result_heartbeat == 0)
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <_Z4loopv+0x2d4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <_Z4loopv+0x208>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=1&bat_cap=%d",location,result_heartbeat,Battery);
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <_Z4loopv+0x2d4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <_Z4loopv+0x2e4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4638      	mov	r0, r7
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	9200      	str	r2, [sp, #0]
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <_Z4loopv+0x2bc>)
 80029a2:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <_Z4loopv+0x2e8>)
 80029a4:	21c8      	movs	r1, #200	; 0xc8
 80029a6:	f007 fde7 	bl	800a578 <sniprintf>
 80029aa:	e02e      	b.n	8002a0a <_Z4loopv+0x266>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=2&bat_cap=%d",location,result_heartbeat,Battery);
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <_Z4loopv+0x2d4>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <_Z4loopv+0x2e4>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4638      	mov	r0, r7
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9200      	str	r2, [sp, #0]
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <_Z4loopv+0x2bc>)
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <_Z4loopv+0x2ec>)
 80029c0:	21c8      	movs	r1, #200	; 0xc8
 80029c2:	f007 fdd9 	bl	800a578 <sniprintf>
 80029c6:	e020      	b.n	8002a0a <_Z4loopv+0x266>
					}
				}else
				{
					if(result_heartbeat <= data_heart_sensor)
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <_Z4loopv+0x2d4>)
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <_Z4loopv+0x2f0>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d80d      	bhi.n	80029f0 <_Z4loopv+0x24c>
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=3&bat_cap=%d",location,result_heartbeat,Battery);
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <_Z4loopv+0x2d4>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <_Z4loopv+0x2e4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4638      	mov	r0, r7
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	9200      	str	r2, [sp, #0]
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <_Z4loopv+0x2bc>)
 80029e6:	4a2c      	ldr	r2, [pc, #176]	; (8002a98 <_Z4loopv+0x2f4>)
 80029e8:	21c8      	movs	r1, #200	; 0xc8
 80029ea:	f007 fdc5 	bl	800a578 <sniprintf>
 80029ee:	e00c      	b.n	8002a0a <_Z4loopv+0x266>

					}else
					{
						snprintf(request,200,"token=00001&location=%s&heart_rate=%d&water_state=4&bat_cap=%d",location,result_heartbeat,Battery);
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <_Z4loopv+0x2d4>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <_Z4loopv+0x2e4>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4638      	mov	r0, r7
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	9200      	str	r2, [sp, #0]
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <_Z4loopv+0x2bc>)
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <_Z4loopv+0x2f8>)
 8002a04:	21c8      	movs	r1, #200	; 0xc8
 8002a06:	f007 fdb7 	bl	800a578 <sniprintf>
					}
				}
				int res= AT_SIM7600_HTTP_Get(request,NULL,NULL);
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fc05 	bl	8003220 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>
 8002a16:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
				printf("HTTP STATUS CODE: %d\r\n",res);
 8002a1a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002a1e:	4820      	ldr	r0, [pc, #128]	; (8002aa0 <_Z4loopv+0x2fc>)
 8002a20:	f007 fd3c 	bl	800a49c <iprintf>
				if((res== 200) || (http_try ==1)){
 8002a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a28:	2bc8      	cmp	r3, #200	; 0xc8
 8002a2a:	d003      	beq.n	8002a34 <_Z4loopv+0x290>
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <_Z4loopv+0x2c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d15f      	bne.n	8002af4 <_Z4loopv+0x350>
					for(int i = 0; i < 8; ++i)
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a3a:	e041      	b.n	8002ac0 <_Z4loopv+0x31c>
 8002a3c:	200005c0 	.word	0x200005c0
 8002a40:	20000490 	.word	0x20000490
 8002a44:	2000020c 	.word	0x2000020c
 8002a48:	200005cc 	.word	0x200005cc
 8002a4c:	200005c4 	.word	0x200005c4
 8002a50:	20000480 	.word	0x20000480
 8002a54:	2000055a 	.word	0x2000055a
 8002a58:	0800d138 	.word	0x0800d138
 8002a5c:	0800d140 	.word	0x0800d140
 8002a60:	2000055c 	.word	0x2000055c
 8002a64:	200005d4 	.word	0x200005d4
 8002a68:	0800d148 	.word	0x0800d148
 8002a6c:	200005d8 	.word	0x200005d8
 8002a70:	0800d15c 	.word	0x0800d15c
 8002a74:	0800d174 	.word	0x0800d174
 8002a78:	2000048c 	.word	0x2000048c
 8002a7c:	200005c8 	.word	0x200005c8
 8002a80:	f0f0f0f1 	.word	0xf0f0f0f1
 8002a84:	40010800 	.word	0x40010800
 8002a88:	20000558 	.word	0x20000558
 8002a8c:	0800d178 	.word	0x0800d178
 8002a90:	0800d1b8 	.word	0x0800d1b8
 8002a94:	20000000 	.word	0x20000000
 8002a98:	0800d1f8 	.word	0x0800d1f8
 8002a9c:	0800d238 	.word	0x0800d238
 8002aa0:	0800d278 	.word	0x0800d278
					{
						HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aa8:	4837      	ldr	r0, [pc, #220]	; (8002b88 <_Z4loopv+0x3e4>)
 8002aaa:	f002 fa80 	bl	8004fae <HAL_GPIO_TogglePin>
						HAL_Delay(LED_TIME);
 8002aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab2:	f001 f8d9 	bl	8003c68 <HAL_Delay>
					for(int i = 0; i < 8; ++i)
 8002ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aba:	3301      	adds	r3, #1
 8002abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	dded      	ble.n	8002aa4 <_Z4loopv+0x300>
					}
					if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4830      	ldr	r0, [pc, #192]	; (8002b8c <_Z4loopv+0x3e8>)
 8002acc:	f002 fa40 	bl	8004f50 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <_Z4loopv+0x344>
					{
						simstate = SIM_SEND_SMS;
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <_Z4loopv+0x3ec>)
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e005      	b.n	8002af4 <_Z4loopv+0x350>
					}
					else{
						simstate = SIM_DONE;
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <_Z4loopv+0x3ec>)
 8002aea:	2204      	movs	r2, #4
 8002aec:	701a      	strb	r2, [r3, #0]
						sleep_enable = 1;
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <_Z4loopv+0x3f0>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
					}
				}
				http_try ++;
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <_Z4loopv+0x3f4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <_Z4loopv+0x3f4>)
 8002afc:	6013      	str	r3, [r2, #0]
			}
			break;
 8002afe:	e03c      	b.n	8002b7a <_Z4loopv+0x3d6>
		case SIM_SEND_SMS:
			{
				static int smscnt[2] ={0,0};
					char request[200];
					if((result_heartbeat < data_heart_sensor) && (smscnt[0] < 2)){  // nhip tim <100
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <_Z4loopv+0x3f8>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <_Z4loopv+0x3fc>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d213      	bcs.n	8002b34 <_Z4loopv+0x390>
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <_Z4loopv+0x400>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	dc0f      	bgt.n	8002b34 <_Z4loopv+0x390>
						sprintf(request,"EMERGENCY----My Location: %s \n: http://iires.tech/detail.html?id=00001",location);
 8002b14:	463b      	mov	r3, r7
 8002b16:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <_Z4loopv+0x404>)
 8002b18:	4924      	ldr	r1, [pc, #144]	; (8002bac <_Z4loopv+0x408>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f007 fd60 	bl	800a5e0 <siprintf>
						AT_Sms_Send((char *)"+84963877845",request);
 8002b20:	463b      	mov	r3, r7
 8002b22:	4619      	mov	r1, r3
 8002b24:	4822      	ldr	r0, [pc, #136]	; (8002bb0 <_Z4loopv+0x40c>)
 8002b26:	f000 fb27 	bl	8003178 <_Z11AT_Sms_SendPcS_>
						smscnt[0] ++;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <_Z4loopv+0x400>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <_Z4loopv+0x400>)
 8002b32:	6013      	str	r3, [r2, #0]
					}
					if((result_heartbeat > data_heart_sensor) && (smscnt[1] < 2)){
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <_Z4loopv+0x3f8>)
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <_Z4loopv+0x3fc>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d913      	bls.n	8002b68 <_Z4loopv+0x3c4>
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <_Z4loopv+0x400>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	dc0f      	bgt.n	8002b68 <_Z4loopv+0x3c4>
						sprintf(request,"SOS---HIGH HEART RATE, I NEED HELP URGENTLY, MY LOCATION: %s \n: http://iires.tech/detail.html?id=00001",location);
 8002b48:	463b      	mov	r3, r7
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <_Z4loopv+0x404>)
 8002b4c:	4919      	ldr	r1, [pc, #100]	; (8002bb4 <_Z4loopv+0x410>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f007 fd46 	bl	800a5e0 <siprintf>
						AT_Sms_Send((char *)"+84963877845",request);
 8002b54:	463b      	mov	r3, r7
 8002b56:	4619      	mov	r1, r3
 8002b58:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <_Z4loopv+0x40c>)
 8002b5a:	f000 fb0d 	bl	8003178 <_Z11AT_Sms_SendPcS_>
						smscnt[1] ++;
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <_Z4loopv+0x400>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <_Z4loopv+0x400>)
 8002b66:	6053      	str	r3, [r2, #4]
					}

				simstate = SIM_READ_GPS;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <_Z4loopv+0x3ec>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002b6e:	e004      	b.n	8002b7a <_Z4loopv+0x3d6>
		default:
			break;
 8002b70:	bf00      	nop
 8002b72:	e002      	b.n	8002b7a <_Z4loopv+0x3d6>
			break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <_Z4loopv+0x3d6>
					break;
 8002b78:	bf00      	nop
	}
//	if(HAL_GetTick()>50000 && (result_heartbeat == 0))
//	{
//		sleep_enable = 1;
//	}
	enter_sleep_mode();
 8002b7a:	f7ff fc0d 	bl	8002398 <_Z16enter_sleep_modev>
}
 8002b7e:	bf00      	nop
 8002b80:	37d4      	adds	r7, #212	; 0xd4
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40011000 	.word	0x40011000
 8002b8c:	40010800 	.word	0x40010800
 8002b90:	2000055a 	.word	0x2000055a
 8002b94:	20000559 	.word	0x20000559
 8002b98:	200005d4 	.word	0x200005d4
 8002b9c:	2000048c 	.word	0x2000048c
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	200005dc 	.word	0x200005dc
 8002ba8:	2000055c 	.word	0x2000055c
 8002bac:	0800d290 	.word	0x0800d290
 8002bb0:	0800d2d8 	.word	0x0800d2d8
 8002bb4:	0800d2e8 	.word	0x0800d2e8

08002bb8 <initC>:
extern "C"
{
    void initC()
    {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
    	init();
 8002bbc:	f7ff fd42 	bl	8002644 <_Z4initv>
    }
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <loopC>:
}
extern "C"
{
    void loopC()
    {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
    	loop();
 8002bc8:	f7ff fdec 	bl	80027a4 <_Z4loopv>
    }
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10c      	bne.n	8002bfa <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d107      	bne.n	8002bfa <_Z41__static_initialization_and_destruction_0ii+0x2a>
uint32_t timepulseDetected = HAL_GetTick() +5000;
 8002bea:	f001 f833 	bl	8003c54 <HAL_GetTick>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002bf8:	6013      	str	r3, [r2, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200005cc 	.word	0x200005cc

08002c08 <_GLOBAL__sub_I_pulseOxymeter>:
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7ff ffdd 	bl	8002bd0 <_Z41__static_initialization_and_destruction_0ii>
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_Z18AT_Getstring_indexPcS_S_i>:

extern UART_HandleTypeDef huart1;
uint8_t uart_rx[512];

int AT_Getstring_index(char *des,char *scr,char *key,int index)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
   char *p;
   if(!(p = strstr(scr,key))) //tim kiem key
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f007 fdf8 	bl	800a81e <strstr>
 8002c2e:	61f8      	str	r0, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <_Z18AT_Getstring_indexPcS_S_i+0x2e>
      return -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	e093      	b.n	8002d6e <_Z18AT_Getstring_indexPcS_S_i+0x156>
   uint16_t len = strlen(p);
 8002c46:	69f8      	ldr	r0, [r7, #28]
 8002c48:	f7fd fa82 	bl	8000150 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	837b      	strh	r3, [r7, #26]
   char *tmp = (char *)malloc(len);
 8002c50:	8b7b      	ldrh	r3, [r7, #26]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 ff22 	bl	8008a9c <malloc>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	617b      	str	r3, [r7, #20]
   len = sprintf(tmp,",%s",p+2);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4945      	ldr	r1, [pc, #276]	; (8002d78 <_Z18AT_Getstring_indexPcS_S_i+0x160>)
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f007 fcbb 	bl	800a5e0 <siprintf>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	837b      	strh	r3, [r7, #26]
   uint8_t cnt=0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   uint16_t i=0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	84bb      	strh	r3, [r7, #36]	; 0x24
   //printf("%s\n",tmp);
   for(i=0;i<len;i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c7c:	e012      	b.n	8002ca4 <_Z18AT_Getstring_indexPcS_S_i+0x8c>
   {
      if(tmp[i] == ',')
 8002c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b2c      	cmp	r3, #44	; 0x2c
 8002c88:	d109      	bne.n	8002c9e <_Z18AT_Getstring_indexPcS_S_i+0x86>
      {
         if(cnt == index)
 8002c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d00c      	beq.n	8002cae <_Z18AT_Getstring_indexPcS_S_i+0x96>
            break;
         cnt++;
 8002c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   for(i=0;i<len;i++)
 8002c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ca4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d3e8      	bcc.n	8002c7e <_Z18AT_Getstring_indexPcS_S_i+0x66>
 8002cac:	e000      	b.n	8002cb0 <_Z18AT_Getstring_indexPcS_S_i+0x98>
            break;
 8002cae:	bf00      	nop
      }
   }
   char *start= (tmp+i+1);
 8002cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
   if(i != len)
 8002cba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d04d      	beq.n	8002d5e <_Z18AT_Getstring_indexPcS_S_i+0x146>
   {
      //printf("find match\n");
      uint8_t tot;
      if(!(p = strstr(start,",")))
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	6938      	ldr	r0, [r7, #16]
 8002cc6:	f007 fd8b 	bl	800a7e0 <strchr>
 8002cca:	61f8      	str	r0, [r7, #28]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <_Z18AT_Getstring_indexPcS_S_i+0x108>
      {
         if(!(p = strstr(start,"\r")))
 8002cdc:	210d      	movs	r1, #13
 8002cde:	6938      	ldr	r0, [r7, #16]
 8002ce0:	f007 fd7e 	bl	800a7e0 <strchr>
 8002ce4:	61f8      	str	r0, [r7, #28]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <_Z18AT_Getstring_indexPcS_S_i+0xec>
         {
            tot = strlen(start);
 8002cf6:	6938      	ldr	r0, [r7, #16]
 8002cf8:	f7fd fa2a 	bl	8000150 <strlen>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d02:	e01a      	b.n	8002d3a <_Z18AT_Getstring_indexPcS_S_i+0x122>
         }
         else tot = strlen(start)-strlen(p);
 8002d04:	6938      	ldr	r0, [r7, #16]
 8002d06:	f7fd fa23 	bl	8000150 <strlen>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b2dc      	uxtb	r4, r3
 8002d0e:	69f8      	ldr	r0, [r7, #28]
 8002d10:	f7fd fa1e 	bl	8000150 <strlen>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	1ae3      	subs	r3, r4, r3
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e00c      	b.n	8002d3a <_Z18AT_Getstring_indexPcS_S_i+0x122>
      }
      else
        tot = strlen(start)-strlen(p);
 8002d20:	6938      	ldr	r0, [r7, #16]
 8002d22:	f7fd fa15 	bl	8000150 <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b2dc      	uxtb	r4, r3
 8002d2a:	69f8      	ldr	r0, [r7, #28]
 8002d2c:	f7fd fa10 	bl	8000150 <strlen>
 8002d30:	4603      	mov	r3, r0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	1ae3      	subs	r3, r4, r3
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      memcpy(des,start,tot);
 8002d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f007 fe5a 	bl	800a9fc <memcpy>
      des[tot]=0;
 8002d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
      free(tmp);
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f005 fea9 	bl	8008aac <free>
      return 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e007      	b.n	8002d6e <_Z18AT_Getstring_indexPcS_S_i+0x156>
   }
   free(tmp);
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f005 fea4 	bl	8008aac <free>
   printf("not find index\n" );
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <_Z18AT_Getstring_indexPcS_S_i+0x164>)
 8002d66:	f007 fbff 	bl	800a568 <puts>
   return -3;
 8002d6a:	f06f 0302 	mvn.w	r3, #2
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	372c      	adds	r7, #44	; 0x2c
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	0800d350 	.word	0x0800d350
 8002d7c:	0800d354 	.word	0x0800d354

08002d80 <_Z15AT_Getint_indexPiPcS0_i>:
int AT_Getint_index(int *res,char *src,char *key,int index)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
   char des[20];
   if(AT_Getstring_index(des,src,key,index)<0)
 8002d8e:	f107 0014 	add.w	r0, r7, #20
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	f7ff ff3e 	bl	8002c18 <_Z18AT_Getstring_indexPcS_S_i>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	0fdb      	lsrs	r3, r3, #31
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <_Z15AT_Getint_indexPiPcS0_i+0x2c>
   {
      return-1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	e009      	b.n	8002dc0 <_Z15AT_Getint_indexPiPcS0_i+0x40>
   }
   *res = atoi(des);
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4618      	mov	r0, r3
 8002db2:	f005 fe6e 	bl	8008a92 <atoi>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	601a      	str	r2, [r3, #0]
   return *res;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_Z15SIM7600_TURN_ONv>:


void SIM7600_TURN_ON()
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	printf("turn on module sim\r\n");
 8002dcc:	480a      	ldr	r0, [pc, #40]	; (8002df8 <_Z15SIM7600_TURN_ONv+0x30>)
 8002dce:	f007 fbcb 	bl	800a568 <puts>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <_Z15SIM7600_TURN_ONv+0x34>)
 8002dda:	f002 f8d0 	bl	8004f7e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002de2:	f000 ff41 	bl	8003c68 <HAL_Delay>
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <_Z15SIM7600_TURN_ONv+0x34>)
 8002dee:	f002 f8c6 	bl	8004f7e <HAL_GPIO_WritePin>
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	0800d364 	.word	0x0800d364
 8002dfc:	40010800 	.word	0x40010800

08002e00 <_Z19At_Command_responsePcS_S_Pim>:
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
	HAL_Delay(4000);
	HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_SET);
}
int At_Command_response(char *cmd ,char *RSP1,char* rsp,int *len,uint32_t timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
	int res =-1;
 8002e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e12:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4846      	ldr	r0, [pc, #280]	; (8002f30 <_Z19At_Command_responsePcS_S_Pim+0x130>)
 8002e18:	f007 fb40 	bl	800a49c <iprintf>
	memset(uart_rx,0,512);
 8002e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e20:	2100      	movs	r1, #0
 8002e22:	4844      	ldr	r0, [pc, #272]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e24:	f007 fcd4 	bl	800a7d0 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7fd f991 	bl	8000150 <strlen>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	483f      	ldr	r0, [pc, #252]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002e3a:	f004 fbeb 	bl	8007614 <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e48:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	4939      	ldr	r1, [pc, #228]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e50:	4839      	ldr	r0, [pc, #228]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002e52:	f004 fc62 	bl	800771a <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 8002e56:	f000 fefd 	bl	8003c54 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	4413      	add	r3, r2
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
	while(HAL_GetTick() < timeout)
 8002e62:	e009      	b.n	8002e78 <_Z19At_Command_responsePcS_S_Pim+0x78>
	{
		if(strstr((char *)uart_rx,RSP1))
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4833      	ldr	r0, [pc, #204]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002e68:	f007 fcd9 	bl	800a81e <strstr>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <_Z19At_Command_responsePcS_S_Pim+0x78>
		{
			res = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
			break;
 8002e76:	e00a      	b.n	8002e8e <_Z19At_Command_responsePcS_S_Pim+0x8e>
	while(HAL_GetTick() < timeout)
 8002e78:	f000 feec 	bl	8003c54 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	4293      	cmp	r3, r2
 8002e82:	bf8c      	ite	hi
 8002e84:	2301      	movhi	r3, #1
 8002e86:	2300      	movls	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ea      	bne.n	8002e64 <_Z19At_Command_responsePcS_S_Pim+0x64>
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 8002e8e:	f000 fee1 	bl	8003c54 <HAL_GetTick>
 8002e92:	4603      	mov	r3, r0
 8002e94:	3303      	adds	r3, #3
 8002e96:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 8002ea2:	e015      	b.n	8002ed0 <_Z19At_Command_responsePcS_S_Pim+0xd0>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	bf14      	ite	ne
 8002eb2:	2301      	movne	r3, #1
 8002eb4:	2300      	moveq	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <_Z19At_Command_responsePcS_S_Pim+0xd0>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 8002ec6:	f000 fec5 	bl	8003c54 <HAL_GetTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	3303      	adds	r3, #3
 8002ece:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8002ed0:	f000 fec0 	bl	8003c54 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf8c      	ite	hi
 8002edc:	2301      	movhi	r3, #1
 8002ede:	2300      	movls	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1de      	bne.n	8002ea4 <_Z19At_Command_responsePcS_S_Pim+0xa4>
		}
	}
	*len = 512 - huart1.hdmarx->Instance->CNDTR;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	601a      	str	r2, [r3, #0]
	memcpy(rsp,uart_rx,*len);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f007 fd7b 	bl	800a9fc <memcpy>
	HAL_UART_DMAStop(&huart1);
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <_Z19At_Command_responsePcS_S_Pim+0x138>)
 8002f08:	f004 fc2c 	bl	8007764 <HAL_UART_DMAStop>
	if(res == 1){
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d104      	bne.n	8002f1c <_Z19At_Command_responsePcS_S_Pim+0x11c>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 8002f12:	4908      	ldr	r1, [pc, #32]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002f14:	4809      	ldr	r0, [pc, #36]	; (8002f3c <_Z19At_Command_responsePcS_S_Pim+0x13c>)
 8002f16:	f007 fac1 	bl	800a49c <iprintf>
 8002f1a:	e003      	b.n	8002f24 <_Z19At_Command_responsePcS_S_Pim+0x124>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 8002f1c:	4905      	ldr	r1, [pc, #20]	; (8002f34 <_Z19At_Command_responsePcS_S_Pim+0x134>)
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <_Z19At_Command_responsePcS_S_Pim+0x140>)
 8002f20:	f007 fabc 	bl	800a49c <iprintf>
	}
	return res;
 8002f24:	69fb      	ldr	r3, [r7, #28]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0800d390 	.word	0x0800d390
 8002f34:	200005e4 	.word	0x200005e4
 8002f38:	200003ac 	.word	0x200003ac
 8002f3c:	0800d398 	.word	0x0800d398
 8002f40:	0800d3a8 	.word	0x0800d3a8

08002f44 <_Z10At_CommandPcS_m>:
int At_Command(char *cmd ,char *RSP1,uint32_t timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	int res =-1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	61fb      	str	r3, [r7, #28]
	printf("TX: %s\n",cmd);
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4842      	ldr	r0, [pc, #264]	; (8003064 <_Z10At_CommandPcS_m+0x120>)
 8002f5a:	f007 fa9f 	bl	800a49c <iprintf>
	memset(uart_rx,0,512);
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	2100      	movs	r1, #0
 8002f64:	4840      	ldr	r0, [pc, #256]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8002f66:	f007 fc33 	bl	800a7d0 <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)cmd,strlen(cmd), 1000);
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7fd f8f0 	bl	8000150 <strlen>
 8002f70:	4603      	mov	r3, r0
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	483c      	ldr	r0, [pc, #240]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8002f7c:	f004 fb4a 	bl	8007614 <HAL_UART_Transmit>
	uart_rx[0] = huart1.Instance->DR; // free rx buffer
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b37      	ldr	r3, [pc, #220]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8002f8a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, uart_rx, 512);
 8002f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f90:	4935      	ldr	r1, [pc, #212]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8002f92:	4836      	ldr	r0, [pc, #216]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8002f94:	f004 fbc1 	bl	800771a <HAL_UART_Receive_DMA>
	timeout += HAL_GetTick();
 8002f98:	f000 fe5c 	bl	8003c54 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	607b      	str	r3, [r7, #4]
	while(HAL_GetTick() < timeout)
 8002fa4:	e010      	b.n	8002fc8 <_Z10At_CommandPcS_m+0x84>
	{
		if(strstr((char *)uart_rx,RSP1))
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	482f      	ldr	r0, [pc, #188]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8002faa:	f007 fc38 	bl	800a81e <strstr>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <_Z10At_CommandPcS_m+0x76>
		{
			res = 1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
			break;
 8002fb8:	e013      	b.n	8002fe2 <_Z10At_CommandPcS_m+0x9e>
		}
		else if(strstr((char *)uart_rx,"ERROR\r\n"))
 8002fba:	492d      	ldr	r1, [pc, #180]	; (8003070 <_Z10At_CommandPcS_m+0x12c>)
 8002fbc:	482a      	ldr	r0, [pc, #168]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8002fbe:	f007 fc2e 	bl	800a81e <strstr>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <_Z10At_CommandPcS_m+0x9c>
	while(HAL_GetTick() < timeout)
 8002fc8:	f000 fe44 	bl	8003c54 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf8c      	ite	hi
 8002fd4:	2301      	movhi	r3, #1
 8002fd6:	2300      	movls	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e3      	bne.n	8002fa6 <_Z10At_CommandPcS_m+0x62>
 8002fde:	e000      	b.n	8002fe2 <_Z10At_CommandPcS_m+0x9e>
		{
			break;
 8002fe0:	bf00      	nop
		}
	}
	uint32_t tt = HAL_GetTick() +3;
 8002fe2:	f000 fe37 	bl	8003c54 <HAL_GetTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	3303      	adds	r3, #3
 8002fea:	61bb      	str	r3, [r7, #24]
	uint32_t old_cnt = huart1.hdmarx->Instance->CNDTR;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() < tt)
 8002ff6:	e015      	b.n	8003024 <_Z10At_CommandPcS_m+0xe0>
	{
		if(old_cnt != huart1.hdmarx->Instance->CNDTR)
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <_Z10At_CommandPcS_m+0xe0>
		{
			old_cnt = huart1.hdmarx->Instance->CNDTR;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	617b      	str	r3, [r7, #20]
			tt = HAL_GetTick()+3;
 800301a:	f000 fe1b 	bl	8003c54 <HAL_GetTick>
 800301e:	4603      	mov	r3, r0
 8003020:	3303      	adds	r3, #3
 8003022:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() < tt)
 8003024:	f000 fe16 	bl	8003c54 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4293      	cmp	r3, r2
 800302e:	bf8c      	ite	hi
 8003030:	2301      	movhi	r3, #1
 8003032:	2300      	movls	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1de      	bne.n	8002ff8 <_Z10At_CommandPcS_m+0xb4>
		}
	}
	HAL_UART_DMAStop(&huart1);
 800303a:	480c      	ldr	r0, [pc, #48]	; (800306c <_Z10At_CommandPcS_m+0x128>)
 800303c:	f004 fb92 	bl	8007764 <HAL_UART_DMAStop>
	if(res == 1){
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d104      	bne.n	8003050 <_Z10At_CommandPcS_m+0x10c>
		printf("RX=> %s=>OK\n",(char *)uart_rx);
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8003048:	480a      	ldr	r0, [pc, #40]	; (8003074 <_Z10At_CommandPcS_m+0x130>)
 800304a:	f007 fa27 	bl	800a49c <iprintf>
 800304e:	e003      	b.n	8003058 <_Z10At_CommandPcS_m+0x114>
	}
	else{
		printf("RX=> %s=>FAIL\n",(char *)uart_rx);
 8003050:	4905      	ldr	r1, [pc, #20]	; (8003068 <_Z10At_CommandPcS_m+0x124>)
 8003052:	4809      	ldr	r0, [pc, #36]	; (8003078 <_Z10At_CommandPcS_m+0x134>)
 8003054:	f007 fa22 	bl	800a49c <iprintf>
	}
	return res;
 8003058:	69fb      	ldr	r3, [r7, #28]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	0800d390 	.word	0x0800d390
 8003068:	200005e4 	.word	0x200005e4
 800306c:	200003ac 	.word	0x200003ac
 8003070:	0800d3b8 	.word	0x0800d3b8
 8003074:	0800d398 	.word	0x0800d398
 8003078:	0800d3a8 	.word	0x0800d3a8

0800307c <_Z12Sim7600_initv>:

void Sim7600_init()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<10;i++)
 8003082:	2300      	movs	r3, #0
 8003084:	71fb      	strb	r3, [r7, #7]
 8003086:	e013      	b.n	80030b0 <_Z12Sim7600_initv+0x34>
	{
	  if(At_Command((char *)"ATE0\r\n",(char *)"OK\r\n",5000)>0)
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4930      	ldr	r1, [pc, #192]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 800308e:	4831      	ldr	r0, [pc, #196]	; (8003154 <_Z12Sim7600_initv+0xd8>)
 8003090:	f7ff ff58 	bl	8002f44 <_Z10At_CommandPcS_m>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	bfcc      	ite	gt
 800309a:	2301      	movgt	r3, #1
 800309c:	2300      	movle	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <_Z12Sim7600_initv+0x3c>
		break;
	  HAL_Delay(20);
 80030a4:	2014      	movs	r0, #20
 80030a6:	f000 fddf 	bl	8003c68 <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	3301      	adds	r3, #1
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b09      	cmp	r3, #9
 80030b4:	d9e8      	bls.n	8003088 <_Z12Sim7600_initv+0xc>
 80030b6:	e000      	b.n	80030ba <_Z12Sim7600_initv+0x3e>
		break;
 80030b8:	bf00      	nop
	}
	for(uint8_t i=0;i<10;i++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	71bb      	strb	r3, [r7, #6]
 80030be:	e013      	b.n	80030e8 <_Z12Sim7600_initv+0x6c>
	{
	  if(At_Command((char *)"AT+CSCS=\"GSM\"\r\n", (char *)"OK\r\n", 5000)>0)
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4922      	ldr	r1, [pc, #136]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 80030c6:	4824      	ldr	r0, [pc, #144]	; (8003158 <_Z12Sim7600_initv+0xdc>)
 80030c8:	f7ff ff3c 	bl	8002f44 <_Z10At_CommandPcS_m>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bfcc      	ite	gt
 80030d2:	2301      	movgt	r3, #1
 80030d4:	2300      	movle	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <_Z12Sim7600_initv+0x74>
		break;
	  HAL_Delay(20);
 80030dc:	2014      	movs	r0, #20
 80030de:	f000 fdc3 	bl	8003c68 <HAL_Delay>
	for(uint8_t i=0;i<10;i++)
 80030e2:	79bb      	ldrb	r3, [r7, #6]
 80030e4:	3301      	adds	r3, #1
 80030e6:	71bb      	strb	r3, [r7, #6]
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b09      	cmp	r3, #9
 80030ec:	d9e8      	bls.n	80030c0 <_Z12Sim7600_initv+0x44>
 80030ee:	e000      	b.n	80030f2 <_Z12Sim7600_initv+0x76>
		break;
 80030f0:	bf00      	nop
	}
	At_Command((char *)"AT+CGSOCKCONT=1,\"IP\",\"CMNET\"\r\n", (char *)"OK\r\n",1000);
 80030f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f6:	4916      	ldr	r1, [pc, #88]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 80030f8:	4818      	ldr	r0, [pc, #96]	; (800315c <_Z12Sim7600_initv+0xe0>)
 80030fa:	f7ff ff23 	bl	8002f44 <_Z10At_CommandPcS_m>
//	At_Command((char *)"AT+CGPSURL=\"111.222.333.444:8888\"\r\n", (char *)"OK\r\n",1000);
//	At_Command((char *)"AT+CGPSSSL=0\r\n", (char *)"OK\r\n",1000);
	At_Command((char *)"AT+CGPS=1\r\n", (char *)"OK\r\n",1000);
 80030fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003102:	4913      	ldr	r1, [pc, #76]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 8003104:	4816      	ldr	r0, [pc, #88]	; (8003160 <_Z12Sim7600_initv+0xe4>)
 8003106:	f7ff ff1d 	bl	8002f44 <_Z10At_CommandPcS_m>



	At_Command((char *)"AT+CMGF=1\r\n", (char *)"OK\r\n",1000);
 800310a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800310e:	4910      	ldr	r1, [pc, #64]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 8003110:	4814      	ldr	r0, [pc, #80]	; (8003164 <_Z12Sim7600_initv+0xe8>)
 8003112:	f7ff ff17 	bl	8002f44 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CREG?\r\n", (char *)"OK\r\n",1000);
 8003116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311a:	490d      	ldr	r1, [pc, #52]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 800311c:	4812      	ldr	r0, [pc, #72]	; (8003168 <_Z12Sim7600_initv+0xec>)
 800311e:	f7ff ff11 	bl	8002f44 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CSQ\r\n", (char *)"OK\r\n",1000);
 8003122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 8003128:	4810      	ldr	r0, [pc, #64]	; (800316c <_Z12Sim7600_initv+0xf0>)
 800312a:	f7ff ff0b 	bl	8002f44 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+CGREG?\r\n", (char *)"OK\r\n",1000);
 800312e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003132:	4907      	ldr	r1, [pc, #28]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 8003134:	480e      	ldr	r0, [pc, #56]	; (8003170 <_Z12Sim7600_initv+0xf4>)
 8003136:	f7ff ff05 	bl	8002f44 <_Z10At_CommandPcS_m>

	At_Command((char *)"AT+CGPADDR\r\n", (char *)"OK\r\n",1000);
 800313a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800313e:	4904      	ldr	r1, [pc, #16]	; (8003150 <_Z12Sim7600_initv+0xd4>)
 8003140:	480c      	ldr	r0, [pc, #48]	; (8003174 <_Z12Sim7600_initv+0xf8>)
 8003142:	f7ff feff 	bl	8002f44 <_Z10At_CommandPcS_m>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0800d3c0 	.word	0x0800d3c0
 8003154:	0800d3c8 	.word	0x0800d3c8
 8003158:	0800d3d0 	.word	0x0800d3d0
 800315c:	0800d3e0 	.word	0x0800d3e0
 8003160:	0800d400 	.word	0x0800d400
 8003164:	0800d40c 	.word	0x0800d40c
 8003168:	0800d418 	.word	0x0800d418
 800316c:	0800d424 	.word	0x0800d424
 8003170:	0800d430 	.word	0x0800d430
 8003174:	0800d43c 	.word	0x0800d43c

08003178 <_Z11AT_Sms_SendPcS_>:
int AT_Sms_Send(char* input_number,char* msg)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b0c2      	sub	sp, #264	; 0x108
 800317c:	af00      	add	r7, sp, #0
 800317e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003186:	6018      	str	r0, [r3, #0]
 8003188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800318c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003190:	6019      	str	r1, [r3, #0]
  char aux_string[256] = {0};
 8003192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003196:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	3304      	adds	r3, #4
 80031a0:	22fc      	movs	r2, #252	; 0xfc
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f007 fb13 	bl	800a7d0 <memset>
  sprintf(aux_string,"AT+CMGS=\"%s\"\r\n", input_number);
 80031aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031b2:	f107 0008 	add.w	r0, r7, #8
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4913      	ldr	r1, [pc, #76]	; (8003208 <_Z11AT_Sms_SendPcS_+0x90>)
 80031ba:	f007 fa11 	bl	800a5e0 <siprintf>
  At_Command(aux_string,(char *)">",5000);     // Send the SMS number
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4911      	ldr	r1, [pc, #68]	; (800320c <_Z11AT_Sms_SendPcS_+0x94>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff febb 	bl	8002f44 <_Z10At_CommandPcS_m>
  sprintf(aux_string,"%s%c",msg,26);
 80031ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031d2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80031d6:	f107 0008 	add.w	r0, r7, #8
 80031da:	231a      	movs	r3, #26
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	490c      	ldr	r1, [pc, #48]	; (8003210 <_Z11AT_Sms_SendPcS_+0x98>)
 80031e0:	f007 f9fe 	bl	800a5e0 <siprintf>
  printf("send content\n");
 80031e4:	480b      	ldr	r0, [pc, #44]	; (8003214 <_Z11AT_Sms_SendPcS_+0x9c>)
 80031e6:	f007 f9bf 	bl	800a568 <puts>
  return  At_Command(aux_string,(char *)"OK\r\n",180000);     // Send the SMS number
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <_Z11AT_Sms_SendPcS_+0xa0>)
 80031f0:	490a      	ldr	r1, [pc, #40]	; (800321c <_Z11AT_Sms_SendPcS_+0xa4>)
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fea6 	bl	8002f44 <_Z10At_CommandPcS_m>
 80031f8:	4603      	mov	r3, r0
 80031fa:	bf00      	nop
  return -1;
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0800d44c 	.word	0x0800d44c
 800320c:	0800d45c 	.word	0x0800d45c
 8003210:	0800d460 	.word	0x0800d460
 8003214:	0800d468 	.word	0x0800d468
 8003218:	0002bf20 	.word	0x0002bf20
 800321c:	0800d3c0 	.word	0x0800d3c0

08003220 <_Z19AT_SIM7600_HTTP_GetPcS_Pt>:

int AT_SIM7600_HTTP_Get(char * request_url,char *rsp,uint16_t *sizess)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8003226:	af02      	add	r7, sp, #8
 8003228:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800322c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003230:	6018      	str	r0, [r3, #0]
 8003232:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003236:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800323a:	6019      	str	r1, [r3, #0]
 800323c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003240:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8003244:	601a      	str	r2, [r3, #0]
	char buf[1024];
	int buflen;
//	char *para;
	int Status_Code = 0;
 8003246:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800324a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]


	At_Command((char *)"AT+HTTPINIT\r\n",(char *)"OK\r\n",10000);
 8003252:	f242 7210 	movw	r2, #10000	; 0x2710
 8003256:	493e      	ldr	r1, [pc, #248]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8003258:	483e      	ldr	r0, [pc, #248]	; (8003354 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x134>)
 800325a:	f7ff fe73 	bl	8002f44 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPDATA=%d,1000\r\n",strlen(request_url));
 800325e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003262:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f7fc ff72 	bl	8000150 <strlen>
 800326c:	4602      	mov	r2, r0
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	4939      	ldr	r1, [pc, #228]	; (8003358 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x138>)
 8003274:	4618      	mov	r0, r3
 8003276:	f007 f9b3 	bl	800a5e0 <siprintf>
	if(At_Command(buf,(char *)"DOWNLOAD",3000)!=1)
 800327a:	f107 0318 	add.w	r3, r7, #24
 800327e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003282:	4936      	ldr	r1, [pc, #216]	; (800335c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x13c>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fe5d 	bl	8002f44 <_Z10At_CommandPcS_m>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x92>
	{
		At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 800329a:	f242 7210 	movw	r2, #10000	; 0x2710
 800329e:	492c      	ldr	r1, [pc, #176]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032a0:	482f      	ldr	r0, [pc, #188]	; (8003360 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 80032a2:	f7ff fe4f 	bl	8002f44 <_Z10At_CommandPcS_m>
		return Status_Code;
 80032a6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80032aa:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	e049      	b.n	8003346 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x126>
	}
	At_Command(request_url,(char *)"OK\r\n",10000);
 80032b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80032b6:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80032ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80032be:	4924      	ldr	r1, [pc, #144]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f7ff fe3f 	bl	8002f44 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPPARA=\"CONTENT\",\"application/x-www-form-urlencoded\"\r\n",(char *)"OK\r\n",10000);
 80032c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80032ca:	4921      	ldr	r1, [pc, #132]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032cc:	4825      	ldr	r0, [pc, #148]	; (8003364 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x144>)
 80032ce:	f7ff fe39 	bl	8002f44 <_Z10At_CommandPcS_m>
	sprintf(buf,"AT+HTTPPARA=\"URL\",\"http://iires.tech/data/form\"\r\n");
 80032d2:	f107 0318 	add.w	r3, r7, #24
 80032d6:	4924      	ldr	r1, [pc, #144]	; (8003368 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x148>)
 80032d8:	4618      	mov	r0, r3
 80032da:	f007 f981 	bl	800a5e0 <siprintf>
	At_Command(buf,(char *)"OK\r\n",10000);
 80032de:	f107 0318 	add.w	r3, r7, #24
 80032e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80032e6:	491a      	ldr	r1, [pc, #104]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe2b 	bl	8002f44 <_Z10At_CommandPcS_m>
	memset(buf,0,1024);
 80032ee:	f107 0318 	add.w	r3, r7, #24
 80032f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f007 fa69 	bl	800a7d0 <memset>
	At_Command_response((char *)"AT+HTTPACTION=1\r\n",(char *)"+HTTPACTION",buf,&buflen,10000);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	f107 0218 	add.w	r2, r7, #24
 8003306:	f242 7110 	movw	r1, #10000	; 0x2710
 800330a:	9100      	str	r1, [sp, #0]
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x14c>)
 800330e:	4818      	ldr	r0, [pc, #96]	; (8003370 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x150>)
 8003310:	f7ff fd76 	bl	8002e00 <_Z19At_Command_responsePcS_S_Pim>
	AT_Getint_index(&Status_Code,buf,(char *)": ",1);
 8003314:	f107 0118 	add.w	r1, r7, #24
 8003318:	f107 0010 	add.w	r0, r7, #16
 800331c:	2301      	movs	r3, #1
 800331e:	4a15      	ldr	r2, [pc, #84]	; (8003374 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x154>)
 8003320:	f7ff fd2e 	bl	8002d80 <_Z15AT_Getint_indexPiPcS0_i>
	At_Command((char *)"AT+HTTPREAD=0,500\r\n",(char *)"OK\r\n",10000);
 8003324:	f242 7210 	movw	r2, #10000	; 0x2710
 8003328:	4909      	ldr	r1, [pc, #36]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 800332a:	4813      	ldr	r0, [pc, #76]	; (8003378 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x158>)
 800332c:	f7ff fe0a 	bl	8002f44 <_Z10At_CommandPcS_m>
	At_Command((char *)"AT+HTTPTERM\r\n",(char *)"OK\r\n",10000);
 8003330:	f242 7210 	movw	r2, #10000	; 0x2710
 8003334:	4906      	ldr	r1, [pc, #24]	; (8003350 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x130>)
 8003336:	480a      	ldr	r0, [pc, #40]	; (8003360 <_Z19AT_SIM7600_HTTP_GetPcS_Pt+0x140>)
 8003338:	f7ff fe04 	bl	8002f44 <_Z10At_CommandPcS_m>
	return Status_Code;
 800333c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8003340:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8003344:	681b      	ldr	r3, [r3, #0]
}
 8003346:	4618      	mov	r0, r3
 8003348:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	0800d3c0 	.word	0x0800d3c0
 8003354:	0800d478 	.word	0x0800d478
 8003358:	0800d488 	.word	0x0800d488
 800335c:	0800d4a0 	.word	0x0800d4a0
 8003360:	0800d4ac 	.word	0x0800d4ac
 8003364:	0800d4bc 	.word	0x0800d4bc
 8003368:	0800d4f8 	.word	0x0800d4f8
 800336c:	0800d52c 	.word	0x0800d52c
 8003370:	0800d538 	.word	0x0800d538
 8003374:	0800d54c 	.word	0x0800d54c
 8003378:	0800d550 	.word	0x0800d550

0800337c <_Z18extractFloatValuesPKcPfS1_>:
//+CGPSINFO: 16°04'58.6327"N 108°08'98.5204"E,170423,130954.0,34.9,0.0,0.0
//           16°04'35.0"N 108°08'59.8"E
int extractFloatValues(const char* sentence, float* value1, float* value2)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    const char* start = strchr(sentence, ':');  // Find the first occurrence of ':'
 8003388:	213a      	movs	r1, #58	; 0x3a
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f007 fa28 	bl	800a7e0 <strchr>
 8003390:	6178      	str	r0, [r7, #20]
    if (start == NULL) {
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <_Z18extractFloatValuesPKcPfS1_+0x22>
        // fprintf(stderr, "Error: Invalid sentence format\n");
        return -1;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	e033      	b.n	8003406 <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    start++;  // Move past the ':' character
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]

    char* end;
    *value1 = strtof(start, &end);  // Convert the first substring to float
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	4619      	mov	r1, r3
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f006 fa88 	bl	80098c0 <strtof>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	601a      	str	r2, [r3, #0]
    if (start == end) {
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d102      	bne.n	80033c4 <_Z18extractFloatValuesPKcPfS1_+0x48>
        // fprintf(stderr, "Error: Failed to extract float value 1\n");
        return -1;
 80033be:	f04f 33ff 	mov.w	r3, #4294967295
 80033c2:	e020      	b.n	8003406 <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }

    start = strchr(end + 1, ',');  // Find the next occurrence of ','
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	3301      	adds	r3, #1
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	4618      	mov	r0, r3
 80033cc:	f007 fa08 	bl	800a7e0 <strchr>
 80033d0:	6178      	str	r0, [r7, #20]
    if (start == NULL) {
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_Z18extractFloatValuesPKcPfS1_+0x62>
//        fprintf(stderr, "Error: Failed to extract float value 2\n");
        return -1;
 80033d8:	f04f 33ff 	mov.w	r3, #4294967295
 80033dc:	e013      	b.n	8003406 <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    start++;  // Move past the ',' character
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]

    *value2 = strtof(start, &end);  // Convert the second substring to float
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	4619      	mov	r1, r3
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f006 fa68 	bl	80098c0 <strtof>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
    if (start == end) {
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d102      	bne.n	8003404 <_Z18extractFloatValuesPKcPfS1_+0x88>
//        fprintf(stderr, "Error: Failed to extract float value 2\n");
        return -1;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e000      	b.n	8003406 <_Z18extractFloatValuesPKcPfS1_+0x8a>
    }
    return 1;
 8003404:	2301      	movs	r3, #1
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <_ZL18prv_parse_lat_longf>:
#define FLT(x)       ((float)(x))
static float prv_parse_lat_long(float ll) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
    float  deg, min;

    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fd fe8f 	bl	800113c <__aeabi_f2iz>
 800341e:	4603      	mov	r3, r0
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <_ZL18prv_parse_lat_longf+0x5c>)
 8003422:	fb82 1203 	smull	r1, r2, r2, r3
 8003426:	1152      	asrs	r2, r2, #5
 8003428:	17db      	asrs	r3, r3, #31
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fc55 	bl	8000cdc <__aeabi_i2f>
 8003432:	4603      	mov	r3, r0
 8003434:	60fb      	str	r3, [r7, #12]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8003436:	490e      	ldr	r1, [pc, #56]	; (8003470 <_ZL18prv_parse_lat_longf+0x60>)
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7fd fca3 	bl	8000d84 <__aeabi_fmul>
 800343e:	4603      	mov	r3, r0
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fb94 	bl	8000b70 <__aeabi_fsub>
 8003448:	4603      	mov	r3, r0
 800344a:	60bb      	str	r3, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 800344c:	4909      	ldr	r1, [pc, #36]	; (8003474 <_ZL18prv_parse_lat_longf+0x64>)
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	f7fd fd4c 	bl	8000eec <__aeabi_fdiv>
 8003454:	4603      	mov	r3, r0
 8003456:	4619      	mov	r1, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7fd fb8b 	bl	8000b74 <__addsf3>
 800345e:	4603      	mov	r3, r0
 8003460:	607b      	str	r3, [r7, #4]

    return ll;
 8003462:	687b      	ldr	r3, [r7, #4]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	51eb851f 	.word	0x51eb851f
 8003470:	42c80000 	.word	0x42c80000
 8003474:	42700000 	.word	0x42700000

08003478 <_Z18SIM_7600_read_GNSSPc>:
int  SIM_7600_read_GNSS(char *Location)
{
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b0ba      	sub	sp, #232	; 0xe8
 800347c:	af02      	add	r7, sp, #8
 800347e:	6078      	str	r0, [r7, #4]

	char rsp[200]={0};
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	22c4      	movs	r2, #196	; 0xc4
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f007 f99f 	bl	800a7d0 <memset>
	int len;
	if(At_Command_response((char*)"AT+CGPSINFO\r\n",(char*)"OK\r\n",rsp,&len, 2000)){
 8003492:	f107 0310 	add.w	r3, r7, #16
 8003496:	f107 0214 	add.w	r2, r7, #20
 800349a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800349e:	9100      	str	r1, [sp, #0]
 80034a0:	4929      	ldr	r1, [pc, #164]	; (8003548 <_Z18SIM_7600_read_GNSSPc+0xd0>)
 80034a2:	482a      	ldr	r0, [pc, #168]	; (800354c <_Z18SIM_7600_read_GNSSPc+0xd4>)
 80034a4:	f7ff fcac 	bl	8002e00 <_Z19At_Command_responsePcS_S_Pim>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d041      	beq.n	800353c <_Z18SIM_7600_read_GNSSPc+0xc4>
		char *start = strstr(rsp,": ");
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4924      	ldr	r1, [pc, #144]	; (8003550 <_Z18SIM_7600_read_GNSSPc+0xd8>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f007 f9ad 	bl	800a81e <strstr>
 80034c4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if(start)
 80034c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d035      	beq.n	800353c <_Z18SIM_7600_read_GNSSPc+0xc4>
		{
			float plat,plong=0.0f;
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
			if(extractFloatValues(rsp,&plat,&plong) == 1)
 80034d6:	f107 0208 	add.w	r2, r7, #8
 80034da:	f107 010c 	add.w	r1, r7, #12
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ff4a 	bl	800337c <_Z18extractFloatValuesPKcPfS1_>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d021      	beq.n	800353c <_Z18SIM_7600_read_GNSSPc+0xc4>
			{
				plat = prv_parse_lat_long(plat);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff88 	bl	8003410 <_ZL18prv_parse_lat_longf>
 8003500:	4603      	mov	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]
				plong = prv_parse_lat_long(plong);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff82 	bl	8003410 <_ZL18prv_parse_lat_longf>
 800350c:	4603      	mov	r3, r0
 800350e:	60bb      	str	r3, [r7, #8]
				sprintf(Location,"%f,%f",plat,plong);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fc ff88 	bl	8000428 <__aeabi_f2d>
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc ff82 	bl	8000428 <__aeabi_f2d>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	e9cd 2300 	strd	r2, r3, [sp]
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	4908      	ldr	r1, [pc, #32]	; (8003554 <_Z18SIM_7600_read_GNSSPc+0xdc>)
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f007 f854 	bl	800a5e0 <siprintf>
				return 1;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_Z18SIM_7600_read_GNSSPc+0xc6>
			}
		}
	 }
	return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	37e0      	adds	r7, #224	; 0xe0
 8003542:	46bd      	mov	sp, r7
 8003544:	bdb0      	pop	{r4, r5, r7, pc}
 8003546:	bf00      	nop
 8003548:	0800d3c0 	.word	0x0800d3c0
 800354c:	0800d564 	.word	0x0800d564
 8003550:	0800d54c 	.word	0x0800d54c
 8003554:	0800d574 	.word	0x0800d574

08003558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_MspInit+0x5c>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <HAL_MspInit+0x5c>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6193      	str	r3, [r2, #24]
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_MspInit+0x5c>)
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_MspInit+0x5c>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_MspInit+0x5c>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	61d3      	str	r3, [r2, #28]
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_MspInit+0x5c>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_MspInit+0x60>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_MspInit+0x60>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40010000 	.word	0x40010000

080035bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a28      	ldr	r2, [pc, #160]	; (8003678 <HAL_ADC_MspInit+0xbc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d149      	bne.n	8003670 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_ADC_MspInit+0xc0>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_ADC_MspInit+0xc0>)
 80035e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_ADC_MspInit+0xc0>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_ADC_MspInit+0xc0>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <HAL_ADC_MspInit+0xc0>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_ADC_MspInit+0xc0>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800360c:	2302      	movs	r3, #2
 800360e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003610:	2303      	movs	r3, #3
 8003612:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	4619      	mov	r1, r3
 800361a:	4819      	ldr	r0, [pc, #100]	; (8003680 <HAL_ADC_MspInit+0xc4>)
 800361c:	f001 fb14 	bl	8004c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_ADC_MspInit+0xcc>)
 8003624:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003628:	2200      	movs	r2, #0
 800362a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 800364a:	2200      	movs	r2, #0
 800364c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003654:	480b      	ldr	r0, [pc, #44]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003656:	f001 f855 	bl	8004704 <HAL_DMA_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003660:	f7fe fe80 	bl	8002364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 8003668:	621a      	str	r2, [r3, #32]
 800366a:	4a06      	ldr	r2, [pc, #24]	; (8003684 <HAL_ADC_MspInit+0xc8>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003670:	bf00      	nop
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40012400 	.word	0x40012400
 800367c:	40021000 	.word	0x40021000
 8003680:	40010800 	.word	0x40010800
 8003684:	2000023c 	.word	0x2000023c
 8003688:	40020008 	.word	0x40020008

0800368c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a16      	ldr	r2, [pc, #88]	; (8003700 <HAL_I2C_MspInit+0x74>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d124      	bne.n	80036f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036b2:	f043 0308 	orr.w	r3, r3, #8
 80036b6:	6193      	str	r3, [r2, #24]
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036ca:	2312      	movs	r3, #18
 80036cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	f107 0310 	add.w	r3, r7, #16
 80036d6:	4619      	mov	r1, r3
 80036d8:	480b      	ldr	r0, [pc, #44]	; (8003708 <HAL_I2C_MspInit+0x7c>)
 80036da:	f001 fab5 	bl	8004c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e8:	61d3      	str	r3, [r2, #28]
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_I2C_MspInit+0x78>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80036f6:	bf00      	nop
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40005800 	.word	0x40005800
 8003704:	40021000 	.word	0x40021000
 8003708:	40010c00 	.word	0x40010c00

0800370c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d114      	bne.n	8003748 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a25      	ldr	r2, [pc, #148]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	201c      	movs	r0, #28
 800373c:	f000 ff99 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003740:	201c      	movs	r0, #28
 8003742:	f000 ffb2 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003746:	e032      	b.n	80037ae <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <HAL_TIM_Base_MspInit+0xb0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d114      	bne.n	800377c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003752:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	201d      	movs	r0, #29
 8003770:	f000 ff7f 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003774:	201d      	movs	r0, #29
 8003776:	f000 ff98 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 800377a:	e018      	b.n	80037ae <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d113      	bne.n	80037ae <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	61d3      	str	r3, [r2, #28]
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_TIM_Base_MspInit+0xac>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	201e      	movs	r0, #30
 80037a4:	f000 ff65 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037a8:	201e      	movs	r0, #30
 80037aa:	f000 ff7e 	bl	80046aa <HAL_NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800

080037c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a4e      	ldr	r2, [pc, #312]	; (8003918 <HAL_UART_MspInit+0x154>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d160      	bne.n	80038a6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037e4:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_UART_MspInit+0x158>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a4c      	ldr	r2, [pc, #304]	; (800391c <HAL_UART_MspInit+0x158>)
 80037ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ee:	6193      	str	r3, [r2, #24]
 80037f0:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_UART_MspInit+0x158>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_UART_MspInit+0x158>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a46      	ldr	r2, [pc, #280]	; (800391c <HAL_UART_MspInit+0x158>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b44      	ldr	r3, [pc, #272]	; (800391c <HAL_UART_MspInit+0x158>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381a:	2302      	movs	r3, #2
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381e:	2303      	movs	r3, #3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	4619      	mov	r1, r3
 8003828:	483d      	ldr	r0, [pc, #244]	; (8003920 <HAL_UART_MspInit+0x15c>)
 800382a:	f001 fa0d 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800382e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	4619      	mov	r1, r3
 8003842:	4837      	ldr	r0, [pc, #220]	; (8003920 <HAL_UART_MspInit+0x15c>)
 8003844:	f001 fa00 	bl	8004c48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_UART_MspInit+0x160>)
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_UART_MspInit+0x164>)
 800384c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003850:	2200      	movs	r2, #0
 8003852:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800385a:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_UART_MspInit+0x160>)
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003860:	4b30      	ldr	r3, [pc, #192]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003868:	2200      	movs	r2, #0
 800386a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_UART_MspInit+0x160>)
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003872:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003874:	2200      	movs	r2, #0
 8003876:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003878:	482a      	ldr	r0, [pc, #168]	; (8003924 <HAL_UART_MspInit+0x160>)
 800387a:	f000 ff43 	bl	8004704 <HAL_DMA_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003884:	f7fe fd6e 	bl	8002364 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_UART_MspInit+0x160>)
 800388c:	63da      	str	r2, [r3, #60]	; 0x3c
 800388e:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_UART_MspInit+0x160>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003894:	2200      	movs	r2, #0
 8003896:	2100      	movs	r1, #0
 8003898:	2025      	movs	r0, #37	; 0x25
 800389a:	f000 feea 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800389e:	2025      	movs	r0, #37	; 0x25
 80038a0:	f000 ff03 	bl	80046aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038a4:	e034      	b.n	8003910 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a20      	ldr	r2, [pc, #128]	; (800392c <HAL_UART_MspInit+0x168>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d12f      	bne.n	8003910 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_UART_MspInit+0x158>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_UART_MspInit+0x158>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ba:	61d3      	str	r3, [r2, #28]
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_UART_MspInit+0x158>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_UART_MspInit+0x158>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_UART_MspInit+0x158>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	6193      	str	r3, [r2, #24]
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_UART_MspInit+0x158>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038e0:	2304      	movs	r3, #4
 80038e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	f107 0318 	add.w	r3, r7, #24
 80038f0:	4619      	mov	r1, r3
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <HAL_UART_MspInit+0x15c>)
 80038f4:	f001 f9a8 	bl	8004c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038f8:	2308      	movs	r3, #8
 80038fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003904:	f107 0318 	add.w	r3, r7, #24
 8003908:	4619      	mov	r1, r3
 800390a:	4805      	ldr	r0, [pc, #20]	; (8003920 <HAL_UART_MspInit+0x15c>)
 800390c:	f001 f99c 	bl	8004c48 <HAL_GPIO_Init>
}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40013800 	.word	0x40013800
 800391c:	40021000 	.word	0x40021000
 8003920:	40010800 	.word	0x40010800
 8003924:	2000043c 	.word	0x2000043c
 8003928:	40020058 	.word	0x40020058
 800392c:	40004400 	.word	0x40004400

08003930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <NMI_Handler+0x4>

08003936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393a:	e7fe      	b.n	800393a <HardFault_Handler+0x4>

0800393c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <MemManage_Handler+0x4>

08003942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003946:	e7fe      	b.n	8003946 <BusFault_Handler+0x4>

08003948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800394c:	e7fe      	b.n	800394c <UsageFault_Handler+0x4>

0800394e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003976:	f000 f95b 	bl	8003c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}

0800397e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003982:	2001      	movs	r0, #1
 8003984:	f001 fb2c 	bl	8004fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}

0800398c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <DMA1_Channel1_IRQHandler+0x10>)
 8003992:	f001 f825 	bl	80049e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000023c 	.word	0x2000023c

080039a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <DMA1_Channel5_IRQHandler+0x10>)
 80039a6:	f001 f81b 	bl	80049e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000043c 	.word	0x2000043c

080039b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <TIM2_IRQHandler+0x10>)
 80039ba:	f003 fa7f 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200002d4 	.word	0x200002d4

080039c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <TIM3_IRQHandler+0x10>)
 80039ce:	f003 fa75 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000031c 	.word	0x2000031c

080039dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <TIM4_IRQHandler+0x10>)
 80039e2:	f003 fa6b 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000364 	.word	0x20000364

080039f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <USART1_IRQHandler+0x10>)
 80039f6:	f003 ff35 	bl	8007864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200003ac 	.word	0x200003ac

08003a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return 1;
 8003a08:	2301      	movs	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <_kill>:

int _kill(int pid, int sig)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a1c:	f006 ffb4 	bl	800a988 <__errno>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2216      	movs	r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
  return -1;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_exit>:

void _exit (int status)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffe7 	bl	8003a12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a44:	e7fe      	b.n	8003a44 <_exit+0x12>

08003a46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e00a      	b.n	8003a6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a58:	f3af 8000 	nop.w
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	60ba      	str	r2, [r7, #8]
 8003a64:	b2ca      	uxtb	r2, r1
 8003a66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	dbf0      	blt.n	8003a58 <_read+0x12>
  }

  return len;
 8003a76:	687b      	ldr	r3, [r7, #4]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <_isatty>:

int _isatty(int file)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <_sbrk+0x5c>)
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <_sbrk+0x60>)
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <_sbrk+0x64>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <_sbrk+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d207      	bcs.n	8003b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b10:	f006 ff3a 	bl	800a988 <__errno>
 8003b14:	4603      	mov	r3, r0
 8003b16:	220c      	movs	r2, #12
 8003b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e009      	b.n	8003b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <_sbrk+0x64>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a05      	ldr	r2, [pc, #20]	; (8003b44 <_sbrk+0x64>)
 8003b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20005000 	.word	0x20005000
 8003b40:	00000400 	.word	0x00000400
 8003b44:	200007e4 	.word	0x200007e4
 8003b48:	20000940 	.word	0x20000940

08003b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b5a:	490d      	ldr	r1, [pc, #52]	; (8003b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b60:	e002      	b.n	8003b68 <LoopCopyDataInit>

08003b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b66:	3304      	adds	r3, #4

08003b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b6c:	d3f9      	bcc.n	8003b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b70:	4c0a      	ldr	r4, [pc, #40]	; (8003b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b74:	e001      	b.n	8003b7a <LoopFillZerobss>

08003b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b78:	3204      	adds	r2, #4

08003b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b7c:	d3fb      	bcc.n	8003b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b7e:	f7ff ffe5 	bl	8003b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b82:	f006 ff07 	bl	800a994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b86:	f7fe f8e3 	bl	8001d50 <main>
  bx lr
 8003b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8003b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003b94:	0800da2c 	.word	0x0800da2c
  ldr r2, =_sbss
 8003b98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003b9c:	2000093c 	.word	0x2000093c

08003ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ba0:	e7fe      	b.n	8003ba0 <ADC1_2_IRQHandler>
	...

08003ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_Init+0x28>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_Init+0x28>)
 8003bae:	f043 0310 	orr.w	r3, r3, #16
 8003bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f000 fd51 	bl	800465c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bba:	200f      	movs	r0, #15
 8003bbc:	f000 f808 	bl	8003bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc0:	f7ff fcca 	bl	8003558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x54>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_InitTick+0x58>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fd7b 	bl	80046ea <HAL_SYSTICK_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00e      	b.n	8003c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0f      	cmp	r3, #15
 8003c02:	d80a      	bhi.n	8003c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c04:	2200      	movs	r2, #0
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f000 fd31 	bl	8004672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c10:	4a06      	ldr	r2, [pc, #24]	; (8003c2c <HAL_InitTick+0x5c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000004 	.word	0x20000004
 8003c28:	2000000c 	.word	0x2000000c
 8003c2c:	20000008 	.word	0x20000008

08003c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_IncTick+0x1c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_IncTick+0x20>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a03      	ldr	r2, [pc, #12]	; (8003c50 <HAL_IncTick+0x20>)
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	200007e8 	.word	0x200007e8

08003c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b02      	ldr	r3, [pc, #8]	; (8003c64 <HAL_GetTick+0x10>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	200007e8 	.word	0x200007e8

08003c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d005      	beq.n	8003c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_Delay+0x44>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c8e:	bf00      	nop
 8003c90:	f7ff ffe0 	bl	8003c54 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d8f7      	bhi.n	8003c90 <HAL_Delay+0x28>
  {
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_SuspendTick+0x18>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a03      	ldr	r2, [pc, #12]	; (8003cc8 <HAL_SuspendTick+0x18>)
 8003cba:	f023 0302 	bic.w	r3, r3, #2
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e010 	.word	0xe000e010

08003ccc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0be      	b.n	8003e6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fc56 	bl	80035bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 faf5 	bl	8004300 <ADC_ConversionStop_Disable>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 8099 	bne.w	8003e5a <HAL_ADC_Init+0x18e>
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 8095 	bne.w	8003e5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7b1b      	ldrb	r3, [r3, #12]
 8003d52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d003      	beq.n	8003d6e <HAL_ADC_Init+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_ADC_Init+0xa8>
 8003d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d72:	e000      	b.n	8003d76 <HAL_ADC_Init+0xaa>
 8003d74:	2300      	movs	r3, #0
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7d1b      	ldrb	r3, [r3, #20]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d119      	bne.n	8003db8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7b1b      	ldrb	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	035a      	lsls	r2, r3, #13
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e00b      	b.n	8003db8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_ADC_Init+0x1a8>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de8:	d003      	beq.n	8003df2 <HAL_ADC_Init+0x126>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d104      	bne.n	8003dfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	051b      	lsls	r3, r3, #20
 8003dfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <HAL_ADC_Init+0x1ac>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d10b      	bne.n	8003e38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e36:	e018      	b.n	8003e6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f023 0312 	bic.w	r3, r3, #18
 8003e40:	f043 0210 	orr.w	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e58:	e007      	b.n	8003e6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f043 0210 	orr.w	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	ffe1f7fd 	.word	0xffe1f7fd
 8003e78:	ff1f0efe 	.word	0xff1f0efe

08003e7c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a64      	ldr	r2, [pc, #400]	; (8004024 <HAL_ADC_Start_DMA+0x1a8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_ADC_Start_DMA+0x24>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a63      	ldr	r2, [pc, #396]	; (8004028 <HAL_ADC_Start_DMA+0x1ac>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d106      	bne.n	8003eae <HAL_ADC_Start_DMA+0x32>
 8003ea0:	4b60      	ldr	r3, [pc, #384]	; (8004024 <HAL_ADC_Start_DMA+0x1a8>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 80b3 	bne.w	8004014 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_Start_DMA+0x40>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0ae      	b.n	800401a <HAL_ADC_Start_DMA+0x19e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f9c1 	bl	800424c <ADC_Enable>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 809a 	bne.w	800400a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4e      	ldr	r2, [pc, #312]	; (8004028 <HAL_ADC_Start_DMA+0x1ac>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d105      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x84>
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_ADC_Start_DMA+0x1a8>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d115      	bne.n	8003f2c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d026      	beq.n	8003f68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f2a:	e01d      	b.n	8003f68 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a39      	ldr	r2, [pc, #228]	; (8004024 <HAL_ADC_Start_DMA+0x1a8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_ADC_Start_DMA+0xd0>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <HAL_ADC_Start_DMA+0x1ac>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10d      	bne.n	8003f68 <HAL_ADC_Start_DMA+0xec>
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <HAL_ADC_Start_DMA+0x1a8>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	f023 0206 	bic.w	r2, r3, #6
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f80:	e002      	b.n	8003f88 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <HAL_ADC_Start_DMA+0x1b0>)
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <HAL_ADC_Start_DMA+0x1b4>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_ADC_Start_DMA+0x1b8>)
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a18      	ldr	r0, [r3, #32]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	334c      	adds	r3, #76	; 0x4c
 8003fcc:	4619      	mov	r1, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f000 fbf1 	bl	80047b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003fe0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003fe4:	d108      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ff4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ff6:	e00f      	b.n	8004018 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004006:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004008:	e006      	b.n	8004018 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004012:	e001      	b.n	8004018 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40012400 	.word	0x40012400
 8004028:	40012800 	.word	0x40012800
 800402c:	08004383 	.word	0x08004383
 8004030:	080043ff 	.word	0x080043ff
 8004034:	0800441b 	.word	0x0800441b

08004038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_ADC_ConfigChannel+0x20>
 8004078:	2302      	movs	r3, #2
 800407a:	e0dc      	b.n	8004236 <HAL_ADC_ConfigChannel+0x1da>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b06      	cmp	r3, #6
 800408a:	d81c      	bhi.n	80040c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	3b05      	subs	r3, #5
 800409e:	221f      	movs	r2, #31
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	4019      	ands	r1, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	3b05      	subs	r3, #5
 80040b8:	fa00 f203 	lsl.w	r2, r0, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34
 80040c4:	e03c      	b.n	8004140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	d81c      	bhi.n	8004108 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3b23      	subs	r3, #35	; 0x23
 80040e0:	221f      	movs	r2, #31
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	4019      	ands	r1, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	3b23      	subs	r3, #35	; 0x23
 80040fa:	fa00 f203 	lsl.w	r2, r0, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	e01b      	b.n	8004140 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	3b41      	subs	r3, #65	; 0x41
 800411a:	221f      	movs	r2, #31
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	4019      	ands	r1, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	3b41      	subs	r3, #65	; 0x41
 8004134:	fa00 f203 	lsl.w	r2, r0, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b09      	cmp	r3, #9
 8004146:	d91c      	bls.n	8004182 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68d9      	ldr	r1, [r3, #12]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	3b1e      	subs	r3, #30
 800415a:	2207      	movs	r2, #7
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	4019      	ands	r1, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6898      	ldr	r0, [r3, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	3b1e      	subs	r3, #30
 8004174:	fa00 f203 	lsl.w	r2, r0, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e019      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6919      	ldr	r1, [r3, #16]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	2207      	movs	r2, #7
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	4019      	ands	r1, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6898      	ldr	r0, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	fa00 f203 	lsl.w	r2, r0, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d003      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80041c2:	2b11      	cmp	r3, #17
 80041c4:	d132      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_ADC_ConfigChannel+0x1e4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d125      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d126      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80041ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d11a      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_ADC_ConfigChannel+0x1e8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_ADC_ConfigChannel+0x1ec>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	0c9a      	lsrs	r2, r3, #18
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800420c:	e002      	b.n	8004214 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3b01      	subs	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f9      	bne.n	800420e <HAL_ADC_ConfigChannel+0x1b2>
 800421a:	e007      	b.n	800422c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012400 	.word	0x40012400
 8004244:	20000004 	.word	0x20000004
 8004248:	431bde83 	.word	0x431bde83

0800424c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d040      	beq.n	80042ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <ADC_Enable+0xac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <ADC_Enable+0xb0>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	0c9b      	lsrs	r3, r3, #18
 8004286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004288:	e002      	b.n	8004290 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	3b01      	subs	r3, #1
 800428e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f9      	bne.n	800428a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004296:	f7ff fcdd 	bl	8003c54 <HAL_GetTick>
 800429a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800429c:	e01f      	b.n	80042de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800429e:	f7ff fcd9 	bl	8003c54 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d918      	bls.n	80042de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d011      	beq.n	80042de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e007      	b.n	80042ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d1d8      	bne.n	800429e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000004 	.word	0x20000004
 80042fc:	431bde83 	.word	0x431bde83

08004300 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d12e      	bne.n	8004378 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800432a:	f7ff fc93 	bl	8003c54 <HAL_GetTick>
 800432e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004330:	e01b      	b.n	800436a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004332:	f7ff fc8f 	bl	8003c54 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d914      	bls.n	800436a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d10d      	bne.n	800436a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f043 0210 	orr.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	f043 0201 	orr.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e007      	b.n	800437a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d0dc      	beq.n	8004332 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d127      	bne.n	80043ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80043b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80043b6:	d115      	bne.n	80043e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d111      	bne.n	80043e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fe f8bf 	bl	8002568 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80043ea:	e004      	b.n	80043f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff fe13 	bl	8004038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fe02 	bl	800404a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4906      	ldr	r1, [pc, #24]	; (80044e8 <__NVIC_EnableIRQ+0x34>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db12      	blt.n	8004524 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	490a      	ldr	r1, [pc, #40]	; (8004530 <__NVIC_DisableIRQ+0x44>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	3320      	adds	r3, #32
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004518:	f3bf 8f4f 	dsb	sy
}
 800451c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800451e:	f3bf 8f6f 	isb	sy
}
 8004522:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e100 	.word	0xe000e100

08004534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db0a      	blt.n	800455e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <__NVIC_SetPriority+0x4c>)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	440b      	add	r3, r1
 8004558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800455c:	e00a      	b.n	8004574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4908      	ldr	r1, [pc, #32]	; (8004584 <__NVIC_SetPriority+0x50>)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3b04      	subs	r3, #4
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	440b      	add	r3, r1
 8004572:	761a      	strb	r2, [r3, #24]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	e000e100 	.word	0xe000e100
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf28      	it	cs
 80045a6:	2304      	movcs	r3, #4
 80045a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3304      	adds	r3, #4
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d902      	bls.n	80045b8 <NVIC_EncodePriority+0x30>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3b03      	subs	r3, #3
 80045b6:	e000      	b.n	80045ba <NVIC_EncodePriority+0x32>
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	401a      	ands	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d0:	f04f 31ff 	mov.w	r1, #4294967295
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43d9      	mvns	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	4313      	orrs	r3, r2
         );
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80045f0:	f3bf 8f4f 	dsb	sy
}
 80045f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <__NVIC_SystemReset+0x24>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80045fe:	4904      	ldr	r1, [pc, #16]	; (8004610 <__NVIC_SystemReset+0x24>)
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <__NVIC_SystemReset+0x28>)
 8004602:	4313      	orrs	r3, r2
 8004604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004606:	f3bf 8f4f 	dsb	sy
}
 800460a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800460c:	bf00      	nop
 800460e:	e7fd      	b.n	800460c <__NVIC_SystemReset+0x20>
 8004610:	e000ed00 	.word	0xe000ed00
 8004614:	05fa0004 	.word	0x05fa0004

08004618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004628:	d301      	bcc.n	800462e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <SysTick_Config+0x40>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004636:	210f      	movs	r1, #15
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	f7ff ff7a 	bl	8004534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <SysTick_Config+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <SysTick_Config+0x40>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000e010 	.word	0xe000e010

0800465c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fef3 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004684:	f7ff ff08 	bl	8004498 <__NVIC_GetPriorityGrouping>
 8004688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff7a 	bl	8004588 <NVIC_EncodePriority>
 8004694:	4602      	mov	r2, r0
 8004696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff49 	bl	8004534 <__NVIC_SetPriority>
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fefb 	bl	80044b4 <__NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff09 	bl	80044ec <__NVIC_DisableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80046e6:	f7ff ff81 	bl	80045ec <__NVIC_SystemReset>

080046ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff ff90 	bl	8004618 <SysTick_Config>
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e043      	b.n	80047a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b22      	ldr	r3, [pc, #136]	; (80047ac <HAL_DMA_Init+0xa8>)
 8004722:	4413      	add	r3, r2
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_DMA_Init+0xac>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	009a      	lsls	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_DMA_Init+0xb0>)
 8004736:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800474e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004752:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800475c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	bffdfff8 	.word	0xbffdfff8
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	40020000 	.word	0x40020000

080047b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_DMA_Start_IT+0x20>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e04b      	b.n	8004870 <HAL_DMA_Start_IT+0xb8>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d13a      	bne.n	8004862 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f9eb 	bl	8004bec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 020e 	orr.w	r2, r2, #14
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e00f      	b.n	8004850 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 020a 	orr.w	r2, r2, #10
 800484e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e005      	b.n	800486e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d008      	beq.n	80048a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2204      	movs	r2, #4
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e020      	b.n	80048e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 020e 	bic.w	r2, r2, #14
 80048b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0201 	bic.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f202 	lsl.w	r2, r1, r2
 80048d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d005      	beq.n	8004914 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2204      	movs	r2, #4
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	e051      	b.n	80049b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020e 	bic.w	r2, r2, #14
 8004922:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <HAL_DMA_Abort_IT+0xd4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d029      	beq.n	8004992 <HAL_DMA_Abort_IT+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a21      	ldr	r2, [pc, #132]	; (80049c8 <HAL_DMA_Abort_IT+0xd8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_DMA_Abort_IT+0x9e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <HAL_DMA_Abort_IT+0xdc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01a      	beq.n	8004988 <HAL_DMA_Abort_IT+0x98>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <HAL_DMA_Abort_IT+0xe0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d012      	beq.n	8004982 <HAL_DMA_Abort_IT+0x92>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <HAL_DMA_Abort_IT+0xe4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00a      	beq.n	800497c <HAL_DMA_Abort_IT+0x8c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_DMA_Abort_IT+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d102      	bne.n	8004976 <HAL_DMA_Abort_IT+0x86>
 8004970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004974:	e00e      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 8004976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800497a:	e00b      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 800497c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004980:	e008      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 8004982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004986:	e005      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 8004988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498c:	e002      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 800498e:	2310      	movs	r3, #16
 8004990:	e000      	b.n	8004994 <HAL_DMA_Abort_IT+0xa4>
 8004992:	2301      	movs	r3, #1
 8004994:	4a11      	ldr	r2, [pc, #68]	; (80049dc <HAL_DMA_Abort_IT+0xec>)
 8004996:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
    } 
  }
  return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40020008 	.word	0x40020008
 80049c8:	4002001c 	.word	0x4002001c
 80049cc:	40020030 	.word	0x40020030
 80049d0:	40020044 	.word	0x40020044
 80049d4:	40020058 	.word	0x40020058
 80049d8:	4002006c 	.word	0x4002006c
 80049dc:	40020000 	.word	0x40020000

080049e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2204      	movs	r2, #4
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d04f      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0xc8>
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d04a      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d107      	bne.n	8004a30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d029      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xae>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <HAL_DMA_IRQHandler+0x1f4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_DMA_IRQHandler+0xaa>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a63      	ldr	r2, [pc, #396]	; (8004bd8 <HAL_DMA_IRQHandler+0x1f8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0xa4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a62      	ldr	r2, [pc, #392]	; (8004bdc <HAL_DMA_IRQHandler+0x1fc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d012      	beq.n	8004a7e <HAL_DMA_IRQHandler+0x9e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a60      	ldr	r2, [pc, #384]	; (8004be0 <HAL_DMA_IRQHandler+0x200>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00a      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x98>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_DMA_IRQHandler+0x204>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d102      	bne.n	8004a72 <HAL_DMA_IRQHandler+0x92>
 8004a6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a70:	e00e      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a76:	e00b      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a7c:	e008      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a82:	e005      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a88:	e002      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	e000      	b.n	8004a90 <HAL_DMA_IRQHandler+0xb0>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	4a55      	ldr	r2, [pc, #340]	; (8004be8 <HAL_DMA_IRQHandler+0x208>)
 8004a92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8094 	beq.w	8004bc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004aa6:	e08e      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2202      	movs	r2, #2
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d056      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x186>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d051      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 020a 	bic.w	r2, r2, #10
 8004ade:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d029      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x166>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a37      	ldr	r2, [pc, #220]	; (8004bd4 <HAL_DMA_IRQHandler+0x1f4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x162>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a35      	ldr	r2, [pc, #212]	; (8004bd8 <HAL_DMA_IRQHandler+0x1f8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x15c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a34      	ldr	r2, [pc, #208]	; (8004bdc <HAL_DMA_IRQHandler+0x1fc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d012      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x156>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <HAL_DMA_IRQHandler+0x200>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00a      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x150>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <HAL_DMA_IRQHandler+0x204>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x14a>
 8004b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b28:	e00e      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b2e:	e00b      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b34:	e008      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b3a:	e005      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b40:	e002      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b42:	2320      	movs	r3, #32
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_IRQHandler+0x168>
 8004b46:	2302      	movs	r3, #2
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <HAL_DMA_IRQHandler+0x208>)
 8004b4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d034      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b64:	e02f      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d028      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x1e8>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d023      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 020e 	bic.w	r2, r2, #14
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
    }
  }
  return;
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
}
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40020008 	.word	0x40020008
 8004bd4:	4002001c 	.word	0x4002001c
 8004bd8:	40020030 	.word	0x40020030
 8004bdc:	40020044 	.word	0x40020044
 8004be0:	40020058 	.word	0x40020058
 8004be4:	4002006c 	.word	0x4002006c
 8004be8:	40020000 	.word	0x40020000

08004bec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d108      	bne.n	8004c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c2a:	e007      	b.n	8004c3c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b08b      	sub	sp, #44	; 0x2c
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c5a:	e169      	b.n	8004f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	f040 8158 	bne.w	8004f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a9a      	ldr	r2, [pc, #616]	; (8004ee8 <HAL_GPIO_Init+0x2a0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d05e      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
 8004c84:	4a98      	ldr	r2, [pc, #608]	; (8004ee8 <HAL_GPIO_Init+0x2a0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d875      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004c8a:	4a98      	ldr	r2, [pc, #608]	; (8004eec <HAL_GPIO_Init+0x2a4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d058      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
 8004c90:	4a96      	ldr	r2, [pc, #600]	; (8004eec <HAL_GPIO_Init+0x2a4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d86f      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004c96:	4a96      	ldr	r2, [pc, #600]	; (8004ef0 <HAL_GPIO_Init+0x2a8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d052      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
 8004c9c:	4a94      	ldr	r2, [pc, #592]	; (8004ef0 <HAL_GPIO_Init+0x2a8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d869      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004ca2:	4a94      	ldr	r2, [pc, #592]	; (8004ef4 <HAL_GPIO_Init+0x2ac>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d04c      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
 8004ca8:	4a92      	ldr	r2, [pc, #584]	; (8004ef4 <HAL_GPIO_Init+0x2ac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d863      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004cae:	4a92      	ldr	r2, [pc, #584]	; (8004ef8 <HAL_GPIO_Init+0x2b0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d046      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
 8004cb4:	4a90      	ldr	r2, [pc, #576]	; (8004ef8 <HAL_GPIO_Init+0x2b0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d85d      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004cba:	2b12      	cmp	r3, #18
 8004cbc:	d82a      	bhi.n	8004d14 <HAL_GPIO_Init+0xcc>
 8004cbe:	2b12      	cmp	r3, #18
 8004cc0:	d859      	bhi.n	8004d76 <HAL_GPIO_Init+0x12e>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <HAL_GPIO_Init+0x80>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004d43 	.word	0x08004d43
 8004ccc:	08004d1d 	.word	0x08004d1d
 8004cd0:	08004d2f 	.word	0x08004d2f
 8004cd4:	08004d71 	.word	0x08004d71
 8004cd8:	08004d77 	.word	0x08004d77
 8004cdc:	08004d77 	.word	0x08004d77
 8004ce0:	08004d77 	.word	0x08004d77
 8004ce4:	08004d77 	.word	0x08004d77
 8004ce8:	08004d77 	.word	0x08004d77
 8004cec:	08004d77 	.word	0x08004d77
 8004cf0:	08004d77 	.word	0x08004d77
 8004cf4:	08004d77 	.word	0x08004d77
 8004cf8:	08004d77 	.word	0x08004d77
 8004cfc:	08004d77 	.word	0x08004d77
 8004d00:	08004d77 	.word	0x08004d77
 8004d04:	08004d77 	.word	0x08004d77
 8004d08:	08004d77 	.word	0x08004d77
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	4a79      	ldr	r2, [pc, #484]	; (8004efc <HAL_GPIO_Init+0x2b4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d1a:	e02c      	b.n	8004d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	623b      	str	r3, [r7, #32]
          break;
 8004d22:	e029      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	623b      	str	r3, [r7, #32]
          break;
 8004d2c:	e024      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	3308      	adds	r3, #8
 8004d34:	623b      	str	r3, [r7, #32]
          break;
 8004d36:	e01f      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	623b      	str	r3, [r7, #32]
          break;
 8004d40:	e01a      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	623b      	str	r3, [r7, #32]
          break;
 8004d4e:	e013      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d58:	2308      	movs	r3, #8
 8004d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	611a      	str	r2, [r3, #16]
          break;
 8004d62:	e009      	b.n	8004d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d64:	2308      	movs	r3, #8
 8004d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	615a      	str	r2, [r3, #20]
          break;
 8004d6e:	e003      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
          break;
 8004d74:	e000      	b.n	8004d78 <HAL_GPIO_Init+0x130>
          break;
 8004d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2bff      	cmp	r3, #255	; 0xff
 8004d7c:	d801      	bhi.n	8004d82 <HAL_GPIO_Init+0x13a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	e001      	b.n	8004d86 <HAL_GPIO_Init+0x13e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2bff      	cmp	r3, #255	; 0xff
 8004d8c:	d802      	bhi.n	8004d94 <HAL_GPIO_Init+0x14c>
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	e002      	b.n	8004d9a <HAL_GPIO_Init+0x152>
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3b08      	subs	r3, #8
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	210f      	movs	r1, #15
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	401a      	ands	r2, r3
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	431a      	orrs	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80b1 	beq.w	8004f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004dc8:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <HAL_GPIO_Init+0x2b8>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	4a4c      	ldr	r2, [pc, #304]	; (8004f00 <HAL_GPIO_Init+0x2b8>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6193      	str	r3, [r2, #24]
 8004dd4:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_GPIO_Init+0x2b8>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004de0:	4a48      	ldr	r2, [pc, #288]	; (8004f04 <HAL_GPIO_Init+0x2bc>)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	3302      	adds	r3, #2
 8004de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <HAL_GPIO_Init+0x2c0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_GPIO_Init+0x1ec>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3f      	ldr	r2, [pc, #252]	; (8004f0c <HAL_GPIO_Init+0x2c4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00d      	beq.n	8004e30 <HAL_GPIO_Init+0x1e8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a3e      	ldr	r2, [pc, #248]	; (8004f10 <HAL_GPIO_Init+0x2c8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d007      	beq.n	8004e2c <HAL_GPIO_Init+0x1e4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3d      	ldr	r2, [pc, #244]	; (8004f14 <HAL_GPIO_Init+0x2cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <HAL_GPIO_Init+0x1e0>
 8004e24:	2303      	movs	r3, #3
 8004e26:	e006      	b.n	8004e36 <HAL_GPIO_Init+0x1ee>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	e004      	b.n	8004e36 <HAL_GPIO_Init+0x1ee>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e002      	b.n	8004e36 <HAL_GPIO_Init+0x1ee>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_GPIO_Init+0x1ee>
 8004e34:	2300      	movs	r3, #0
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e46:	492f      	ldr	r1, [pc, #188]	; (8004f04 <HAL_GPIO_Init+0x2bc>)
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e60:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	492c      	ldr	r1, [pc, #176]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
 8004e6c:	e006      	b.n	8004e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	4928      	ldr	r1, [pc, #160]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e88:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	4922      	ldr	r1, [pc, #136]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60cb      	str	r3, [r1, #12]
 8004e94:	e006      	b.n	8004ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	491e      	ldr	r1, [pc, #120]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	4918      	ldr	r1, [pc, #96]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
 8004ebc:	e006      	b.n	8004ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	4914      	ldr	r1, [pc, #80]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d021      	beq.n	8004f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	490e      	ldr	r1, [pc, #56]	; (8004f18 <HAL_GPIO_Init+0x2d0>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
 8004ee4:	e021      	b.n	8004f2a <HAL_GPIO_Init+0x2e2>
 8004ee6:	bf00      	nop
 8004ee8:	10320000 	.word	0x10320000
 8004eec:	10310000 	.word	0x10310000
 8004ef0:	10220000 	.word	0x10220000
 8004ef4:	10210000 	.word	0x10210000
 8004ef8:	10120000 	.word	0x10120000
 8004efc:	10110000 	.word	0x10110000
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40010800 	.word	0x40010800
 8004f0c:	40010c00 	.word	0x40010c00
 8004f10:	40011000 	.word	0x40011000
 8004f14:	40011400 	.word	0x40011400
 8004f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	; (8004f4c <HAL_GPIO_Init+0x304>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	4909      	ldr	r1, [pc, #36]	; (8004f4c <HAL_GPIO_Init+0x304>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f47f ae8e 	bne.w	8004c5c <HAL_GPIO_Init+0x14>
  }
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	372c      	adds	r7, #44	; 0x2c
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40010400 	.word	0x40010400

08004f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
 8004f6c:	e001      	b.n	8004f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	807b      	strh	r3, [r7, #2]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f8e:	787b      	ldrb	r3, [r7, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004f9a:	e003      	b.n	8004fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	041a      	lsls	r2, r3, #16
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	611a      	str	r2, [r3, #16]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	041a      	lsls	r2, r3, #16
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	43d9      	mvns	r1, r3
 8004fcc:	887b      	ldrh	r3, [r7, #2]
 8004fce:	400b      	ands	r3, r1
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd f9b6 	bl	8002370 <HAL_GPIO_EXTI_Callback>
  }
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e12b      	b.n	800527a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fe fb28 	bl	800368c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005074:	f001 fd56 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a81      	ldr	r2, [pc, #516]	; (8005284 <HAL_I2C_Init+0x274>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d807      	bhi.n	8005094 <HAL_I2C_Init+0x84>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a80      	ldr	r2, [pc, #512]	; (8005288 <HAL_I2C_Init+0x278>)
 8005088:	4293      	cmp	r3, r2
 800508a:	bf94      	ite	ls
 800508c:	2301      	movls	r3, #1
 800508e:	2300      	movhi	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e006      	b.n	80050a2 <HAL_I2C_Init+0x92>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a7d      	ldr	r2, [pc, #500]	; (800528c <HAL_I2C_Init+0x27c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf94      	ite	ls
 800509c:	2301      	movls	r3, #1
 800509e:	2300      	movhi	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0e7      	b.n	800527a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a78      	ldr	r2, [pc, #480]	; (8005290 <HAL_I2C_Init+0x280>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a6a      	ldr	r2, [pc, #424]	; (8005284 <HAL_I2C_Init+0x274>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d802      	bhi.n	80050e4 <HAL_I2C_Init+0xd4>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3301      	adds	r3, #1
 80050e2:	e009      	b.n	80050f8 <HAL_I2C_Init+0xe8>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a69      	ldr	r2, [pc, #420]	; (8005294 <HAL_I2C_Init+0x284>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	3301      	adds	r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800510a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	495c      	ldr	r1, [pc, #368]	; (8005284 <HAL_I2C_Init+0x274>)
 8005114:	428b      	cmp	r3, r1
 8005116:	d819      	bhi.n	800514c <HAL_I2C_Init+0x13c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1e59      	subs	r1, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fbb1 f3f3 	udiv	r3, r1, r3
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	f640 73fc 	movw	r3, #4092	; 0xffc
 800512c:	400b      	ands	r3, r1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_I2C_Init+0x138>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1e59      	subs	r1, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	e051      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 8005148:	2304      	movs	r3, #4
 800514a:	e04f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d111      	bne.n	8005178 <HAL_I2C_Init+0x168>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e58      	subs	r0, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	440b      	add	r3, r1
 8005162:	fbb0 f3f3 	udiv	r3, r0, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e012      	b.n	800519e <HAL_I2C_Init+0x18e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1e58      	subs	r0, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	0099      	lsls	r1, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	fbb0 f3f3 	udiv	r3, r0, r3
 800518e:	3301      	adds	r3, #1
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Init+0x196>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e022      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10e      	bne.n	80051cc <HAL_I2C_Init+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1e58      	subs	r0, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c0:	3301      	adds	r3, #1
 80051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	e00f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1e58      	subs	r0, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	0099      	lsls	r1, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	6809      	ldr	r1, [r1, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800521a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6911      	ldr	r1, [r2, #16]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	000186a0 	.word	0x000186a0
 8005288:	001e847f 	.word	0x001e847f
 800528c:	003d08ff 	.word	0x003d08ff
 8005290:	431bde83 	.word	0x431bde83
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	817b      	strh	r3, [r7, #10]
 80052aa:	460b      	mov	r3, r1
 80052ac:	813b      	strh	r3, [r7, #8]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052b2:	f7fe fccf 	bl	8003c54 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	f040 80d9 	bne.w	8005478 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2319      	movs	r3, #25
 80052cc:	2201      	movs	r2, #1
 80052ce:	496d      	ldr	r1, [pc, #436]	; (8005484 <HAL_I2C_Mem_Write+0x1ec>)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fdef 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
 80052de:	e0cc      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Mem_Write+0x56>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0c5      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d007      	beq.n	8005314 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2221      	movs	r2, #33	; 0x21
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2240      	movs	r2, #64	; 0x40
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_I2C_Mem_Write+0x1f0>)
 8005354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005356:	88f8      	ldrh	r0, [r7, #6]
 8005358:	893a      	ldrh	r2, [r7, #8]
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4603      	mov	r3, r0
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fc26 	bl	8005bb8 <I2C_RequestMemoryWrite>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d052      	beq.n	8005418 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e081      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 feb4 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e06b      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	781a      	ldrb	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_I2C_Mem_Write+0x180>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d017      	beq.n	8005418 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1aa      	bne.n	8005376 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fea7 	bl	8006178 <I2C_WaitOnBTFFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2b04      	cmp	r3, #4
 8005436:	d107      	bne.n	8005448 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005446:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e016      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	00100002 	.word	0x00100002
 8005488:	ffff0000 	.word	0xffff0000

0800548c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4603      	mov	r3, r0
 800549c:	817b      	strh	r3, [r7, #10]
 800549e:	460b      	mov	r3, r1
 80054a0:	813b      	strh	r3, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054aa:	f7fe fbd3 	bl	8003c54 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	f040 8244 	bne.w	8005946 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2319      	movs	r3, #25
 80054c4:	2201      	movs	r2, #1
 80054c6:	4982      	ldr	r1, [pc, #520]	; (80056d0 <HAL_I2C_Mem_Read+0x244>)
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fcf3 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e237      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x5a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e230      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d007      	beq.n	800550c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2222      	movs	r2, #34	; 0x22
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a62      	ldr	r2, [pc, #392]	; (80056d4 <HAL_I2C_Mem_Read+0x248>)
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800554e:	88f8      	ldrh	r0, [r7, #6]
 8005550:	893a      	ldrh	r2, [r7, #8]
 8005552:	8979      	ldrh	r1, [r7, #10]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4603      	mov	r3, r0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fbc0 	bl	8005ce4 <I2C_RequestMemoryRead>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e1ec      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	2b00      	cmp	r3, #0
 8005574:	d113      	bne.n	800559e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e1c0      	b.n	8005920 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d11e      	bne.n	80055e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055b6:	b672      	cpsid	i
}
 80055b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80055e0:	b662      	cpsie	i
}
 80055e2:	e035      	b.n	8005650 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d11e      	bne.n	800562a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055fc:	b672      	cpsid	i
}
 80055fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005626:	b662      	cpsie	i
}
 8005628:	e012      	b.n	8005650 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005638:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005650:	e166      	b.n	8005920 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	2b03      	cmp	r3, #3
 8005658:	f200 811f 	bhi.w	800589a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	2b01      	cmp	r3, #1
 8005662:	d123      	bne.n	80056ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fdcd 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e167      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056aa:	e139      	b.n	8005920 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d152      	bne.n	800575a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	2200      	movs	r2, #0
 80056bc:	4906      	ldr	r1, [pc, #24]	; (80056d8 <HAL_I2C_Mem_Read+0x24c>)
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fbf8 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e13c      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
 80056ce:	bf00      	nop
 80056d0:	00100002 	.word	0x00100002
 80056d4:	ffff0000 	.word	0xffff0000
 80056d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80056dc:	b672      	cpsid	i
}
 80056de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005722:	b662      	cpsie	i
}
 8005724:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005758:	e0e2      	b.n	8005920 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2200      	movs	r2, #0
 8005762:	497b      	ldr	r1, [pc, #492]	; (8005950 <HAL_I2C_Mem_Read+0x4c4>)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fba5 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0e9      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005782:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005784:	b672      	cpsid	i
}
 8005786:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057ba:	4b66      	ldr	r3, [pc, #408]	; (8005954 <HAL_I2C_Mem_Read+0x4c8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	08db      	lsrs	r3, r3, #3
 80057c0:	4a65      	ldr	r2, [pc, #404]	; (8005958 <HAL_I2C_Mem_Read+0x4cc>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a1a      	lsrs	r2, r3, #8
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00da      	lsls	r2, r3, #3
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d118      	bne.n	8005812 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005802:	b662      	cpsie	i
}
 8005804:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e09a      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d1d9      	bne.n	80057d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005862:	b662      	cpsie	i
}
 8005864:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005898:	e042      	b.n	8005920 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fcb2 	bl	8006208 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e04c      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d118      	bne.n	8005920 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f ae94 	bne.w	8005652 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e000      	b.n	8005948 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005946:	2302      	movs	r3, #2
  }
}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	; 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	00010004 	.word	0x00010004
 8005954:	20000004 	.word	0x20000004
 8005958:	14f8b589 	.word	0x14f8b589

0800595c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	460b      	mov	r3, r1
 800596a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800596c:	f7fe f972 	bl	8003c54 <HAL_GetTick>
 8005970:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	f040 8111 	bne.w	8005ba6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	2319      	movs	r3, #25
 800598a:	2201      	movs	r2, #1
 800598c:	4988      	ldr	r1, [pc, #544]	; (8005bb0 <HAL_I2C_IsDeviceReady+0x254>)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fa90 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
 800599c:	e104      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_I2C_IsDeviceReady+0x50>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e0fd      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d007      	beq.n	80059d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2224      	movs	r2, #36	; 0x24
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a70      	ldr	r2, [pc, #448]	; (8005bb4 <HAL_I2C_IsDeviceReady+0x258>)
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa4e 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2c:	d103      	bne.n	8005a36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e0b6      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a3a:	897b      	ldrh	r3, [r7, #10]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7fe f903 	bl	8003c54 <HAL_GetTick>
 8005a4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a7e:	e025      	b.n	8005acc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fe f8e8 	bl	8003c54 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <HAL_I2C_IsDeviceReady+0x13a>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	22a0      	movs	r2, #160	; 0xa0
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2ba0      	cmp	r3, #160	; 0xa0
 8005ad6:	d005      	beq.n	8005ae4 <HAL_I2C_IsDeviceReady+0x188>
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_I2C_IsDeviceReady+0x188>
 8005ade:	7dbb      	ldrb	r3, [r7, #22]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0cd      	beq.n	8005a80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d129      	bne.n	8005b4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2319      	movs	r3, #25
 8005b26:	2201      	movs	r2, #1
 8005b28:	4921      	ldr	r1, [pc, #132]	; (8005bb0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f9c2 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e036      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e02c      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2319      	movs	r3, #25
 8005b6e:	2201      	movs	r2, #1
 8005b70:	490f      	ldr	r1, [pc, #60]	; (8005bb0 <HAL_I2C_IsDeviceReady+0x254>)
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f99e 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e012      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	f4ff af32 	bcc.w	80059f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	00100002 	.word	0x00100002
 8005bb4:	ffff0000 	.word	0xffff0000

08005bb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	817b      	strh	r3, [r7, #10]
 8005bca:	460b      	mov	r3, r1
 8005bcc:	813b      	strh	r3, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f960 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c08:	d103      	bne.n	8005c12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e05f      	b.n	8005cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c16:	897b      	ldrh	r3, [r7, #10]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	6a3a      	ldr	r2, [r7, #32]
 8005c2a:	492d      	ldr	r1, [pc, #180]	; (8005ce0 <I2C_RequestMemoryWrite+0x128>)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f9bb 	bl	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e04c      	b.n	8005cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c54:	6a39      	ldr	r1, [r7, #32]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fa46 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d107      	bne.n	8005c7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e02b      	b.n	8005cd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	e021      	b.n	8005cd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca0:	6a39      	ldr	r1, [r7, #32]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fa20 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d107      	bne.n	8005cc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e005      	b.n	8005cd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cca:	893b      	ldrh	r3, [r7, #8]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	00010002 	.word	0x00010002

08005ce4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	813b      	strh	r3, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f8c2 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d44:	d103      	bne.n	8005d4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e0aa      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	4952      	ldr	r1, [pc, #328]	; (8005eb0 <I2C_RequestMemoryRead+0x1cc>)
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f91d 	bl	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e097      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	6a39      	ldr	r1, [r7, #32]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f9a8 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d107      	bne.n	8005db6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e076      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d105      	bne.n	8005dcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc0:	893b      	ldrh	r3, [r7, #8]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]
 8005dca:	e021      	b.n	8005e10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dcc:	893b      	ldrh	r3, [r7, #8]
 8005dce:	0a1b      	lsrs	r3, r3, #8
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ddc:	6a39      	ldr	r1, [r7, #32]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f982 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d107      	bne.n	8005e02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e050      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e06:	893b      	ldrh	r3, [r7, #8]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	6a39      	ldr	r1, [r7, #32]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f967 	bl	80060e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d107      	bne.n	8005e38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e035      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f82b 	bl	8005eb4 <I2C_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e72:	d103      	bne.n	8005e7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e013      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e80:	897b      	ldrh	r3, [r7, #10]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	6a3a      	ldr	r2, [r7, #32]
 8005e94:	4906      	ldr	r1, [pc, #24]	; (8005eb0 <I2C_RequestMemoryRead+0x1cc>)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f886 	bl	8005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	00010002 	.word	0x00010002

08005eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec4:	e048      	b.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d044      	beq.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7fd fec1 	bl	8003c54 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d302      	bcc.n	8005ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d139      	bne.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d10d      	bne.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	43da      	mvns	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	e00c      	b.n	8005f24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	43da      	mvns	r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4013      	ands	r3, r2
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d116      	bne.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f043 0220 	orr.w	r2, r3, #32
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e023      	b.n	8005fa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	0c1b      	lsrs	r3, r3, #16
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10d      	bne.n	8005f7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	43da      	mvns	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	e00c      	b.n	8005f98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	43da      	mvns	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d093      	beq.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fb6:	e071      	b.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d123      	bne.n	8006010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0204 	orr.w	r2, r3, #4
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e067      	b.n	80060e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d041      	beq.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006018:	f7fd fe1c 	bl	8003c54 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d302      	bcc.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d136      	bne.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10c      	bne.n	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	43da      	mvns	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4013      	ands	r3, r2
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e00b      	b.n	800606a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	43da      	mvns	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e021      	b.n	80060e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10c      	bne.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	43da      	mvns	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e00b      	b.n	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	43da      	mvns	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af6d 	bne.w	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060f4:	e034      	b.n	8006160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f8e3 	bl	80062c2 <I2C_IsAcknowledgeFailed>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e034      	b.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d028      	beq.n	8006160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fd fda1 	bl	8003c54 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11d      	bne.n	8006160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d016      	beq.n	8006160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	f043 0220 	orr.w	r2, r3, #32
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e007      	b.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d1c3      	bne.n	80060f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006184:	e034      	b.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f89b 	bl	80062c2 <I2C_IsAcknowledgeFailed>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e034      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d028      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fd fd59 	bl	8003c54 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11d      	bne.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d016      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e007      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d1c3      	bne.n	8006186 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006214:	e049      	b.n	80062aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d119      	bne.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0210 	mvn.w	r2, #16
 800622c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e030      	b.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fd fcfc 	bl	8003c54 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11d      	bne.n	80062aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d016      	beq.n	80062aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e007      	b.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d1ae      	bne.n	8006216 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d8:	d11b      	bne.n	8006312 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
	...

08006320 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800632c:	4b09      	ldr	r3, [pc, #36]	; (8006354 <HAL_PWR_EnterSLEEPMode+0x34>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	4a08      	ldr	r2, [pc, #32]	; (8006354 <HAL_PWR_EnterSLEEPMode+0x34>)
 8006332:	f023 0304 	bic.w	r3, r3, #4
 8006336:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800633e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8006340:	e002      	b.n	8006348 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8006342:	bf40      	sev
    __WFE();
 8006344:	bf20      	wfe
    __WFE();
 8006346:	bf20      	wfe
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	e000ed00 	.word	0xe000ed00

08006358 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <HAL_PWR_EnableSleepOnExit+0x18>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <HAL_PWR_EnableSleepOnExit+0x18>)
 8006362:	f043 0302 	orr.w	r3, r3, #2
 8006366:	6113      	str	r3, [r2, #16]
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <HAL_PWR_DisableSleepOnExit+0x18>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	4a03      	ldr	r2, [pc, #12]	; (800638c <HAL_PWR_DisableSleepOnExit+0x18>)
 800637e:	f023 0302 	bic.w	r3, r3, #2
 8006382:	6113      	str	r3, [r2, #16]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	e000ed00 	.word	0xe000ed00

08006390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e272      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8087 	beq.w	80064be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b0:	4b92      	ldr	r3, [pc, #584]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 030c 	and.w	r3, r3, #12
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d00c      	beq.n	80063d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063bc:	4b8f      	ldr	r3, [pc, #572]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d112      	bne.n	80063ee <HAL_RCC_OscConfig+0x5e>
 80063c8:	4b8c      	ldr	r3, [pc, #560]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d10b      	bne.n	80063ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d6:	4b89      	ldr	r3, [pc, #548]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d06c      	beq.n	80064bc <HAL_RCC_OscConfig+0x12c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d168      	bne.n	80064bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e24c      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f6:	d106      	bne.n	8006406 <HAL_RCC_OscConfig+0x76>
 80063f8:	4b80      	ldr	r3, [pc, #512]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a7f      	ldr	r2, [pc, #508]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e02e      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_RCC_OscConfig+0x98>
 800640e:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7a      	ldr	r2, [pc, #488]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b78      	ldr	r3, [pc, #480]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a77      	ldr	r2, [pc, #476]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e01d      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006430:	d10c      	bne.n	800644c <HAL_RCC_OscConfig+0xbc>
 8006432:	4b72      	ldr	r3, [pc, #456]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a71      	ldr	r2, [pc, #452]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6e      	ldr	r2, [pc, #440]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e00b      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 800644c:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6a      	ldr	r2, [pc, #424]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4b68      	ldr	r3, [pc, #416]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a67      	ldr	r2, [pc, #412]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646c:	f7fd fbf2 	bl	8003c54 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006474:	f7fd fbee 	bl	8003c54 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e200      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b5d      	ldr	r3, [pc, #372]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0xe4>
 8006492:	e014      	b.n	80064be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd fbde 	bl	8003c54 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd fbda 	bl	8003c54 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1ec      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ae:	4b53      	ldr	r3, [pc, #332]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x10c>
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ca:	4b4c      	ldr	r3, [pc, #304]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064d6:	4b49      	ldr	r3, [pc, #292]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d11c      	bne.n	800651c <HAL_RCC_OscConfig+0x18c>
 80064e2:	4b46      	ldr	r3, [pc, #280]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	4b43      	ldr	r3, [pc, #268]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCC_OscConfig+0x176>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d001      	beq.n	8006506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e1c0      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006506:	4b3d      	ldr	r3, [pc, #244]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4939      	ldr	r1, [pc, #228]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651a:	e03a      	b.n	8006592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006524:	4b36      	ldr	r3, [pc, #216]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652a:	f7fd fb93 	bl	8003c54 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006532:	f7fd fb8f 	bl	8003c54 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1a1      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4927      	ldr	r1, [pc, #156]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
 8006564:	e015      	b.n	8006592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656c:	f7fd fb72 	bl	8003c54 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006574:	f7fd fb6e 	bl	8003c54 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e180      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03a      	beq.n	8006614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d019      	beq.n	80065da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <HAL_RCC_OscConfig+0x274>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ac:	f7fd fb52 	bl	8003c54 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fd fb4e 	bl	8003c54 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e160      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065d2:	2001      	movs	r0, #1
 80065d4:	f000 face 	bl	8006b74 <RCC_Delay>
 80065d8:	e01c      	b.n	8006614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCC_OscConfig+0x274>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e0:	f7fd fb38 	bl	8003c54 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e6:	e00f      	b.n	8006608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e8:	f7fd fb34 	bl	8003c54 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d908      	bls.n	8006608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e146      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	42420000 	.word	0x42420000
 8006604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	4b92      	ldr	r3, [pc, #584]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e9      	bne.n	80065e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80a6 	beq.w	800676e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10d      	bne.n	800664e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	4b88      	ldr	r3, [pc, #544]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4a87      	ldr	r2, [pc, #540]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	61d3      	str	r3, [r2, #28]
 800663e:	4b85      	ldr	r3, [pc, #532]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	4b82      	ldr	r3, [pc, #520]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d118      	bne.n	800668c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665a:	4b7f      	ldr	r3, [pc, #508]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7e      	ldr	r2, [pc, #504]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006666:	f7fd faf5 	bl	8003c54 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666e:	f7fd faf1 	bl	8003c54 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b64      	cmp	r3, #100	; 0x64
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e103      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	4b75      	ldr	r3, [pc, #468]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x312>
 8006694:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	4a6e      	ldr	r2, [pc, #440]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6213      	str	r3, [r2, #32]
 80066a0:	e02d      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x334>
 80066aa:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	4a69      	ldr	r2, [pc, #420]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	6213      	str	r3, [r2, #32]
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4a66      	ldr	r2, [pc, #408]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	6213      	str	r3, [r2, #32]
 80066c2:	e01c      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCC_OscConfig+0x356>
 80066cc:	4b61      	ldr	r3, [pc, #388]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	4a60      	ldr	r2, [pc, #384]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6213      	str	r3, [r2, #32]
 80066d8:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	4a5d      	ldr	r2, [pc, #372]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	6213      	str	r3, [r2, #32]
 80066e4:	e00b      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066e6:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	4a5a      	ldr	r2, [pc, #360]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6213      	str	r3, [r2, #32]
 80066f2:	4b58      	ldr	r3, [pc, #352]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006706:	f7fd faa5 	bl	8003c54 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fd faa1 	bl	8003c54 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e0b1      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ee      	beq.n	800670e <HAL_RCC_OscConfig+0x37e>
 8006730:	e014      	b.n	800675c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fd fa8f 	bl	8003c54 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fd fa8b 	bl	8003c54 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e09b      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	4b40      	ldr	r3, [pc, #256]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ee      	bne.n	800673a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006762:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	4a3b      	ldr	r2, [pc, #236]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8087 	beq.w	8006886 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006778:	4b36      	ldr	r3, [pc, #216]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 030c 	and.w	r3, r3, #12
 8006780:	2b08      	cmp	r3, #8
 8006782:	d061      	beq.n	8006848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d146      	bne.n	800681a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678c:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006792:	f7fd fa5f 	bl	8003c54 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679a:	f7fd fa5b 	bl	8003c54 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e06d      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f0      	bne.n	800679a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d108      	bne.n	80067d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4921      	ldr	r1, [pc, #132]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a19      	ldr	r1, [r3, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	430b      	orrs	r3, r1
 80067e6:	491b      	ldr	r1, [pc, #108]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f2:	f7fd fa2f 	bl	8003c54 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fa:	f7fd fa2b 	bl	8003c54 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e03d      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x46a>
 8006818:	e035      	b.n	8006886 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fd fa18 	bl	8003c54 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006828:	f7fd fa14 	bl	8003c54 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e026      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x498>
 8006846:	e01e      	b.n	8006886 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d107      	bne.n	8006860 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e019      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
 8006854:	40021000 	.word	0x40021000
 8006858:	40007000 	.word	0x40007000
 800685c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCC_OscConfig+0x500>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	429a      	cmp	r2, r3
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d001      	beq.n	8006886 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000

08006894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0d0      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 0207 	bic.w	r2, r3, #7
 80068be:	4965      	ldr	r1, [pc, #404]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0b8      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006908:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	494d      	ldr	r1, [pc, #308]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	4313      	orrs	r3, r2
 8006924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d040      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d115      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e073      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06b      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f023 0203 	bic.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4936      	ldr	r1, [pc, #216]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006984:	f7fd f966 	bl	8003c54 <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698c:	f7fd f962 	bl	8003c54 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	; 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e053      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f003 020c 	and.w	r2, r3, #12
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1eb      	bne.n	800698c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d210      	bcs.n	80069e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 0207 	bic.w	r2, r3, #7
 80069ca:	4922      	ldr	r1, [pc, #136]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e032      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4916      	ldr	r1, [pc, #88]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	490e      	ldr	r1, [pc, #56]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a22:	f000 f821 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	490a      	ldr	r1, [pc, #40]	; (8006a5c <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_RCC_ClockConfig+0x1cc>)
 8006a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_ClockConfig+0x1d0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd f8c4 	bl	8003bd0 <HAL_InitTick>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	0800d57c 	.word	0x0800d57c
 8006a60:	20000004 	.word	0x20000004
 8006a64:	20000008 	.word	0x20000008

08006a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a82:	4b1e      	ldr	r3, [pc, #120]	; (8006afc <HAL_RCC_GetSysClockFreq+0x94>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d002      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x30>
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d003      	beq.n	8006a9e <HAL_RCC_GetSysClockFreq+0x36>
 8006a96:	e027      	b.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a98:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a9a:	613b      	str	r3, [r7, #16]
      break;
 8006a9c:	e027      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	0c9b      	lsrs	r3, r3, #18
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006aa8:	5cd3      	ldrb	r3, [r2, r3]
 8006aaa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d010      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ab6:	4b11      	ldr	r3, [pc, #68]	; (8006afc <HAL_RCC_GetSysClockFreq+0x94>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	0c5b      	lsrs	r3, r3, #17
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006ac2:	5cd3      	ldrb	r3, [r2, r3]
 8006ac4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aca:	fb03 f202 	mul.w	r2, r3, r2
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e004      	b.n	8006ae2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0c      	ldr	r2, [pc, #48]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006adc:	fb02 f303 	mul.w	r3, r2, r3
 8006ae0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	613b      	str	r3, [r7, #16]
      break;
 8006ae6:	e002      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aea:	613b      	str	r3, [r7, #16]
      break;
 8006aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aee:	693b      	ldr	r3, [r7, #16]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	007a1200 	.word	0x007a1200
 8006b04:	0800d594 	.word	0x0800d594
 8006b08:	0800d5a4 	.word	0x0800d5a4
 8006b0c:	003d0900 	.word	0x003d0900

08006b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b14:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b16:	681b      	ldr	r3, [r3, #0]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr
 8006b20:	20000004 	.word	0x20000004

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b28:	f7ff fff2 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021000 	.word	0x40021000
 8006b48:	0800d58c 	.word	0x0800d58c

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b50:	f7ff ffde 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	0adb      	lsrs	r3, r3, #11
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	0800d58c 	.word	0x0800d58c

08006b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <RCC_Delay+0x34>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <RCC_Delay+0x38>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	0a5b      	lsrs	r3, r3, #9
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b90:	bf00      	nop
  }
  while (Delay --);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1e5a      	subs	r2, r3, #1
 8006b96:	60fa      	str	r2, [r7, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f9      	bne.n	8006b90 <RCC_Delay+0x1c>
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr
 8006ba8:	20000004 	.word	0x20000004
 8006bac:	10624dd3 	.word	0x10624dd3

08006bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d07d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd0:	4b4f      	ldr	r3, [pc, #316]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10d      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bdc:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	4a4b      	ldr	r2, [pc, #300]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be6:	61d3      	str	r3, [r2, #28]
 8006be8:	4b49      	ldr	r3, [pc, #292]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf8:	4b46      	ldr	r3, [pc, #280]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d118      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c04:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a42      	ldr	r2, [pc, #264]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c10:	f7fd f820 	bl	8003c54 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c16:	e008      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c18:	f7fd f81c 	bl	8003c54 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	; 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e06d      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2a:	4b3a      	ldr	r3, [pc, #232]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02e      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d027      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c54:	4b2e      	ldr	r3, [pc, #184]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c5e:	4b2e      	ldr	r3, [pc, #184]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c64:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d014      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7a:	f7fc ffeb 	bl	8003c54 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c80:	e00a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c82:	f7fc ffe7 	bl	8003c54 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e036      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c98:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ee      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4917      	ldr	r1, [pc, #92]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d105      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	490b      	ldr	r1, [pc, #44]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	4904      	ldr	r1, [pc, #16]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40007000 	.word	0x40007000
 8006d18:	42420440 	.word	0x42420440

08006d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e041      	b.n	8006db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fc fce2 	bl	800370c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f000 faa2 	bl	80072a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d001      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e03a      	b.n	8006e4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_TIM_Base_Start_IT+0x98>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x58>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d009      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x58>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x58>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <HAL_TIM_Base_Start_IT+0xa0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d111      	bne.n	8006e38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d010      	beq.n	8006e48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	e007      	b.n	8006e48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800

08006e60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a1a      	ldr	r2, [r3, #32]
 8006e7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10f      	bne.n	8006ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6a1a      	ldr	r2, [r3, #32]
 8006e8e:	f240 4344 	movw	r3, #1092	; 0x444
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0201 	bic.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0202 	mvn.w	r2, #2
 8006ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9b4 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9a7 	bl	800725a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9b6 	bl	800727e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0204 	mvn.w	r2, #4
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f98a 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f97d 	bl	800725a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f98c 	bl	800727e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0208 	mvn.w	r2, #8
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f960 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f953 	bl	800725a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f962 	bl	800727e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f936 	bl	800726c <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f929 	bl	800725a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f938 	bl	800727e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0201 	mvn.w	r2, #1
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fb fb42 	bl	80026c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa7b 	bl	8007562 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8fc 	bl	8007290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d10e      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d107      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0220 	mvn.w	r2, #32
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa46 	bl	8007550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_ConfigClockSource+0x1c>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e0b4      	b.n	8007252 <HAL_TIM_ConfigClockSource+0x186>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800710e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007120:	d03e      	beq.n	80071a0 <HAL_TIM_ConfigClockSource+0xd4>
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007126:	f200 8087 	bhi.w	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	f000 8086 	beq.w	800723e <HAL_TIM_ConfigClockSource+0x172>
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d87f      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b70      	cmp	r3, #112	; 0x70
 800713a:	d01a      	beq.n	8007172 <HAL_TIM_ConfigClockSource+0xa6>
 800713c:	2b70      	cmp	r3, #112	; 0x70
 800713e:	d87b      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d050      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x11a>
 8007144:	2b60      	cmp	r3, #96	; 0x60
 8007146:	d877      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b50      	cmp	r3, #80	; 0x50
 800714a:	d03c      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0xfa>
 800714c:	2b50      	cmp	r3, #80	; 0x50
 800714e:	d873      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d058      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0x13a>
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d86f      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d064      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	2b30      	cmp	r3, #48	; 0x30
 800715e:	d86b      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d060      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0x15a>
 8007164:	2b20      	cmp	r3, #32
 8007166:	d867      	bhi.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d05c      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0x15a>
 800716c:	2b10      	cmp	r3, #16
 800716e:	d05a      	beq.n	8007226 <HAL_TIM_ConfigClockSource+0x15a>
 8007170:	e062      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007182:	f000 f968 	bl	8007456 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	609a      	str	r2, [r3, #8]
      break;
 800719e:	e04f      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b0:	f000 f951 	bl	8007456 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071c2:	609a      	str	r2, [r3, #8]
      break;
 80071c4:	e03c      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d2:	461a      	mov	r2, r3
 80071d4:	f000 f8c8 	bl	8007368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2150      	movs	r1, #80	; 0x50
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f91f 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 80071e4:	e02c      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071f2:	461a      	mov	r2, r3
 80071f4:	f000 f8e6 	bl	80073c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2160      	movs	r1, #96	; 0x60
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f90f 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8007204:	e01c      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007212:	461a      	mov	r2, r3
 8007214:	f000 f8a8 	bl	8007368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2140      	movs	r1, #64	; 0x40
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f8ff 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8007224:	e00c      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f000 f8f6 	bl	8007422 <TIM_ITRx_SetConfig>
      break;
 8007236:	e003      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e000      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800723e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
	...

080072a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a29      	ldr	r2, [pc, #164]	; (800735c <TIM_Base_SetConfig+0xb8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00b      	beq.n	80072d4 <TIM_Base_SetConfig+0x30>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c2:	d007      	beq.n	80072d4 <TIM_Base_SetConfig+0x30>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a26      	ldr	r2, [pc, #152]	; (8007360 <TIM_Base_SetConfig+0xbc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0x30>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a25      	ldr	r2, [pc, #148]	; (8007364 <TIM_Base_SetConfig+0xc0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d108      	bne.n	80072e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a1c      	ldr	r2, [pc, #112]	; (800735c <TIM_Base_SetConfig+0xb8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00b      	beq.n	8007306 <TIM_Base_SetConfig+0x62>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d007      	beq.n	8007306 <TIM_Base_SetConfig+0x62>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a19      	ldr	r2, [pc, #100]	; (8007360 <TIM_Base_SetConfig+0xbc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_Base_SetConfig+0x62>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a18      	ldr	r2, [pc, #96]	; (8007364 <TIM_Base_SetConfig+0xc0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d108      	bne.n	8007318 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a07      	ldr	r2, [pc, #28]	; (800735c <TIM_Base_SetConfig+0xb8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d103      	bne.n	800734c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	615a      	str	r2, [r3, #20]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800

08007368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f023 0201 	bic.w	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 030a 	bic.w	r3, r3, #10
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f023 0210 	bic.w	r2, r3, #16
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	031b      	lsls	r3, r3, #12
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007400:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007422:	b480      	push	{r7}
 8007424:	b085      	sub	sp, #20
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	f043 0307 	orr.w	r3, r3, #7
 8007444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr

08007456 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007470:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	021a      	lsls	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	431a      	orrs	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4313      	orrs	r3, r2
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	609a      	str	r2, [r3, #8]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e046      	b.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a16      	ldr	r2, [pc, #88]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f8:	d009      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a12      	ldr	r2, [pc, #72]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a10      	ldr	r2, [pc, #64]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10c      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800

08007550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr

08007574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e042      	b.n	800760c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7fc f912 	bl	80037c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2224      	movs	r2, #36	; 0x24
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ffdd 	bl	8008578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695a      	ldr	r2, [r3, #20]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4613      	mov	r3, r2
 8007622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b20      	cmp	r3, #32
 8007632:	d16d      	bne.n	8007710 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_UART_Transmit+0x2c>
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e066      	b.n	8007712 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2221      	movs	r2, #33	; 0x21
 800764e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007652:	f7fc faff 	bl	8003c54 <HAL_GetTick>
 8007656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766c:	d108      	bne.n	8007680 <HAL_UART_Transmit+0x6c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	e003      	b.n	8007688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007688:	e02a      	b.n	80076e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fca4 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e036      	b.n	8007712 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	3302      	adds	r3, #2
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	e007      	b.n	80076d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1cf      	bne.n	800768a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2200      	movs	r2, #0
 80076f2:	2140      	movs	r1, #64	; 0x40
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fc74 	bl	8007fe2 <UART_WaitOnFlagUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e006      	b.n	8007712 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2220      	movs	r2, #32
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	e000      	b.n	8007712 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007710:	2302      	movs	r3, #2
  }
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	4613      	mov	r3, r2
 8007726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b20      	cmp	r3, #32
 8007732:	d112      	bne.n	800775a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_UART_Receive_DMA+0x26>
 800773a:	88fb      	ldrh	r3, [r7, #6]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e00b      	b.n	800775c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	461a      	mov	r2, r3
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fcb5 	bl	80080c0 <UART_Start_Receive_DMA>
 8007756:	4603      	mov	r3, r0
 8007758:	e000      	b.n	800775c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b090      	sub	sp, #64	; 0x40
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800776c:	2300      	movs	r3, #0
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	bf14      	ite	ne
 800777e:	2301      	movne	r3, #1
 8007780:	2300      	moveq	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b21      	cmp	r3, #33	; 0x21
 8007790:	d128      	bne.n	80077e4 <HAL_UART_DMAStop+0x80>
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d025      	beq.n	80077e4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3314      	adds	r3, #20
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	623b      	str	r3, [r7, #32]
   return(result);
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3314      	adds	r3, #20
 80077b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b8:	633a      	str	r2, [r7, #48]	; 0x30
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e5      	bne.n	8007798 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd f84d 	bl	8004878 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fd08 	bl	80081f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b22      	cmp	r3, #34	; 0x22
 8007804:	d128      	bne.n	8007858 <HAL_UART_DMAStop+0xf4>
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d025      	beq.n	8007858 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60fb      	str	r3, [r7, #12]
   return(result);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782c:	61fa      	str	r2, [r7, #28]
 800782e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	69b9      	ldr	r1, [r7, #24]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	617b      	str	r3, [r7, #20]
   return(result);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784c:	4618      	mov	r0, r3
 800784e:	f7fd f813 	bl	8004878 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fcf5 	bl	8008242 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3740      	adds	r7, #64	; 0x40
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b0ba      	sub	sp, #232	; 0xe8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800788a:	2300      	movs	r3, #0
 800788c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007890:	2300      	movs	r3, #0
 8007892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80078a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10f      	bne.n	80078ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ae:	f003 0320 	and.w	r3, r3, #32
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <HAL_UART_IRQHandler+0x66>
 80078b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fd9a 	bl	80083fc <UART_Receive_IT>
      return;
 80078c8:	e25b      	b.n	8007d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 80de 	beq.w	8007a90 <HAL_UART_IRQHandler+0x22c>
 80078d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 80d1 	beq.w	8007a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <HAL_UART_IRQHandler+0xae>
 80078fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	f043 0201 	orr.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <HAL_UART_IRQHandler+0xd2>
 800791e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	f043 0202 	orr.w	r2, r3, #2
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_UART_IRQHandler+0xf6>
 8007942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d011      	beq.n	800798a <HAL_UART_IRQHandler+0x126>
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d105      	bne.n	800797e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	f043 0208 	orr.w	r2, r3, #8
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 81f2 	beq.w	8007d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_UART_IRQHandler+0x14e>
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fd25 	bl	80083fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <HAL_UART_IRQHandler+0x17a>
 80079d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d04f      	beq.n	8007a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fc2f 	bl	8008242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d041      	beq.n	8007a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3314      	adds	r3, #20
 80079f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3314      	adds	r3, #20
 8007a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d9      	bne.n	80079f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	4a7e      	ldr	r2, [pc, #504]	; (8007c44 <HAL_UART_IRQHandler+0x3e0>)
 8007a4c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fc ff4c 	bl	80048f0 <HAL_DMA_Abort_IT>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d016      	beq.n	8007a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e00e      	b.n	8007a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9a5 	bl	8007dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a74:	e00a      	b.n	8007a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f9a1 	bl	8007dbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	e006      	b.n	8007a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f99d 	bl	8007dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007a8a:	e175      	b.n	8007d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8c:	bf00      	nop
    return;
 8007a8e:	e173      	b.n	8007d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 814f 	bne.w	8007d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8148 	beq.w	8007d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8141 	beq.w	8007d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	60bb      	str	r3, [r7, #8]
 8007aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80b6 	beq.w	8007c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8145 	beq.w	8007d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007afa:	429a      	cmp	r2, r3
 8007afc:	f080 813e 	bcs.w	8007d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	f000 8088 	beq.w	8007c24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	330c      	adds	r3, #12
 8007b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1d9      	bne.n	8007b14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3314      	adds	r3, #20
 8007b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e1      	bne.n	8007b60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e3      	bne.n	8007b9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf4:	f023 0310 	bic.w	r3, r3, #16
 8007bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c06:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e3      	bne.n	8007be2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fc fe2a 	bl	8004878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f8c8 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c40:	e09c      	b.n	8007d7c <HAL_UART_IRQHandler+0x518>
 8007c42:	bf00      	nop
 8007c44:	08008307 	.word	0x08008307
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 808e 	beq.w	8007d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8089 	beq.w	8007d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c92:	647a      	str	r2, [r7, #68]	; 0x44
 8007c94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e3      	bne.n	8007c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3314      	adds	r3, #20
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cca:	633a      	str	r2, [r7, #48]	; 0x30
 8007ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e3      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007d10:	61fa      	str	r2, [r7, #28]
 8007d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	69b9      	ldr	r1, [r7, #24]
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e3      	bne.n	8007cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f84d 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d36:	e023      	b.n	8007d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d009      	beq.n	8007d58 <HAL_UART_IRQHandler+0x4f4>
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 faec 	bl	800832e <UART_Transmit_IT>
    return;
 8007d56:	e014      	b.n	8007d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <HAL_UART_IRQHandler+0x51e>
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb2b 	bl	80083cc <UART_EndTransmit_IT>
    return;
 8007d76:	e004      	b.n	8007d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d80:	bf00      	nop
  }
}
 8007d82:	37e8      	adds	r7, #232	; 0xe8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr

08007dbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b09c      	sub	sp, #112	; 0x70
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d172      	bne.n	8007ee8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e04:	2200      	movs	r2, #0
 8007e06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e28:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	667b      	str	r3, [r7, #100]	; 0x64
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e5c:	647a      	str	r2, [r7, #68]	; 0x44
 8007e5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e5      	bne.n	8007e3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3314      	adds	r3, #20
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e86:	663b      	str	r3, [r7, #96]	; 0x60
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3314      	adds	r3, #20
 8007e8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e90:	633a      	str	r2, [r7, #48]	; 0x30
 8007e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e5      	bne.n	8007e70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d119      	bne.n	8007ee8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ed4:	61fa      	str	r2, [r7, #28]
 8007ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	69b9      	ldr	r1, [r7, #24]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e5      	bne.n	8007eb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	2200      	movs	r2, #0
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d106      	bne.n	8007f04 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007efa:	4619      	mov	r1, r3
 8007efc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007efe:	f7ff ff67 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f02:	e002      	b.n	8007f0a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f06:	f7ff ff48 	bl	8007d9a <HAL_UART_RxCpltCallback>
}
 8007f0a:	bf00      	nop
 8007f0c:	3770      	adds	r7, #112	; 0x70
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d108      	bne.n	8007f40 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4619      	mov	r1, r3
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff ff49 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f3e:	e002      	b.n	8007f46 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ff33 	bl	8007dac <HAL_UART_RxHalfCpltCallback>
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b21      	cmp	r3, #33	; 0x21
 8007f80:	d108      	bne.n	8007f94 <UART_DMAError+0x46>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f000 f930 	bl	80081f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b22      	cmp	r3, #34	; 0x22
 8007fb4:	d108      	bne.n	8007fc8 <UART_DMAError+0x7a>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007fc2:	68b8      	ldr	r0, [r7, #8]
 8007fc4:	f000 f93d 	bl	8008242 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f043 0210 	orr.w	r2, r3, #16
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd4:	68b8      	ldr	r0, [r7, #8]
 8007fd6:	f7ff fef2 	bl	8007dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b090      	sub	sp, #64	; 0x40
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff2:	e050      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffa:	d04c      	beq.n	8008096 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0x30>
 8008002:	f7fb fe27 	bl	8003c54 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800800e:	429a      	cmp	r2, r3
 8008010:	d241      	bcs.n	8008096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	330c      	adds	r3, #12
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	330c      	adds	r3, #12
 8008030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008032:	637a      	str	r2, [r7, #52]	; 0x34
 8008034:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e5      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3314      	adds	r3, #20
 800804c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	613b      	str	r3, [r7, #16]
   return(result);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3314      	adds	r3, #20
 8008064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008066:	623a      	str	r2, [r7, #32]
 8008068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	69f9      	ldr	r1, [r7, #28]
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	61bb      	str	r3, [r7, #24]
   return(result);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00f      	b.n	80080b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4013      	ands	r3, r2
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	bf0c      	ite	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	2300      	movne	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d09f      	beq.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3740      	adds	r7, #64	; 0x40
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b098      	sub	sp, #96	; 0x60
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2222      	movs	r2, #34	; 0x22
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	4a3e      	ldr	r2, [pc, #248]	; (80081e8 <UART_Start_Receive_DMA+0x128>)
 80080ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	4a3d      	ldr	r2, [pc, #244]	; (80081ec <UART_Start_Receive_DMA+0x12c>)
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	4a3c      	ldr	r2, [pc, #240]	; (80081f0 <UART_Start_Receive_DMA+0x130>)
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	2200      	movs	r2, #0
 8008106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	f7fc fb4a 	bl	80047b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008124:	2300      	movs	r3, #0
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d019      	beq.n	8008176 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008158:	65bb      	str	r3, [r7, #88]	; 0x58
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008162:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008164:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3314      	adds	r3, #20
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	657b      	str	r3, [r7, #84]	; 0x54
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3314      	adds	r3, #20
 8008194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008196:	63ba      	str	r2, [r7, #56]	; 0x38
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800819c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c0:	653b      	str	r3, [r7, #80]	; 0x50
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3314      	adds	r3, #20
 80081c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081ca:	627a      	str	r2, [r7, #36]	; 0x24
 80081cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6a39      	ldr	r1, [r7, #32]
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e5      	bne.n	80081aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3760      	adds	r7, #96	; 0x60
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	08007de7 	.word	0x08007de7
 80081ec:	08007f13 	.word	0x08007f13
 80081f0:	08007f4f 	.word	0x08007f4f

080081f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b089      	sub	sp, #36	; 0x24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	60bb      	str	r3, [r7, #8]
   return(result);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	330c      	adds	r3, #12
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	61ba      	str	r2, [r7, #24]
 800821e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6979      	ldr	r1, [r7, #20]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	613b      	str	r3, [r7, #16]
   return(result);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e5      	bne.n	80081fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008238:	bf00      	nop
 800823a:	3724      	adds	r7, #36	; 0x24
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr

08008242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008242:	b480      	push	{r7}
 8008244:	b095      	sub	sp, #84	; 0x54
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	330c      	adds	r3, #12
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	330c      	adds	r3, #12
 8008268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800826a:	643a      	str	r2, [r7, #64]	; 0x40
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e5      	bne.n	800824a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3314      	adds	r3, #20
 8008284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	61fb      	str	r3, [r7, #28]
   return(result);
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	64bb      	str	r3, [r7, #72]	; 0x48
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3314      	adds	r3, #20
 800829c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e5      	bne.n	800827e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d119      	bne.n	80082ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	330c      	adds	r3, #12
 80082c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0310 	bic.w	r3, r3, #16
 80082d0:	647b      	str	r3, [r7, #68]	; 0x44
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	330c      	adds	r3, #12
 80082d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082da:	61ba      	str	r2, [r7, #24]
 80082dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6979      	ldr	r1, [r7, #20]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	613b      	str	r3, [r7, #16]
   return(result);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e5      	bne.n	80082ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082fc:	bf00      	nop
 80082fe:	3754      	adds	r7, #84	; 0x54
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fd4c 	bl	8007dbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b21      	cmp	r3, #33	; 0x21
 8008340:	d13e      	bne.n	80083c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d114      	bne.n	8008376 <UART_Transmit_IT+0x48>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d110      	bne.n	8008376 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008368:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	1c9a      	adds	r2, r3, #2
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]
 8008374:	e008      	b.n	8008388 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	1c59      	adds	r1, r3, #1
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6211      	str	r1, [r2, #32]
 8008380:	781a      	ldrb	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29b      	uxth	r3, r3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4619      	mov	r1, r3
 8008396:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10f      	bne.n	80083bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	e000      	b.n	80083c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
  }
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr

080083cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7ff fccb 	bl	8007d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b22      	cmp	r3, #34	; 0x22
 800840e:	f040 80ae 	bne.w	800856e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d117      	bne.n	800844c <UART_Receive_IT+0x50>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d113      	bne.n	800844c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	b29a      	uxth	r2, r3
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	1c9a      	adds	r2, r3, #2
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
 800844a:	e026      	b.n	800849a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845e:	d007      	beq.n	8008470 <UART_Receive_IT+0x74>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <UART_Receive_IT+0x82>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d106      	bne.n	800847e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e008      	b.n	8008490 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	b2db      	uxtb	r3, r3
 8008486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848a:	b2da      	uxtb	r2, r3
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800849e:	b29b      	uxth	r3, r3
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4619      	mov	r1, r3
 80084a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d15d      	bne.n	800856a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0220 	bic.w	r2, r2, #32
 80084bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d135      	bne.n	8008560 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	330c      	adds	r3, #12
 8008500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	613b      	str	r3, [r7, #16]
   return(result);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 0310 	bic.w	r3, r3, #16
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	330c      	adds	r3, #12
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	623a      	str	r2, [r7, #32]
 800851c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	61bb      	str	r3, [r7, #24]
   return(result);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b10      	cmp	r3, #16
 800853a:	d10a      	bne.n	8008552 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fc39 	bl	8007dd0 <HAL_UARTEx_RxEventCallback>
 800855e:	e002      	b.n	8008566 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fc1a 	bl	8007d9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	e002      	b.n	8008570 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3730      	adds	r7, #48	; 0x30
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80085b2:	f023 030c 	bic.w	r3, r3, #12
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	68b9      	ldr	r1, [r7, #8]
 80085bc:	430b      	orrs	r3, r1
 80085be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2c      	ldr	r2, [pc, #176]	; (800868c <UART_SetConfig+0x114>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d103      	bne.n	80085e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80085e0:	f7fe fab4 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	e002      	b.n	80085ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80085e8:	f7fe fa9c 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 80085ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009a      	lsls	r2, r3, #2
 80085f8:	441a      	add	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	fbb2 f3f3 	udiv	r3, r2, r3
 8008604:	4a22      	ldr	r2, [pc, #136]	; (8008690 <UART_SetConfig+0x118>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	0119      	lsls	r1, r3, #4
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009a      	lsls	r2, r3, #2
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	fbb2 f2f3 	udiv	r2, r2, r3
 8008624:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <UART_SetConfig+0x118>)
 8008626:	fba3 0302 	umull	r0, r3, r3, r2
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	2064      	movs	r0, #100	; 0x64
 800862e:	fb00 f303 	mul.w	r3, r0, r3
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	3332      	adds	r3, #50	; 0x32
 8008638:	4a15      	ldr	r2, [pc, #84]	; (8008690 <UART_SetConfig+0x118>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008644:	4419      	add	r1, r3
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	009a      	lsls	r2, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	fbb2 f2f3 	udiv	r2, r2, r3
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <UART_SetConfig+0x118>)
 800865e:	fba3 0302 	umull	r0, r3, r3, r2
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2064      	movs	r0, #100	; 0x64
 8008666:	fb00 f303 	mul.w	r3, r0, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	011b      	lsls	r3, r3, #4
 800866e:	3332      	adds	r3, #50	; 0x32
 8008670:	4a07      	ldr	r2, [pc, #28]	; (8008690 <UART_SetConfig+0x118>)
 8008672:	fba2 2303 	umull	r2, r3, r2, r3
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	440a      	add	r2, r1
 8008682:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008684:	bf00      	nop
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	40013800 	.word	0x40013800
 8008690:	51eb851f 	.word	0x51eb851f

08008694 <_ZdlPvj>:
 8008694:	f000 b811 	b.w	80086ba <_ZdlPv>

08008698 <_Znwj>:
 8008698:	2801      	cmp	r0, #1
 800869a:	bf38      	it	cc
 800869c:	2001      	movcc	r0, #1
 800869e:	b510      	push	{r4, lr}
 80086a0:	4604      	mov	r4, r0
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 f9fa 	bl	8008a9c <malloc>
 80086a8:	b100      	cbz	r0, 80086ac <_Znwj+0x14>
 80086aa:	bd10      	pop	{r4, pc}
 80086ac:	f000 f808 	bl	80086c0 <_ZSt15get_new_handlerv>
 80086b0:	b908      	cbnz	r0, 80086b6 <_Znwj+0x1e>
 80086b2:	f000 f9e7 	bl	8008a84 <abort>
 80086b6:	4780      	blx	r0
 80086b8:	e7f3      	b.n	80086a2 <_Znwj+0xa>

080086ba <_ZdlPv>:
 80086ba:	f000 b9f7 	b.w	8008aac <free>
	...

080086c0 <_ZSt15get_new_handlerv>:
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <_ZSt15get_new_handlerv+0xc>)
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	f3bf 8f5b 	dmb	ish
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	200007ec 	.word	0x200007ec

080086d0 <logf>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4604      	mov	r4, r0
 80086d4:	f000 f8b2 	bl	800883c <__ieee754_logf>
 80086d8:	4621      	mov	r1, r4
 80086da:	4605      	mov	r5, r0
 80086dc:	4620      	mov	r0, r4
 80086de:	f7f8 fd17 	bl	8001110 <__aeabi_fcmpun>
 80086e2:	b970      	cbnz	r0, 8008702 <logf+0x32>
 80086e4:	2100      	movs	r1, #0
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7f8 fd08 	bl	80010fc <__aeabi_fcmpgt>
 80086ec:	b948      	cbnz	r0, 8008702 <logf+0x32>
 80086ee:	2100      	movs	r1, #0
 80086f0:	4620      	mov	r0, r4
 80086f2:	f7f8 fcdb 	bl	80010ac <__aeabi_fcmpeq>
 80086f6:	b130      	cbz	r0, 8008706 <logf+0x36>
 80086f8:	f002 f946 	bl	800a988 <__errno>
 80086fc:	2322      	movs	r3, #34	; 0x22
 80086fe:	4d06      	ldr	r5, [pc, #24]	; (8008718 <logf+0x48>)
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	4628      	mov	r0, r5
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	f002 f93f 	bl	800a988 <__errno>
 800870a:	2321      	movs	r3, #33	; 0x21
 800870c:	6003      	str	r3, [r0, #0]
 800870e:	4803      	ldr	r0, [pc, #12]	; (800871c <logf+0x4c>)
 8008710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008714:	f000 b81e 	b.w	8008754 <nanf>
 8008718:	ff800000 	.word	0xff800000
 800871c:	0800d7e0 	.word	0x0800d7e0

08008720 <sqrtf>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4605      	mov	r5, r0
 8008724:	f000 f81a 	bl	800875c <__ieee754_sqrtf>
 8008728:	4629      	mov	r1, r5
 800872a:	4604      	mov	r4, r0
 800872c:	4628      	mov	r0, r5
 800872e:	f7f8 fcef 	bl	8001110 <__aeabi_fcmpun>
 8008732:	b968      	cbnz	r0, 8008750 <sqrtf+0x30>
 8008734:	2100      	movs	r1, #0
 8008736:	4628      	mov	r0, r5
 8008738:	f7f8 fcc2 	bl	80010c0 <__aeabi_fcmplt>
 800873c:	b140      	cbz	r0, 8008750 <sqrtf+0x30>
 800873e:	f002 f923 	bl	800a988 <__errno>
 8008742:	2321      	movs	r3, #33	; 0x21
 8008744:	2100      	movs	r1, #0
 8008746:	6003      	str	r3, [r0, #0]
 8008748:	4608      	mov	r0, r1
 800874a:	f7f8 fbcf 	bl	8000eec <__aeabi_fdiv>
 800874e:	4604      	mov	r4, r0
 8008750:	4620      	mov	r0, r4
 8008752:	bd38      	pop	{r3, r4, r5, pc}

08008754 <nanf>:
 8008754:	4800      	ldr	r0, [pc, #0]	; (8008758 <nanf+0x4>)
 8008756:	4770      	bx	lr
 8008758:	7fc00000 	.word	0x7fc00000

0800875c <__ieee754_sqrtf>:
 800875c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008760:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008768:	4603      	mov	r3, r0
 800876a:	4604      	mov	r4, r0
 800876c:	d30a      	bcc.n	8008784 <__ieee754_sqrtf+0x28>
 800876e:	4601      	mov	r1, r0
 8008770:	f7f8 fb08 	bl	8000d84 <__aeabi_fmul>
 8008774:	4601      	mov	r1, r0
 8008776:	4620      	mov	r0, r4
 8008778:	f7f8 f9fc 	bl	8000b74 <__addsf3>
 800877c:	4604      	mov	r4, r0
 800877e:	4620      	mov	r0, r4
 8008780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008784:	2a00      	cmp	r2, #0
 8008786:	d0fa      	beq.n	800877e <__ieee754_sqrtf+0x22>
 8008788:	2800      	cmp	r0, #0
 800878a:	da06      	bge.n	800879a <__ieee754_sqrtf+0x3e>
 800878c:	4601      	mov	r1, r0
 800878e:	f7f8 f9ef 	bl	8000b70 <__aeabi_fsub>
 8008792:	4601      	mov	r1, r0
 8008794:	f7f8 fbaa 	bl	8000eec <__aeabi_fdiv>
 8008798:	e7f0      	b.n	800877c <__ieee754_sqrtf+0x20>
 800879a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800879e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80087a2:	d03e      	beq.n	8008822 <__ieee754_sqrtf+0xc6>
 80087a4:	2400      	movs	r4, #0
 80087a6:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 80087aa:	07ca      	lsls	r2, r1, #31
 80087ac:	f04f 0019 	mov.w	r0, #25
 80087b0:	4626      	mov	r6, r4
 80087b2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80087b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80087ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087be:	bf58      	it	pl
 80087c0:	005b      	lslpl	r3, r3, #1
 80087c2:	106d      	asrs	r5, r5, #1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	1872      	adds	r2, r6, r1
 80087c8:	429a      	cmp	r2, r3
 80087ca:	bfcf      	iteee	gt
 80087cc:	461a      	movgt	r2, r3
 80087ce:	1856      	addle	r6, r2, r1
 80087d0:	1864      	addle	r4, r4, r1
 80087d2:	1a9a      	suble	r2, r3, r2
 80087d4:	3801      	subs	r0, #1
 80087d6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80087da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80087de:	d1f2      	bne.n	80087c6 <__ieee754_sqrtf+0x6a>
 80087e0:	b1ba      	cbz	r2, 8008812 <__ieee754_sqrtf+0xb6>
 80087e2:	4e14      	ldr	r6, [pc, #80]	; (8008834 <__ieee754_sqrtf+0xd8>)
 80087e4:	4f14      	ldr	r7, [pc, #80]	; (8008838 <__ieee754_sqrtf+0xdc>)
 80087e6:	6830      	ldr	r0, [r6, #0]
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	f7f8 f9c1 	bl	8000b70 <__aeabi_fsub>
 80087ee:	f8d6 8000 	ldr.w	r8, [r6]
 80087f2:	4601      	mov	r1, r0
 80087f4:	4640      	mov	r0, r8
 80087f6:	f7f8 fc6d 	bl	80010d4 <__aeabi_fcmple>
 80087fa:	b150      	cbz	r0, 8008812 <__ieee754_sqrtf+0xb6>
 80087fc:	6830      	ldr	r0, [r6, #0]
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	f7f8 f9b8 	bl	8000b74 <__addsf3>
 8008804:	6836      	ldr	r6, [r6, #0]
 8008806:	4601      	mov	r1, r0
 8008808:	4630      	mov	r0, r6
 800880a:	f7f8 fc59 	bl	80010c0 <__aeabi_fcmplt>
 800880e:	b168      	cbz	r0, 800882c <__ieee754_sqrtf+0xd0>
 8008810:	3402      	adds	r4, #2
 8008812:	1064      	asrs	r4, r4, #1
 8008814:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008818:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800881c:	e7af      	b.n	800877e <__ieee754_sqrtf+0x22>
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	3201      	adds	r2, #1
 8008822:	0218      	lsls	r0, r3, #8
 8008824:	d5fb      	bpl.n	800881e <__ieee754_sqrtf+0xc2>
 8008826:	3a01      	subs	r2, #1
 8008828:	1a89      	subs	r1, r1, r2
 800882a:	e7bb      	b.n	80087a4 <__ieee754_sqrtf+0x48>
 800882c:	3401      	adds	r4, #1
 800882e:	f024 0401 	bic.w	r4, r4, #1
 8008832:	e7ee      	b.n	8008812 <__ieee754_sqrtf+0xb6>
 8008834:	20000010 	.word	0x20000010
 8008838:	20000014 	.word	0x20000014

0800883c <__ieee754_logf>:
 800883c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	4601      	mov	r1, r0
 8008846:	4603      	mov	r3, r0
 8008848:	d106      	bne.n	8008858 <__ieee754_logf+0x1c>
 800884a:	2100      	movs	r1, #0
 800884c:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8008850:	f7f8 fb4c 	bl	8000eec <__aeabi_fdiv>
 8008854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	2800      	cmp	r0, #0
 800885a:	da03      	bge.n	8008864 <__ieee754_logf+0x28>
 800885c:	f7f8 f988 	bl	8000b70 <__aeabi_fsub>
 8008860:	2100      	movs	r1, #0
 8008862:	e7f5      	b.n	8008850 <__ieee754_logf+0x14>
 8008864:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008868:	db02      	blt.n	8008870 <__ieee754_logf+0x34>
 800886a:	f7f8 f983 	bl	8000b74 <__addsf3>
 800886e:	e7f1      	b.n	8008854 <__ieee754_logf+0x18>
 8008870:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008874:	da35      	bge.n	80088e2 <__ieee754_logf+0xa6>
 8008876:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800887a:	f7f8 fa83 	bl	8000d84 <__aeabi_fmul>
 800887e:	f06f 0218 	mvn.w	r2, #24
 8008882:	4603      	mov	r3, r0
 8008884:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008888:	15de      	asrs	r6, r3, #23
 800888a:	4b71      	ldr	r3, [pc, #452]	; (8008a50 <__ieee754_logf+0x214>)
 800888c:	3e7f      	subs	r6, #127	; 0x7f
 800888e:	4423      	add	r3, r4
 8008890:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8008894:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8008898:	4416      	add	r6, r2
 800889a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800889e:	4320      	orrs	r0, r4
 80088a0:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 80088a4:	f7f8 f964 	bl	8000b70 <__aeabi_fsub>
 80088a8:	4b6a      	ldr	r3, [pc, #424]	; (8008a54 <__ieee754_logf+0x218>)
 80088aa:	f104 020f 	add.w	r2, r4, #15
 80088ae:	4013      	ands	r3, r2
 80088b0:	4605      	mov	r5, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d13a      	bne.n	800892c <__ieee754_logf+0xf0>
 80088b6:	2100      	movs	r1, #0
 80088b8:	f7f8 fbf8 	bl	80010ac <__aeabi_fcmpeq>
 80088bc:	b198      	cbz	r0, 80088e6 <__ieee754_logf+0xaa>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	f000 80c4 	beq.w	8008a4c <__ieee754_logf+0x210>
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7f8 fa09 	bl	8000cdc <__aeabi_i2f>
 80088ca:	4963      	ldr	r1, [pc, #396]	; (8008a58 <__ieee754_logf+0x21c>)
 80088cc:	4605      	mov	r5, r0
 80088ce:	f7f8 fa59 	bl	8000d84 <__aeabi_fmul>
 80088d2:	4962      	ldr	r1, [pc, #392]	; (8008a5c <__ieee754_logf+0x220>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f7f8 fa54 	bl	8000d84 <__aeabi_fmul>
 80088dc:	4601      	mov	r1, r0
 80088de:	4620      	mov	r0, r4
 80088e0:	e7c3      	b.n	800886a <__ieee754_logf+0x2e>
 80088e2:	2200      	movs	r2, #0
 80088e4:	e7ce      	b.n	8008884 <__ieee754_logf+0x48>
 80088e6:	495e      	ldr	r1, [pc, #376]	; (8008a60 <__ieee754_logf+0x224>)
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7f8 fa4b 	bl	8000d84 <__aeabi_fmul>
 80088ee:	4601      	mov	r1, r0
 80088f0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80088f4:	f7f8 f93c 	bl	8000b70 <__aeabi_fsub>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4604      	mov	r4, r0
 80088fc:	4628      	mov	r0, r5
 80088fe:	f7f8 fa41 	bl	8000d84 <__aeabi_fmul>
 8008902:	4601      	mov	r1, r0
 8008904:	4620      	mov	r0, r4
 8008906:	f7f8 fa3d 	bl	8000d84 <__aeabi_fmul>
 800890a:	4604      	mov	r4, r0
 800890c:	b90e      	cbnz	r6, 8008912 <__ieee754_logf+0xd6>
 800890e:	4621      	mov	r1, r4
 8008910:	e06f      	b.n	80089f2 <__ieee754_logf+0x1b6>
 8008912:	4630      	mov	r0, r6
 8008914:	f7f8 f9e2 	bl	8000cdc <__aeabi_i2f>
 8008918:	494f      	ldr	r1, [pc, #316]	; (8008a58 <__ieee754_logf+0x21c>)
 800891a:	4607      	mov	r7, r0
 800891c:	f7f8 fa32 	bl	8000d84 <__aeabi_fmul>
 8008920:	4606      	mov	r6, r0
 8008922:	4638      	mov	r0, r7
 8008924:	494d      	ldr	r1, [pc, #308]	; (8008a5c <__ieee754_logf+0x220>)
 8008926:	f7f8 fa2d 	bl	8000d84 <__aeabi_fmul>
 800892a:	e072      	b.n	8008a12 <__ieee754_logf+0x1d6>
 800892c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008930:	f7f8 f920 	bl	8000b74 <__addsf3>
 8008934:	4601      	mov	r1, r0
 8008936:	4628      	mov	r0, r5
 8008938:	f7f8 fad8 	bl	8000eec <__aeabi_fdiv>
 800893c:	4681      	mov	r9, r0
 800893e:	4630      	mov	r0, r6
 8008940:	f7f8 f9cc 	bl	8000cdc <__aeabi_i2f>
 8008944:	4649      	mov	r1, r9
 8008946:	4680      	mov	r8, r0
 8008948:	4648      	mov	r0, r9
 800894a:	f7f8 fa1b 	bl	8000d84 <__aeabi_fmul>
 800894e:	4601      	mov	r1, r0
 8008950:	4683      	mov	fp, r0
 8008952:	f7f8 fa17 	bl	8000d84 <__aeabi_fmul>
 8008956:	4607      	mov	r7, r0
 8008958:	4942      	ldr	r1, [pc, #264]	; (8008a64 <__ieee754_logf+0x228>)
 800895a:	f7f8 fa13 	bl	8000d84 <__aeabi_fmul>
 800895e:	4942      	ldr	r1, [pc, #264]	; (8008a68 <__ieee754_logf+0x22c>)
 8008960:	f7f8 f908 	bl	8000b74 <__addsf3>
 8008964:	4639      	mov	r1, r7
 8008966:	f7f8 fa0d 	bl	8000d84 <__aeabi_fmul>
 800896a:	4940      	ldr	r1, [pc, #256]	; (8008a6c <__ieee754_logf+0x230>)
 800896c:	f7f8 f902 	bl	8000b74 <__addsf3>
 8008970:	4639      	mov	r1, r7
 8008972:	f7f8 fa07 	bl	8000d84 <__aeabi_fmul>
 8008976:	493e      	ldr	r1, [pc, #248]	; (8008a70 <__ieee754_logf+0x234>)
 8008978:	f7f8 f8fc 	bl	8000b74 <__addsf3>
 800897c:	4659      	mov	r1, fp
 800897e:	f7f8 fa01 	bl	8000d84 <__aeabi_fmul>
 8008982:	493c      	ldr	r1, [pc, #240]	; (8008a74 <__ieee754_logf+0x238>)
 8008984:	4683      	mov	fp, r0
 8008986:	4638      	mov	r0, r7
 8008988:	f7f8 f9fc 	bl	8000d84 <__aeabi_fmul>
 800898c:	493a      	ldr	r1, [pc, #232]	; (8008a78 <__ieee754_logf+0x23c>)
 800898e:	f7f8 f8f1 	bl	8000b74 <__addsf3>
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f9f6 	bl	8000d84 <__aeabi_fmul>
 8008998:	4938      	ldr	r1, [pc, #224]	; (8008a7c <__ieee754_logf+0x240>)
 800899a:	f7f8 f8eb 	bl	8000b74 <__addsf3>
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f8 f9f0 	bl	8000d84 <__aeabi_fmul>
 80089a4:	4601      	mov	r1, r0
 80089a6:	4658      	mov	r0, fp
 80089a8:	f7f8 f8e4 	bl	8000b74 <__addsf3>
 80089ac:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008a80 <__ieee754_logf+0x244>
 80089b0:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 80089b4:	44a2      	add	sl, r4
 80089b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80089ba:	ea43 030a 	orr.w	r3, r3, sl
 80089be:	2b00      	cmp	r3, #0
 80089c0:	4607      	mov	r7, r0
 80089c2:	dd30      	ble.n	8008a26 <__ieee754_logf+0x1ea>
 80089c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80089c8:	4628      	mov	r0, r5
 80089ca:	f7f8 f9db 	bl	8000d84 <__aeabi_fmul>
 80089ce:	4629      	mov	r1, r5
 80089d0:	f7f8 f9d8 	bl	8000d84 <__aeabi_fmul>
 80089d4:	4601      	mov	r1, r0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4638      	mov	r0, r7
 80089da:	f7f8 f8cb 	bl	8000b74 <__addsf3>
 80089de:	4649      	mov	r1, r9
 80089e0:	f7f8 f9d0 	bl	8000d84 <__aeabi_fmul>
 80089e4:	4607      	mov	r7, r0
 80089e6:	b946      	cbnz	r6, 80089fa <__ieee754_logf+0x1be>
 80089e8:	4601      	mov	r1, r0
 80089ea:	4620      	mov	r0, r4
 80089ec:	f7f8 f8c0 	bl	8000b70 <__aeabi_fsub>
 80089f0:	4601      	mov	r1, r0
 80089f2:	4628      	mov	r0, r5
 80089f4:	f7f8 f8bc 	bl	8000b70 <__aeabi_fsub>
 80089f8:	e72c      	b.n	8008854 <__ieee754_logf+0x18>
 80089fa:	4917      	ldr	r1, [pc, #92]	; (8008a58 <__ieee754_logf+0x21c>)
 80089fc:	4640      	mov	r0, r8
 80089fe:	f7f8 f9c1 	bl	8000d84 <__aeabi_fmul>
 8008a02:	4916      	ldr	r1, [pc, #88]	; (8008a5c <__ieee754_logf+0x220>)
 8008a04:	4606      	mov	r6, r0
 8008a06:	4640      	mov	r0, r8
 8008a08:	f7f8 f9bc 	bl	8000d84 <__aeabi_fmul>
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	f7f8 f8b1 	bl	8000b74 <__addsf3>
 8008a12:	4601      	mov	r1, r0
 8008a14:	4620      	mov	r0, r4
 8008a16:	f7f8 f8ab 	bl	8000b70 <__aeabi_fsub>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7f8 f8a8 	bl	8000b70 <__aeabi_fsub>
 8008a20:	4601      	mov	r1, r0
 8008a22:	4630      	mov	r0, r6
 8008a24:	e7e6      	b.n	80089f4 <__ieee754_logf+0x1b8>
 8008a26:	4601      	mov	r1, r0
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f7f8 f8a1 	bl	8000b70 <__aeabi_fsub>
 8008a2e:	4649      	mov	r1, r9
 8008a30:	f7f8 f9a8 	bl	8000d84 <__aeabi_fmul>
 8008a34:	4604      	mov	r4, r0
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	f43f af69 	beq.w	800890e <__ieee754_logf+0xd2>
 8008a3c:	4906      	ldr	r1, [pc, #24]	; (8008a58 <__ieee754_logf+0x21c>)
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7f8 f9a0 	bl	8000d84 <__aeabi_fmul>
 8008a44:	4905      	ldr	r1, [pc, #20]	; (8008a5c <__ieee754_logf+0x220>)
 8008a46:	4606      	mov	r6, r0
 8008a48:	4640      	mov	r0, r8
 8008a4a:	e76c      	b.n	8008926 <__ieee754_logf+0xea>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e701      	b.n	8008854 <__ieee754_logf+0x18>
 8008a50:	004afb20 	.word	0x004afb20
 8008a54:	007ffff0 	.word	0x007ffff0
 8008a58:	3f317180 	.word	0x3f317180
 8008a5c:	3717f7d1 	.word	0x3717f7d1
 8008a60:	3eaaaaab 	.word	0x3eaaaaab
 8008a64:	3e178897 	.word	0x3e178897
 8008a68:	3e3a3325 	.word	0x3e3a3325
 8008a6c:	3e924925 	.word	0x3e924925
 8008a70:	3f2aaaab 	.word	0x3f2aaaab
 8008a74:	3e1cd04f 	.word	0x3e1cd04f
 8008a78:	3e638e29 	.word	0x3e638e29
 8008a7c:	3ecccccd 	.word	0x3ecccccd
 8008a80:	ffcf5c30 	.word	0xffcf5c30

08008a84 <abort>:
 8008a84:	2006      	movs	r0, #6
 8008a86:	b508      	push	{r3, lr}
 8008a88:	f001 ff08 	bl	800a89c <raise>
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	f7fa ffd0 	bl	8003a32 <_exit>

08008a92 <atoi>:
 8008a92:	220a      	movs	r2, #10
 8008a94:	2100      	movs	r1, #0
 8008a96:	f000 bfe9 	b.w	8009a6c <strtol>
	...

08008a9c <malloc>:
 8008a9c:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <malloc+0xc>)
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f000 b82b 	b.w	8008afc <_malloc_r>
 8008aa6:	bf00      	nop
 8008aa8:	200001dc 	.word	0x200001dc

08008aac <free>:
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <free+0xc>)
 8008aae:	4601      	mov	r1, r0
 8008ab0:	6818      	ldr	r0, [r3, #0]
 8008ab2:	f002 be45 	b.w	800b740 <_free_r>
 8008ab6:	bf00      	nop
 8008ab8:	200001dc 	.word	0x200001dc

08008abc <sbrk_aligned>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4e0e      	ldr	r6, [pc, #56]	; (8008af8 <sbrk_aligned+0x3c>)
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6831      	ldr	r1, [r6, #0]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	b911      	cbnz	r1, 8008ace <sbrk_aligned+0x12>
 8008ac8:	f001 ff3c 	bl	800a944 <_sbrk_r>
 8008acc:	6030      	str	r0, [r6, #0]
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f001 ff37 	bl	800a944 <_sbrk_r>
 8008ad6:	1c43      	adds	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <sbrk_aligned+0x34>
 8008ada:	1cc4      	adds	r4, r0, #3
 8008adc:	f024 0403 	bic.w	r4, r4, #3
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d007      	beq.n	8008af4 <sbrk_aligned+0x38>
 8008ae4:	1a21      	subs	r1, r4, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f001 ff2c 	bl	800a944 <_sbrk_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d101      	bne.n	8008af4 <sbrk_aligned+0x38>
 8008af0:	f04f 34ff 	mov.w	r4, #4294967295
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	200007f4 	.word	0x200007f4

08008afc <_malloc_r>:
 8008afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b00:	1ccd      	adds	r5, r1, #3
 8008b02:	f025 0503 	bic.w	r5, r5, #3
 8008b06:	3508      	adds	r5, #8
 8008b08:	2d0c      	cmp	r5, #12
 8008b0a:	bf38      	it	cc
 8008b0c:	250c      	movcc	r5, #12
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	db01      	blt.n	8008b18 <_malloc_r+0x1c>
 8008b14:	42a9      	cmp	r1, r5
 8008b16:	d905      	bls.n	8008b24 <_malloc_r+0x28>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4630      	mov	r0, r6
 8008b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bf8 <_malloc_r+0xfc>
 8008b28:	f000 f868 	bl	8008bfc <__malloc_lock>
 8008b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b30:	461c      	mov	r4, r3
 8008b32:	bb5c      	cbnz	r4, 8008b8c <_malloc_r+0x90>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7ff ffc0 	bl	8008abc <sbrk_aligned>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	4604      	mov	r4, r0
 8008b40:	d155      	bne.n	8008bee <_malloc_r+0xf2>
 8008b42:	f8d8 4000 	ldr.w	r4, [r8]
 8008b46:	4626      	mov	r6, r4
 8008b48:	2e00      	cmp	r6, #0
 8008b4a:	d145      	bne.n	8008bd8 <_malloc_r+0xdc>
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	d048      	beq.n	8008be2 <_malloc_r+0xe6>
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	4631      	mov	r1, r6
 8008b54:	4638      	mov	r0, r7
 8008b56:	eb04 0903 	add.w	r9, r4, r3
 8008b5a:	f001 fef3 	bl	800a944 <_sbrk_r>
 8008b5e:	4581      	cmp	r9, r0
 8008b60:	d13f      	bne.n	8008be2 <_malloc_r+0xe6>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	4638      	mov	r0, r7
 8008b66:	1a6d      	subs	r5, r5, r1
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7ff ffa7 	bl	8008abc <sbrk_aligned>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d037      	beq.n	8008be2 <_malloc_r+0xe6>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	442b      	add	r3, r5
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d038      	beq.n	8008bf2 <_malloc_r+0xf6>
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	42a2      	cmp	r2, r4
 8008b84:	d12b      	bne.n	8008bde <_malloc_r+0xe2>
 8008b86:	2200      	movs	r2, #0
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	e00f      	b.n	8008bac <_malloc_r+0xb0>
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	1b52      	subs	r2, r2, r5
 8008b90:	d41f      	bmi.n	8008bd2 <_malloc_r+0xd6>
 8008b92:	2a0b      	cmp	r2, #11
 8008b94:	d917      	bls.n	8008bc6 <_malloc_r+0xca>
 8008b96:	1961      	adds	r1, r4, r5
 8008b98:	42a3      	cmp	r3, r4
 8008b9a:	6025      	str	r5, [r4, #0]
 8008b9c:	bf18      	it	ne
 8008b9e:	6059      	strne	r1, [r3, #4]
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	bf08      	it	eq
 8008ba4:	f8c8 1000 	streq.w	r1, [r8]
 8008ba8:	5162      	str	r2, [r4, r5]
 8008baa:	604b      	str	r3, [r1, #4]
 8008bac:	4638      	mov	r0, r7
 8008bae:	f104 060b 	add.w	r6, r4, #11
 8008bb2:	f000 f829 	bl	8008c08 <__malloc_unlock>
 8008bb6:	f026 0607 	bic.w	r6, r6, #7
 8008bba:	1d23      	adds	r3, r4, #4
 8008bbc:	1af2      	subs	r2, r6, r3
 8008bbe:	d0ae      	beq.n	8008b1e <_malloc_r+0x22>
 8008bc0:	1b9b      	subs	r3, r3, r6
 8008bc2:	50a3      	str	r3, [r4, r2]
 8008bc4:	e7ab      	b.n	8008b1e <_malloc_r+0x22>
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	6862      	ldr	r2, [r4, #4]
 8008bca:	d1dd      	bne.n	8008b88 <_malloc_r+0x8c>
 8008bcc:	f8c8 2000 	str.w	r2, [r8]
 8008bd0:	e7ec      	b.n	8008bac <_malloc_r+0xb0>
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	6864      	ldr	r4, [r4, #4]
 8008bd6:	e7ac      	b.n	8008b32 <_malloc_r+0x36>
 8008bd8:	4634      	mov	r4, r6
 8008bda:	6876      	ldr	r6, [r6, #4]
 8008bdc:	e7b4      	b.n	8008b48 <_malloc_r+0x4c>
 8008bde:	4613      	mov	r3, r2
 8008be0:	e7cc      	b.n	8008b7c <_malloc_r+0x80>
 8008be2:	230c      	movs	r3, #12
 8008be4:	4638      	mov	r0, r7
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	f000 f80e 	bl	8008c08 <__malloc_unlock>
 8008bec:	e797      	b.n	8008b1e <_malloc_r+0x22>
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	e7dc      	b.n	8008bac <_malloc_r+0xb0>
 8008bf2:	605b      	str	r3, [r3, #4]
 8008bf4:	deff      	udf	#255	; 0xff
 8008bf6:	bf00      	nop
 8008bf8:	200007f0 	.word	0x200007f0

08008bfc <__malloc_lock>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__malloc_lock+0x8>)
 8008bfe:	f001 beed 	b.w	800a9dc <__retarget_lock_acquire_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000938 	.word	0x20000938

08008c08 <__malloc_unlock>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__malloc_unlock+0x8>)
 8008c0a:	f001 bee8 	b.w	800a9de <__retarget_lock_release_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000938 	.word	0x20000938

08008c14 <rand>:
 8008c14:	4b16      	ldr	r3, [pc, #88]	; (8008c70 <rand+0x5c>)
 8008c16:	b510      	push	{r4, lr}
 8008c18:	681c      	ldr	r4, [r3, #0]
 8008c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c1c:	b9b3      	cbnz	r3, 8008c4c <rand+0x38>
 8008c1e:	2018      	movs	r0, #24
 8008c20:	f7ff ff3c 	bl	8008a9c <malloc>
 8008c24:	4602      	mov	r2, r0
 8008c26:	6320      	str	r0, [r4, #48]	; 0x30
 8008c28:	b920      	cbnz	r0, 8008c34 <rand+0x20>
 8008c2a:	2152      	movs	r1, #82	; 0x52
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <rand+0x60>)
 8008c2e:	4812      	ldr	r0, [pc, #72]	; (8008c78 <rand+0x64>)
 8008c30:	f001 fef8 	bl	800aa24 <__assert_func>
 8008c34:	4911      	ldr	r1, [pc, #68]	; (8008c7c <rand+0x68>)
 8008c36:	4b12      	ldr	r3, [pc, #72]	; (8008c80 <rand+0x6c>)
 8008c38:	e9c0 1300 	strd	r1, r3, [r0]
 8008c3c:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <rand+0x70>)
 8008c3e:	2100      	movs	r1, #0
 8008c40:	6083      	str	r3, [r0, #8]
 8008c42:	230b      	movs	r3, #11
 8008c44:	8183      	strh	r3, [r0, #12]
 8008c46:	2001      	movs	r0, #1
 8008c48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008c4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008c4e:	480e      	ldr	r0, [pc, #56]	; (8008c88 <rand+0x74>)
 8008c50:	690b      	ldr	r3, [r1, #16]
 8008c52:	694c      	ldr	r4, [r1, #20]
 8008c54:	4358      	muls	r0, r3
 8008c56:	4a0d      	ldr	r2, [pc, #52]	; (8008c8c <rand+0x78>)
 8008c58:	fb02 0004 	mla	r0, r2, r4, r0
 8008c5c:	fba3 3202 	umull	r3, r2, r3, r2
 8008c60:	3301      	adds	r3, #1
 8008c62:	eb40 0002 	adc.w	r0, r0, r2
 8008c66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008c6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008c6e:	bd10      	pop	{r4, pc}
 8008c70:	200001dc 	.word	0x200001dc
 8008c74:	0800d5a6 	.word	0x0800d5a6
 8008c78:	0800d5bd 	.word	0x0800d5bd
 8008c7c:	abcd330e 	.word	0xabcd330e
 8008c80:	e66d1234 	.word	0xe66d1234
 8008c84:	0005deec 	.word	0x0005deec
 8008c88:	5851f42d 	.word	0x5851f42d
 8008c8c:	4c957f2d 	.word	0x4c957f2d

08008c90 <sulp>:
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	460f      	mov	r7, r1
 8008c96:	4690      	mov	r8, r2
 8008c98:	f003 fc72 	bl	800c580 <__ulp>
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d011      	beq.n	8008cca <sulp+0x3a>
 8008ca6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008caa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd0b      	ble.n	8008cca <sulp+0x3a>
 8008cb2:	2400      	movs	r4, #0
 8008cb4:	051b      	lsls	r3, r3, #20
 8008cb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	f7f7 fc09 	bl	80004d8 <__aeabi_dmul>
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4629      	mov	r1, r5
 8008cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd2:	0000      	movs	r0, r0
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <_strtod_l>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	b09f      	sub	sp, #124	; 0x7c
 8008cde:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	921a      	str	r2, [sp, #104]	; 0x68
 8008ce6:	460d      	mov	r5, r1
 8008ce8:	f04f 0800 	mov.w	r8, #0
 8008cec:	f04f 0900 	mov.w	r9, #0
 8008cf0:	460a      	mov	r2, r1
 8008cf2:	9219      	str	r2, [sp, #100]	; 0x64
 8008cf4:	7811      	ldrb	r1, [r2, #0]
 8008cf6:	292b      	cmp	r1, #43	; 0x2b
 8008cf8:	d04a      	beq.n	8008d90 <_strtod_l+0xb8>
 8008cfa:	d838      	bhi.n	8008d6e <_strtod_l+0x96>
 8008cfc:	290d      	cmp	r1, #13
 8008cfe:	d832      	bhi.n	8008d66 <_strtod_l+0x8e>
 8008d00:	2908      	cmp	r1, #8
 8008d02:	d832      	bhi.n	8008d6a <_strtod_l+0x92>
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d03b      	beq.n	8008d80 <_strtod_l+0xa8>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d0c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008d0e:	7832      	ldrb	r2, [r6, #0]
 8008d10:	2a30      	cmp	r2, #48	; 0x30
 8008d12:	f040 80b2 	bne.w	8008e7a <_strtod_l+0x1a2>
 8008d16:	7872      	ldrb	r2, [r6, #1]
 8008d18:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008d1c:	2a58      	cmp	r2, #88	; 0x58
 8008d1e:	d16e      	bne.n	8008dfe <_strtod_l+0x126>
 8008d20:	9302      	str	r3, [sp, #8]
 8008d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d24:	4620      	mov	r0, r4
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	ab1a      	add	r3, sp, #104	; 0x68
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4a8c      	ldr	r2, [pc, #560]	; (8008f60 <_strtod_l+0x288>)
 8008d2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008d30:	a919      	add	r1, sp, #100	; 0x64
 8008d32:	f002 fdb5 	bl	800b8a0 <__gethex>
 8008d36:	f010 070f 	ands.w	r7, r0, #15
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	d005      	beq.n	8008d4a <_strtod_l+0x72>
 8008d3e:	2f06      	cmp	r7, #6
 8008d40:	d128      	bne.n	8008d94 <_strtod_l+0xbc>
 8008d42:	2300      	movs	r3, #0
 8008d44:	3601      	adds	r6, #1
 8008d46:	9619      	str	r6, [sp, #100]	; 0x64
 8008d48:	930e      	str	r3, [sp, #56]	; 0x38
 8008d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 85a0 	bne.w	8009892 <_strtod_l+0xbba>
 8008d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d54:	b1cb      	cbz	r3, 8008d8a <_strtod_l+0xb2>
 8008d56:	4642      	mov	r2, r8
 8008d58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	b01f      	add	sp, #124	; 0x7c
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	2920      	cmp	r1, #32
 8008d68:	d1ce      	bne.n	8008d08 <_strtod_l+0x30>
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	e7c1      	b.n	8008cf2 <_strtod_l+0x1a>
 8008d6e:	292d      	cmp	r1, #45	; 0x2d
 8008d70:	d1ca      	bne.n	8008d08 <_strtod_l+0x30>
 8008d72:	2101      	movs	r1, #1
 8008d74:	910e      	str	r1, [sp, #56]	; 0x38
 8008d76:	1c51      	adds	r1, r2, #1
 8008d78:	9119      	str	r1, [sp, #100]	; 0x64
 8008d7a:	7852      	ldrb	r2, [r2, #1]
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	d1c5      	bne.n	8008d0c <_strtod_l+0x34>
 8008d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d82:	9519      	str	r5, [sp, #100]	; 0x64
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8582 	bne.w	800988e <_strtod_l+0xbb6>
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	e7e5      	b.n	8008d5c <_strtod_l+0x84>
 8008d90:	2100      	movs	r1, #0
 8008d92:	e7ef      	b.n	8008d74 <_strtod_l+0x9c>
 8008d94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d96:	b13a      	cbz	r2, 8008da8 <_strtod_l+0xd0>
 8008d98:	2135      	movs	r1, #53	; 0x35
 8008d9a:	a81c      	add	r0, sp, #112	; 0x70
 8008d9c:	f003 fcdc 	bl	800c758 <__copybits>
 8008da0:	4620      	mov	r0, r4
 8008da2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008da4:	f003 f8c0 	bl	800bf28 <_Bfree>
 8008da8:	3f01      	subs	r7, #1
 8008daa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008dac:	2f04      	cmp	r7, #4
 8008dae:	d806      	bhi.n	8008dbe <_strtod_l+0xe6>
 8008db0:	e8df f007 	tbb	[pc, r7]
 8008db4:	201d0314 	.word	0x201d0314
 8008db8:	14          	.byte	0x14
 8008db9:	00          	.byte	0x00
 8008dba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008dbe:	05e9      	lsls	r1, r5, #23
 8008dc0:	bf48      	it	mi
 8008dc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008dc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dca:	0d1b      	lsrs	r3, r3, #20
 8008dcc:	051b      	lsls	r3, r3, #20
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1bb      	bne.n	8008d4a <_strtod_l+0x72>
 8008dd2:	f001 fdd9 	bl	800a988 <__errno>
 8008dd6:	2322      	movs	r3, #34	; 0x22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	e7b6      	b.n	8008d4a <_strtod_l+0x72>
 8008ddc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008de0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008de4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008de8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008dec:	e7e7      	b.n	8008dbe <_strtod_l+0xe6>
 8008dee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008f64 <_strtod_l+0x28c>
 8008df2:	e7e4      	b.n	8008dbe <_strtod_l+0xe6>
 8008df4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008df8:	f04f 38ff 	mov.w	r8, #4294967295
 8008dfc:	e7df      	b.n	8008dbe <_strtod_l+0xe6>
 8008dfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	9219      	str	r2, [sp, #100]	; 0x64
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	2b30      	cmp	r3, #48	; 0x30
 8008e08:	d0f9      	beq.n	8008dfe <_strtod_l+0x126>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d09d      	beq.n	8008d4a <_strtod_l+0x72>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f04f 0a00 	mov.w	sl, #0
 8008e14:	220a      	movs	r2, #10
 8008e16:	46d3      	mov	fp, sl
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e1c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e22:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008e24:	7806      	ldrb	r6, [r0, #0]
 8008e26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e2a:	b2d9      	uxtb	r1, r3
 8008e2c:	2909      	cmp	r1, #9
 8008e2e:	d926      	bls.n	8008e7e <_strtod_l+0x1a6>
 8008e30:	2201      	movs	r2, #1
 8008e32:	494d      	ldr	r1, [pc, #308]	; (8008f68 <_strtod_l+0x290>)
 8008e34:	f001 fce1 	bl	800a7fa <strncmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d030      	beq.n	8008e9e <_strtod_l+0x1c6>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	4632      	mov	r2, r6
 8008e40:	4603      	mov	r3, r0
 8008e42:	465e      	mov	r6, fp
 8008e44:	9008      	str	r0, [sp, #32]
 8008e46:	2a65      	cmp	r2, #101	; 0x65
 8008e48:	d001      	beq.n	8008e4e <_strtod_l+0x176>
 8008e4a:	2a45      	cmp	r2, #69	; 0x45
 8008e4c:	d113      	bne.n	8008e76 <_strtod_l+0x19e>
 8008e4e:	b91e      	cbnz	r6, 8008e58 <_strtod_l+0x180>
 8008e50:	9a05      	ldr	r2, [sp, #20]
 8008e52:	4302      	orrs	r2, r0
 8008e54:	d094      	beq.n	8008d80 <_strtod_l+0xa8>
 8008e56:	2600      	movs	r6, #0
 8008e58:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008e5a:	1c6a      	adds	r2, r5, #1
 8008e5c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e5e:	786a      	ldrb	r2, [r5, #1]
 8008e60:	2a2b      	cmp	r2, #43	; 0x2b
 8008e62:	d074      	beq.n	8008f4e <_strtod_l+0x276>
 8008e64:	2a2d      	cmp	r2, #45	; 0x2d
 8008e66:	d078      	beq.n	8008f5a <_strtod_l+0x282>
 8008e68:	f04f 0c00 	mov.w	ip, #0
 8008e6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e70:	2909      	cmp	r1, #9
 8008e72:	d97f      	bls.n	8008f74 <_strtod_l+0x29c>
 8008e74:	9519      	str	r5, [sp, #100]	; 0x64
 8008e76:	2700      	movs	r7, #0
 8008e78:	e09e      	b.n	8008fb8 <_strtod_l+0x2e0>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e7c8      	b.n	8008e10 <_strtod_l+0x138>
 8008e7e:	f1bb 0f08 	cmp.w	fp, #8
 8008e82:	bfd8      	it	le
 8008e84:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008e86:	f100 0001 	add.w	r0, r0, #1
 8008e8a:	bfd6      	itet	le
 8008e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e90:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008e94:	930a      	strle	r3, [sp, #40]	; 0x28
 8008e96:	f10b 0b01 	add.w	fp, fp, #1
 8008e9a:	9019      	str	r0, [sp, #100]	; 0x64
 8008e9c:	e7c1      	b.n	8008e22 <_strtod_l+0x14a>
 8008e9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	9219      	str	r2, [sp, #100]	; 0x64
 8008ea4:	785a      	ldrb	r2, [r3, #1]
 8008ea6:	f1bb 0f00 	cmp.w	fp, #0
 8008eaa:	d037      	beq.n	8008f1c <_strtod_l+0x244>
 8008eac:	465e      	mov	r6, fp
 8008eae:	9008      	str	r0, [sp, #32]
 8008eb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008eb4:	2b09      	cmp	r3, #9
 8008eb6:	d912      	bls.n	8008ede <_strtod_l+0x206>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7c4      	b.n	8008e46 <_strtod_l+0x16e>
 8008ebc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	9219      	str	r2, [sp, #100]	; 0x64
 8008ec4:	785a      	ldrb	r2, [r3, #1]
 8008ec6:	2a30      	cmp	r2, #48	; 0x30
 8008ec8:	d0f8      	beq.n	8008ebc <_strtod_l+0x1e4>
 8008eca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	f200 84e4 	bhi.w	800989c <_strtod_l+0xbc4>
 8008ed4:	9008      	str	r0, [sp, #32]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4606      	mov	r6, r0
 8008eda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ede:	3a30      	subs	r2, #48	; 0x30
 8008ee0:	f100 0301 	add.w	r3, r0, #1
 8008ee4:	d014      	beq.n	8008f10 <_strtod_l+0x238>
 8008ee6:	9908      	ldr	r1, [sp, #32]
 8008ee8:	eb00 0c06 	add.w	ip, r0, r6
 8008eec:	4419      	add	r1, r3
 8008eee:	9108      	str	r1, [sp, #32]
 8008ef0:	4633      	mov	r3, r6
 8008ef2:	210a      	movs	r1, #10
 8008ef4:	4563      	cmp	r3, ip
 8008ef6:	d113      	bne.n	8008f20 <_strtod_l+0x248>
 8008ef8:	1833      	adds	r3, r6, r0
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	f106 0601 	add.w	r6, r6, #1
 8008f00:	4406      	add	r6, r0
 8008f02:	dc1a      	bgt.n	8008f3a <_strtod_l+0x262>
 8008f04:	230a      	movs	r3, #10
 8008f06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f08:	fb03 2301 	mla	r3, r3, r1, r2
 8008f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f12:	4618      	mov	r0, r3
 8008f14:	1c51      	adds	r1, r2, #1
 8008f16:	9119      	str	r1, [sp, #100]	; 0x64
 8008f18:	7852      	ldrb	r2, [r2, #1]
 8008f1a:	e7c9      	b.n	8008eb0 <_strtod_l+0x1d8>
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	e7d2      	b.n	8008ec6 <_strtod_l+0x1ee>
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	f103 0301 	add.w	r3, r3, #1
 8008f26:	dc03      	bgt.n	8008f30 <_strtod_l+0x258>
 8008f28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008f2a:	434f      	muls	r7, r1
 8008f2c:	970a      	str	r7, [sp, #40]	; 0x28
 8008f2e:	e7e1      	b.n	8008ef4 <_strtod_l+0x21c>
 8008f30:	2b10      	cmp	r3, #16
 8008f32:	bfd8      	it	le
 8008f34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008f38:	e7dc      	b.n	8008ef4 <_strtod_l+0x21c>
 8008f3a:	2e10      	cmp	r6, #16
 8008f3c:	bfdc      	itt	le
 8008f3e:	230a      	movle	r3, #10
 8008f40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008f44:	e7e3      	b.n	8008f0e <_strtod_l+0x236>
 8008f46:	2300      	movs	r3, #0
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e780      	b.n	8008e50 <_strtod_l+0x178>
 8008f4e:	f04f 0c00 	mov.w	ip, #0
 8008f52:	1caa      	adds	r2, r5, #2
 8008f54:	9219      	str	r2, [sp, #100]	; 0x64
 8008f56:	78aa      	ldrb	r2, [r5, #2]
 8008f58:	e788      	b.n	8008e6c <_strtod_l+0x194>
 8008f5a:	f04f 0c01 	mov.w	ip, #1
 8008f5e:	e7f8      	b.n	8008f52 <_strtod_l+0x27a>
 8008f60:	0800d618 	.word	0x0800d618
 8008f64:	7ff00000 	.word	0x7ff00000
 8008f68:	0800d615 	.word	0x0800d615
 8008f6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f6e:	1c51      	adds	r1, r2, #1
 8008f70:	9119      	str	r1, [sp, #100]	; 0x64
 8008f72:	7852      	ldrb	r2, [r2, #1]
 8008f74:	2a30      	cmp	r2, #48	; 0x30
 8008f76:	d0f9      	beq.n	8008f6c <_strtod_l+0x294>
 8008f78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f7c:	2908      	cmp	r1, #8
 8008f7e:	f63f af7a 	bhi.w	8008e76 <_strtod_l+0x19e>
 8008f82:	3a30      	subs	r2, #48	; 0x30
 8008f84:	9209      	str	r2, [sp, #36]	; 0x24
 8008f86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f88:	920c      	str	r2, [sp, #48]	; 0x30
 8008f8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f8c:	1c57      	adds	r7, r2, #1
 8008f8e:	9719      	str	r7, [sp, #100]	; 0x64
 8008f90:	7852      	ldrb	r2, [r2, #1]
 8008f92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f96:	f1be 0f09 	cmp.w	lr, #9
 8008f9a:	d938      	bls.n	800900e <_strtod_l+0x336>
 8008f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f9e:	1a7f      	subs	r7, r7, r1
 8008fa0:	2f08      	cmp	r7, #8
 8008fa2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008fa6:	dc03      	bgt.n	8008fb0 <_strtod_l+0x2d8>
 8008fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008faa:	428f      	cmp	r7, r1
 8008fac:	bfa8      	it	ge
 8008fae:	460f      	movge	r7, r1
 8008fb0:	f1bc 0f00 	cmp.w	ip, #0
 8008fb4:	d000      	beq.n	8008fb8 <_strtod_l+0x2e0>
 8008fb6:	427f      	negs	r7, r7
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	d14f      	bne.n	800905c <_strtod_l+0x384>
 8008fbc:	9905      	ldr	r1, [sp, #20]
 8008fbe:	4301      	orrs	r1, r0
 8008fc0:	f47f aec3 	bne.w	8008d4a <_strtod_l+0x72>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f47f aedb 	bne.w	8008d80 <_strtod_l+0xa8>
 8008fca:	2a69      	cmp	r2, #105	; 0x69
 8008fcc:	d029      	beq.n	8009022 <_strtod_l+0x34a>
 8008fce:	dc26      	bgt.n	800901e <_strtod_l+0x346>
 8008fd0:	2a49      	cmp	r2, #73	; 0x49
 8008fd2:	d026      	beq.n	8009022 <_strtod_l+0x34a>
 8008fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8008fd6:	f47f aed3 	bne.w	8008d80 <_strtod_l+0xa8>
 8008fda:	499a      	ldr	r1, [pc, #616]	; (8009244 <_strtod_l+0x56c>)
 8008fdc:	a819      	add	r0, sp, #100	; 0x64
 8008fde:	f002 fea1 	bl	800bd24 <__match>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f aecc 	beq.w	8008d80 <_strtod_l+0xa8>
 8008fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b28      	cmp	r3, #40	; 0x28
 8008fee:	d12f      	bne.n	8009050 <_strtod_l+0x378>
 8008ff0:	4995      	ldr	r1, [pc, #596]	; (8009248 <_strtod_l+0x570>)
 8008ff2:	aa1c      	add	r2, sp, #112	; 0x70
 8008ff4:	a819      	add	r0, sp, #100	; 0x64
 8008ff6:	f002 fea9 	bl	800bd4c <__hexnan>
 8008ffa:	2805      	cmp	r0, #5
 8008ffc:	d128      	bne.n	8009050 <_strtod_l+0x378>
 8008ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009000:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009004:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009008:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800900c:	e69d      	b.n	8008d4a <_strtod_l+0x72>
 800900e:	210a      	movs	r1, #10
 8009010:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009012:	fb01 2107 	mla	r1, r1, r7, r2
 8009016:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800901a:	9209      	str	r2, [sp, #36]	; 0x24
 800901c:	e7b5      	b.n	8008f8a <_strtod_l+0x2b2>
 800901e:	2a6e      	cmp	r2, #110	; 0x6e
 8009020:	e7d9      	b.n	8008fd6 <_strtod_l+0x2fe>
 8009022:	498a      	ldr	r1, [pc, #552]	; (800924c <_strtod_l+0x574>)
 8009024:	a819      	add	r0, sp, #100	; 0x64
 8009026:	f002 fe7d 	bl	800bd24 <__match>
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aea8 	beq.w	8008d80 <_strtod_l+0xa8>
 8009030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009032:	4987      	ldr	r1, [pc, #540]	; (8009250 <_strtod_l+0x578>)
 8009034:	3b01      	subs	r3, #1
 8009036:	a819      	add	r0, sp, #100	; 0x64
 8009038:	9319      	str	r3, [sp, #100]	; 0x64
 800903a:	f002 fe73 	bl	800bd24 <__match>
 800903e:	b910      	cbnz	r0, 8009046 <_strtod_l+0x36e>
 8009040:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009042:	3301      	adds	r3, #1
 8009044:	9319      	str	r3, [sp, #100]	; 0x64
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009254 <_strtod_l+0x57c>
 800904e:	e67c      	b.n	8008d4a <_strtod_l+0x72>
 8009050:	4881      	ldr	r0, [pc, #516]	; (8009258 <_strtod_l+0x580>)
 8009052:	f001 fce1 	bl	800aa18 <nan>
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	e676      	b.n	8008d4a <_strtod_l+0x72>
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	f1bb 0f00 	cmp.w	fp, #0
 8009062:	bf08      	it	eq
 8009064:	46b3      	moveq	fp, r6
 8009066:	1afb      	subs	r3, r7, r3
 8009068:	2e10      	cmp	r6, #16
 800906a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800906c:	4635      	mov	r5, r6
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	bfa8      	it	ge
 8009072:	2510      	movge	r5, #16
 8009074:	f7f7 f9b6 	bl	80003e4 <__aeabi_ui2d>
 8009078:	2e09      	cmp	r6, #9
 800907a:	4680      	mov	r8, r0
 800907c:	4689      	mov	r9, r1
 800907e:	dd13      	ble.n	80090a8 <_strtod_l+0x3d0>
 8009080:	4b76      	ldr	r3, [pc, #472]	; (800925c <_strtod_l+0x584>)
 8009082:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009086:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	4680      	mov	r8, r0
 8009090:	4650      	mov	r0, sl
 8009092:	4689      	mov	r9, r1
 8009094:	f7f7 f9a6 	bl	80003e4 <__aeabi_ui2d>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4640      	mov	r0, r8
 800909e:	4649      	mov	r1, r9
 80090a0:	f7f7 f864 	bl	800016c <__adddf3>
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	2e0f      	cmp	r6, #15
 80090aa:	dc36      	bgt.n	800911a <_strtod_l+0x442>
 80090ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f43f ae4b 	beq.w	8008d4a <_strtod_l+0x72>
 80090b4:	dd22      	ble.n	80090fc <_strtod_l+0x424>
 80090b6:	2b16      	cmp	r3, #22
 80090b8:	dc09      	bgt.n	80090ce <_strtod_l+0x3f6>
 80090ba:	4968      	ldr	r1, [pc, #416]	; (800925c <_strtod_l+0x584>)
 80090bc:	4642      	mov	r2, r8
 80090be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090c2:	464b      	mov	r3, r9
 80090c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c8:	f7f7 fa06 	bl	80004d8 <__aeabi_dmul>
 80090cc:	e7c3      	b.n	8009056 <_strtod_l+0x37e>
 80090ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090d0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80090d4:	4293      	cmp	r3, r2
 80090d6:	db20      	blt.n	800911a <_strtod_l+0x442>
 80090d8:	4c60      	ldr	r4, [pc, #384]	; (800925c <_strtod_l+0x584>)
 80090da:	f1c6 060f 	rsb	r6, r6, #15
 80090de:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80090e2:	4642      	mov	r2, r8
 80090e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e8:	464b      	mov	r3, r9
 80090ea:	f7f7 f9f5 	bl	80004d8 <__aeabi_dmul>
 80090ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f0:	1b9e      	subs	r6, r3, r6
 80090f2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80090f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090fa:	e7e5      	b.n	80090c8 <_strtod_l+0x3f0>
 80090fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fe:	3316      	adds	r3, #22
 8009100:	db0b      	blt.n	800911a <_strtod_l+0x442>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	4640      	mov	r0, r8
 8009106:	1bdf      	subs	r7, r3, r7
 8009108:	4b54      	ldr	r3, [pc, #336]	; (800925c <_strtod_l+0x584>)
 800910a:	4649      	mov	r1, r9
 800910c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009114:	f7f7 fb0a 	bl	800072c <__aeabi_ddiv>
 8009118:	e79d      	b.n	8009056 <_strtod_l+0x37e>
 800911a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911c:	1b75      	subs	r5, r6, r5
 800911e:	441d      	add	r5, r3
 8009120:	2d00      	cmp	r5, #0
 8009122:	dd70      	ble.n	8009206 <_strtod_l+0x52e>
 8009124:	f015 030f 	ands.w	r3, r5, #15
 8009128:	d00a      	beq.n	8009140 <_strtod_l+0x468>
 800912a:	494c      	ldr	r1, [pc, #304]	; (800925c <_strtod_l+0x584>)
 800912c:	4642      	mov	r2, r8
 800912e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009136:	464b      	mov	r3, r9
 8009138:	f7f7 f9ce 	bl	80004d8 <__aeabi_dmul>
 800913c:	4680      	mov	r8, r0
 800913e:	4689      	mov	r9, r1
 8009140:	f035 050f 	bics.w	r5, r5, #15
 8009144:	d04d      	beq.n	80091e2 <_strtod_l+0x50a>
 8009146:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800914a:	dd22      	ble.n	8009192 <_strtod_l+0x4ba>
 800914c:	2600      	movs	r6, #0
 800914e:	46b3      	mov	fp, r6
 8009150:	960b      	str	r6, [sp, #44]	; 0x2c
 8009152:	9608      	str	r6, [sp, #32]
 8009154:	2322      	movs	r3, #34	; 0x22
 8009156:	f04f 0800 	mov.w	r8, #0
 800915a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009254 <_strtod_l+0x57c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009162:	2b00      	cmp	r3, #0
 8009164:	f43f adf1 	beq.w	8008d4a <_strtod_l+0x72>
 8009168:	4620      	mov	r0, r4
 800916a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800916c:	f002 fedc 	bl	800bf28 <_Bfree>
 8009170:	4620      	mov	r0, r4
 8009172:	9908      	ldr	r1, [sp, #32]
 8009174:	f002 fed8 	bl	800bf28 <_Bfree>
 8009178:	4659      	mov	r1, fp
 800917a:	4620      	mov	r0, r4
 800917c:	f002 fed4 	bl	800bf28 <_Bfree>
 8009180:	4620      	mov	r0, r4
 8009182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009184:	f002 fed0 	bl	800bf28 <_Bfree>
 8009188:	4631      	mov	r1, r6
 800918a:	4620      	mov	r0, r4
 800918c:	f002 fecc 	bl	800bf28 <_Bfree>
 8009190:	e5db      	b.n	8008d4a <_strtod_l+0x72>
 8009192:	4b33      	ldr	r3, [pc, #204]	; (8009260 <_strtod_l+0x588>)
 8009194:	4640      	mov	r0, r8
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	2300      	movs	r3, #0
 800919a:	4649      	mov	r1, r9
 800919c:	469a      	mov	sl, r3
 800919e:	112d      	asrs	r5, r5, #4
 80091a0:	2d01      	cmp	r5, #1
 80091a2:	dc21      	bgt.n	80091e8 <_strtod_l+0x510>
 80091a4:	b10b      	cbz	r3, 80091aa <_strtod_l+0x4d2>
 80091a6:	4680      	mov	r8, r0
 80091a8:	4689      	mov	r9, r1
 80091aa:	492d      	ldr	r1, [pc, #180]	; (8009260 <_strtod_l+0x588>)
 80091ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80091b4:	4642      	mov	r2, r8
 80091b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ba:	464b      	mov	r3, r9
 80091bc:	f7f7 f98c 	bl	80004d8 <__aeabi_dmul>
 80091c0:	4b24      	ldr	r3, [pc, #144]	; (8009254 <_strtod_l+0x57c>)
 80091c2:	460a      	mov	r2, r1
 80091c4:	400b      	ands	r3, r1
 80091c6:	4927      	ldr	r1, [pc, #156]	; (8009264 <_strtod_l+0x58c>)
 80091c8:	4680      	mov	r8, r0
 80091ca:	428b      	cmp	r3, r1
 80091cc:	d8be      	bhi.n	800914c <_strtod_l+0x474>
 80091ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091d2:	428b      	cmp	r3, r1
 80091d4:	bf86      	itte	hi
 80091d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80091da:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009268 <_strtod_l+0x590>
 80091de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091e2:	2300      	movs	r3, #0
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	e07b      	b.n	80092e0 <_strtod_l+0x608>
 80091e8:	07ea      	lsls	r2, r5, #31
 80091ea:	d505      	bpl.n	80091f8 <_strtod_l+0x520>
 80091ec:	9b05      	ldr	r3, [sp, #20]
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f971 	bl	80004d8 <__aeabi_dmul>
 80091f6:	2301      	movs	r3, #1
 80091f8:	9a05      	ldr	r2, [sp, #20]
 80091fa:	f10a 0a01 	add.w	sl, sl, #1
 80091fe:	3208      	adds	r2, #8
 8009200:	106d      	asrs	r5, r5, #1
 8009202:	9205      	str	r2, [sp, #20]
 8009204:	e7cc      	b.n	80091a0 <_strtod_l+0x4c8>
 8009206:	d0ec      	beq.n	80091e2 <_strtod_l+0x50a>
 8009208:	426d      	negs	r5, r5
 800920a:	f015 020f 	ands.w	r2, r5, #15
 800920e:	d00a      	beq.n	8009226 <_strtod_l+0x54e>
 8009210:	4b12      	ldr	r3, [pc, #72]	; (800925c <_strtod_l+0x584>)
 8009212:	4640      	mov	r0, r8
 8009214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009218:	4649      	mov	r1, r9
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 fa85 	bl	800072c <__aeabi_ddiv>
 8009222:	4680      	mov	r8, r0
 8009224:	4689      	mov	r9, r1
 8009226:	112d      	asrs	r5, r5, #4
 8009228:	d0db      	beq.n	80091e2 <_strtod_l+0x50a>
 800922a:	2d1f      	cmp	r5, #31
 800922c:	dd1e      	ble.n	800926c <_strtod_l+0x594>
 800922e:	2600      	movs	r6, #0
 8009230:	46b3      	mov	fp, r6
 8009232:	960b      	str	r6, [sp, #44]	; 0x2c
 8009234:	9608      	str	r6, [sp, #32]
 8009236:	2322      	movs	r3, #34	; 0x22
 8009238:	f04f 0800 	mov.w	r8, #0
 800923c:	f04f 0900 	mov.w	r9, #0
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	e78d      	b.n	8009160 <_strtod_l+0x488>
 8009244:	0800d776 	.word	0x0800d776
 8009248:	0800d62c 	.word	0x0800d62c
 800924c:	0800d76e 	.word	0x0800d76e
 8009250:	0800d7e4 	.word	0x0800d7e4
 8009254:	7ff00000 	.word	0x7ff00000
 8009258:	0800d7e0 	.word	0x0800d7e0
 800925c:	0800d938 	.word	0x0800d938
 8009260:	0800d910 	.word	0x0800d910
 8009264:	7ca00000 	.word	0x7ca00000
 8009268:	7fefffff 	.word	0x7fefffff
 800926c:	f015 0310 	ands.w	r3, r5, #16
 8009270:	bf18      	it	ne
 8009272:	236a      	movne	r3, #106	; 0x6a
 8009274:	4640      	mov	r0, r8
 8009276:	9305      	str	r3, [sp, #20]
 8009278:	4649      	mov	r1, r9
 800927a:	2300      	movs	r3, #0
 800927c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009548 <_strtod_l+0x870>
 8009280:	07ea      	lsls	r2, r5, #31
 8009282:	d504      	bpl.n	800928e <_strtod_l+0x5b6>
 8009284:	e9da 2300 	ldrd	r2, r3, [sl]
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	2301      	movs	r3, #1
 800928e:	106d      	asrs	r5, r5, #1
 8009290:	f10a 0a08 	add.w	sl, sl, #8
 8009294:	d1f4      	bne.n	8009280 <_strtod_l+0x5a8>
 8009296:	b10b      	cbz	r3, 800929c <_strtod_l+0x5c4>
 8009298:	4680      	mov	r8, r0
 800929a:	4689      	mov	r9, r1
 800929c:	9b05      	ldr	r3, [sp, #20]
 800929e:	b1bb      	cbz	r3, 80092d0 <_strtod_l+0x5f8>
 80092a0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	4649      	mov	r1, r9
 80092ac:	dd10      	ble.n	80092d0 <_strtod_l+0x5f8>
 80092ae:	2b1f      	cmp	r3, #31
 80092b0:	f340 8128 	ble.w	8009504 <_strtod_l+0x82c>
 80092b4:	2b34      	cmp	r3, #52	; 0x34
 80092b6:	bfd8      	it	le
 80092b8:	f04f 33ff 	movle.w	r3, #4294967295
 80092bc:	f04f 0800 	mov.w	r8, #0
 80092c0:	bfcf      	iteee	gt
 80092c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092c6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092ca:	4093      	lslle	r3, r2
 80092cc:	ea03 0901 	andle.w	r9, r3, r1
 80092d0:	2200      	movs	r2, #0
 80092d2:	2300      	movs	r3, #0
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7f7 fb66 	bl	80009a8 <__aeabi_dcmpeq>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d1a6      	bne.n	800922e <_strtod_l+0x556>
 80092e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e2:	465a      	mov	r2, fp
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4620      	mov	r0, r4
 80092e8:	4633      	mov	r3, r6
 80092ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ec:	f002 fe84 	bl	800bff8 <__s2b>
 80092f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f af2a 	beq.w	800914c <_strtod_l+0x474>
 80092f8:	2600      	movs	r6, #0
 80092fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2a00      	cmp	r2, #0
 8009300:	eba3 0307 	sub.w	r3, r3, r7
 8009304:	bfa8      	it	ge
 8009306:	2300      	movge	r3, #0
 8009308:	46b3      	mov	fp, r6
 800930a:	9312      	str	r3, [sp, #72]	; 0x48
 800930c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009310:	9316      	str	r3, [sp, #88]	; 0x58
 8009312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009314:	4620      	mov	r0, r4
 8009316:	6859      	ldr	r1, [r3, #4]
 8009318:	f002 fdc6 	bl	800bea8 <_Balloc>
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f af18 	beq.w	8009154 <_strtod_l+0x47c>
 8009324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009326:	300c      	adds	r0, #12
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	f103 010c 	add.w	r1, r3, #12
 800932e:	3202      	adds	r2, #2
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	f001 fb63 	bl	800a9fc <memcpy>
 8009336:	ab1c      	add	r3, sp, #112	; 0x70
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	ab1b      	add	r3, sp, #108	; 0x6c
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	4642      	mov	r2, r8
 8009340:	464b      	mov	r3, r9
 8009342:	4620      	mov	r0, r4
 8009344:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009348:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800934c:	f003 f980 	bl	800c650 <__d2b>
 8009350:	901a      	str	r0, [sp, #104]	; 0x68
 8009352:	2800      	cmp	r0, #0
 8009354:	f43f aefe 	beq.w	8009154 <_strtod_l+0x47c>
 8009358:	2101      	movs	r1, #1
 800935a:	4620      	mov	r0, r4
 800935c:	f002 fee4 	bl	800c128 <__i2b>
 8009360:	4683      	mov	fp, r0
 8009362:	2800      	cmp	r0, #0
 8009364:	f43f aef6 	beq.w	8009154 <_strtod_l+0x47c>
 8009368:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800936a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800936c:	2f00      	cmp	r7, #0
 800936e:	bfab      	itete	ge
 8009370:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009372:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009374:	eb07 0a03 	addge.w	sl, r7, r3
 8009378:	1bdd      	sublt	r5, r3, r7
 800937a:	9b05      	ldr	r3, [sp, #20]
 800937c:	bfa8      	it	ge
 800937e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009380:	eba7 0703 	sub.w	r7, r7, r3
 8009384:	4417      	add	r7, r2
 8009386:	4b71      	ldr	r3, [pc, #452]	; (800954c <_strtod_l+0x874>)
 8009388:	f107 37ff 	add.w	r7, r7, #4294967295
 800938c:	bfb8      	it	lt
 800938e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009392:	429f      	cmp	r7, r3
 8009394:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009398:	f280 80c7 	bge.w	800952a <_strtod_l+0x852>
 800939c:	1bdb      	subs	r3, r3, r7
 800939e:	2b1f      	cmp	r3, #31
 80093a0:	f04f 0101 	mov.w	r1, #1
 80093a4:	eba2 0203 	sub.w	r2, r2, r3
 80093a8:	f300 80b3 	bgt.w	8009512 <_strtod_l+0x83a>
 80093ac:	fa01 f303 	lsl.w	r3, r1, r3
 80093b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80093b2:	2300      	movs	r3, #0
 80093b4:	9310      	str	r3, [sp, #64]	; 0x40
 80093b6:	eb0a 0702 	add.w	r7, sl, r2
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	45ba      	cmp	sl, r7
 80093be:	4415      	add	r5, r2
 80093c0:	441d      	add	r5, r3
 80093c2:	4653      	mov	r3, sl
 80093c4:	bfa8      	it	ge
 80093c6:	463b      	movge	r3, r7
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	bfa8      	it	ge
 80093cc:	462b      	movge	r3, r5
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfc2      	ittt	gt
 80093d2:	1aff      	subgt	r7, r7, r3
 80093d4:	1aed      	subgt	r5, r5, r3
 80093d6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80093da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dd17      	ble.n	8009410 <_strtod_l+0x738>
 80093e0:	4659      	mov	r1, fp
 80093e2:	461a      	mov	r2, r3
 80093e4:	4620      	mov	r0, r4
 80093e6:	f002 ff5d 	bl	800c2a4 <__pow5mult>
 80093ea:	4683      	mov	fp, r0
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f aeb1 	beq.w	8009154 <_strtod_l+0x47c>
 80093f2:	4601      	mov	r1, r0
 80093f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093f6:	4620      	mov	r0, r4
 80093f8:	f002 feac 	bl	800c154 <__multiply>
 80093fc:	900a      	str	r0, [sp, #40]	; 0x28
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f aea8 	beq.w	8009154 <_strtod_l+0x47c>
 8009404:	4620      	mov	r0, r4
 8009406:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009408:	f002 fd8e 	bl	800bf28 <_Bfree>
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	931a      	str	r3, [sp, #104]	; 0x68
 8009410:	2f00      	cmp	r7, #0
 8009412:	f300 808f 	bgt.w	8009534 <_strtod_l+0x85c>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	dd08      	ble.n	800942e <_strtod_l+0x756>
 800941c:	4620      	mov	r0, r4
 800941e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009420:	9908      	ldr	r1, [sp, #32]
 8009422:	f002 ff3f 	bl	800c2a4 <__pow5mult>
 8009426:	9008      	str	r0, [sp, #32]
 8009428:	2800      	cmp	r0, #0
 800942a:	f43f ae93 	beq.w	8009154 <_strtod_l+0x47c>
 800942e:	2d00      	cmp	r5, #0
 8009430:	dd08      	ble.n	8009444 <_strtod_l+0x76c>
 8009432:	462a      	mov	r2, r5
 8009434:	4620      	mov	r0, r4
 8009436:	9908      	ldr	r1, [sp, #32]
 8009438:	f002 ff8e 	bl	800c358 <__lshift>
 800943c:	9008      	str	r0, [sp, #32]
 800943e:	2800      	cmp	r0, #0
 8009440:	f43f ae88 	beq.w	8009154 <_strtod_l+0x47c>
 8009444:	f1ba 0f00 	cmp.w	sl, #0
 8009448:	dd08      	ble.n	800945c <_strtod_l+0x784>
 800944a:	4659      	mov	r1, fp
 800944c:	4652      	mov	r2, sl
 800944e:	4620      	mov	r0, r4
 8009450:	f002 ff82 	bl	800c358 <__lshift>
 8009454:	4683      	mov	fp, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f ae7c 	beq.w	8009154 <_strtod_l+0x47c>
 800945c:	4620      	mov	r0, r4
 800945e:	9a08      	ldr	r2, [sp, #32]
 8009460:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009462:	f003 f801 	bl	800c468 <__mdiff>
 8009466:	4606      	mov	r6, r0
 8009468:	2800      	cmp	r0, #0
 800946a:	f43f ae73 	beq.w	8009154 <_strtod_l+0x47c>
 800946e:	2500      	movs	r5, #0
 8009470:	68c3      	ldr	r3, [r0, #12]
 8009472:	4659      	mov	r1, fp
 8009474:	60c5      	str	r5, [r0, #12]
 8009476:	930a      	str	r3, [sp, #40]	; 0x28
 8009478:	f002 ffda 	bl	800c430 <__mcmp>
 800947c:	42a8      	cmp	r0, r5
 800947e:	da6b      	bge.n	8009558 <_strtod_l+0x880>
 8009480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009482:	ea53 0308 	orrs.w	r3, r3, r8
 8009486:	f040 808f 	bne.w	80095a8 <_strtod_l+0x8d0>
 800948a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800948e:	2b00      	cmp	r3, #0
 8009490:	f040 808a 	bne.w	80095a8 <_strtod_l+0x8d0>
 8009494:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	051b      	lsls	r3, r3, #20
 800949c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094a0:	f240 8082 	bls.w	80095a8 <_strtod_l+0x8d0>
 80094a4:	6973      	ldr	r3, [r6, #20]
 80094a6:	b913      	cbnz	r3, 80094ae <_strtod_l+0x7d6>
 80094a8:	6933      	ldr	r3, [r6, #16]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	dd7c      	ble.n	80095a8 <_strtod_l+0x8d0>
 80094ae:	4631      	mov	r1, r6
 80094b0:	2201      	movs	r2, #1
 80094b2:	4620      	mov	r0, r4
 80094b4:	f002 ff50 	bl	800c358 <__lshift>
 80094b8:	4659      	mov	r1, fp
 80094ba:	4606      	mov	r6, r0
 80094bc:	f002 ffb8 	bl	800c430 <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dd71      	ble.n	80095a8 <_strtod_l+0x8d0>
 80094c4:	9905      	ldr	r1, [sp, #20]
 80094c6:	464b      	mov	r3, r9
 80094c8:	4a21      	ldr	r2, [pc, #132]	; (8009550 <_strtod_l+0x878>)
 80094ca:	2900      	cmp	r1, #0
 80094cc:	f000 808d 	beq.w	80095ea <_strtod_l+0x912>
 80094d0:	ea02 0109 	and.w	r1, r2, r9
 80094d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094d8:	f300 8087 	bgt.w	80095ea <_strtod_l+0x912>
 80094dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094e0:	f77f aea9 	ble.w	8009236 <_strtod_l+0x55e>
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	4b1a      	ldr	r3, [pc, #104]	; (8009554 <_strtod_l+0x87c>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	f7f6 fff4 	bl	80004d8 <__aeabi_dmul>
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <_strtod_l+0x878>)
 80094f2:	4680      	mov	r8, r0
 80094f4:	400b      	ands	r3, r1
 80094f6:	4689      	mov	r9, r1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f ae35 	bne.w	8009168 <_strtod_l+0x490>
 80094fe:	2322      	movs	r3, #34	; 0x22
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	e631      	b.n	8009168 <_strtod_l+0x490>
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	ea03 0808 	and.w	r8, r3, r8
 8009510:	e6de      	b.n	80092d0 <_strtod_l+0x5f8>
 8009512:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009516:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800951a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800951e:	37e2      	adds	r7, #226	; 0xe2
 8009520:	fa01 f307 	lsl.w	r3, r1, r7
 8009524:	9310      	str	r3, [sp, #64]	; 0x40
 8009526:	9113      	str	r1, [sp, #76]	; 0x4c
 8009528:	e745      	b.n	80093b6 <_strtod_l+0x6de>
 800952a:	2300      	movs	r3, #0
 800952c:	9310      	str	r3, [sp, #64]	; 0x40
 800952e:	2301      	movs	r3, #1
 8009530:	9313      	str	r3, [sp, #76]	; 0x4c
 8009532:	e740      	b.n	80093b6 <_strtod_l+0x6de>
 8009534:	463a      	mov	r2, r7
 8009536:	4620      	mov	r0, r4
 8009538:	991a      	ldr	r1, [sp, #104]	; 0x68
 800953a:	f002 ff0d 	bl	800c358 <__lshift>
 800953e:	901a      	str	r0, [sp, #104]	; 0x68
 8009540:	2800      	cmp	r0, #0
 8009542:	f47f af68 	bne.w	8009416 <_strtod_l+0x73e>
 8009546:	e605      	b.n	8009154 <_strtod_l+0x47c>
 8009548:	0800d640 	.word	0x0800d640
 800954c:	fffffc02 	.word	0xfffffc02
 8009550:	7ff00000 	.word	0x7ff00000
 8009554:	39500000 	.word	0x39500000
 8009558:	46ca      	mov	sl, r9
 800955a:	d165      	bne.n	8009628 <_strtod_l+0x950>
 800955c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009562:	b352      	cbz	r2, 80095ba <_strtod_l+0x8e2>
 8009564:	4a9e      	ldr	r2, [pc, #632]	; (80097e0 <_strtod_l+0xb08>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d12a      	bne.n	80095c0 <_strtod_l+0x8e8>
 800956a:	9b05      	ldr	r3, [sp, #20]
 800956c:	4641      	mov	r1, r8
 800956e:	b1fb      	cbz	r3, 80095b0 <_strtod_l+0x8d8>
 8009570:	4b9c      	ldr	r3, [pc, #624]	; (80097e4 <_strtod_l+0xb0c>)
 8009572:	f04f 32ff 	mov.w	r2, #4294967295
 8009576:	ea09 0303 	and.w	r3, r9, r3
 800957a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800957e:	d81a      	bhi.n	80095b6 <_strtod_l+0x8de>
 8009580:	0d1b      	lsrs	r3, r3, #20
 8009582:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	4299      	cmp	r1, r3
 800958c:	d118      	bne.n	80095c0 <_strtod_l+0x8e8>
 800958e:	4b96      	ldr	r3, [pc, #600]	; (80097e8 <_strtod_l+0xb10>)
 8009590:	459a      	cmp	sl, r3
 8009592:	d102      	bne.n	800959a <_strtod_l+0x8c2>
 8009594:	3101      	adds	r1, #1
 8009596:	f43f addd 	beq.w	8009154 <_strtod_l+0x47c>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	4b91      	ldr	r3, [pc, #580]	; (80097e4 <_strtod_l+0xb0c>)
 80095a0:	ea0a 0303 	and.w	r3, sl, r3
 80095a4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d19a      	bne.n	80094e4 <_strtod_l+0x80c>
 80095ae:	e5db      	b.n	8009168 <_strtod_l+0x490>
 80095b0:	f04f 33ff 	mov.w	r3, #4294967295
 80095b4:	e7e9      	b.n	800958a <_strtod_l+0x8b2>
 80095b6:	4613      	mov	r3, r2
 80095b8:	e7e7      	b.n	800958a <_strtod_l+0x8b2>
 80095ba:	ea53 0308 	orrs.w	r3, r3, r8
 80095be:	d081      	beq.n	80094c4 <_strtod_l+0x7ec>
 80095c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095c2:	b1e3      	cbz	r3, 80095fe <_strtod_l+0x926>
 80095c4:	ea13 0f0a 	tst.w	r3, sl
 80095c8:	d0ee      	beq.n	80095a8 <_strtod_l+0x8d0>
 80095ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	9a05      	ldr	r2, [sp, #20]
 80095d2:	b1c3      	cbz	r3, 8009606 <_strtod_l+0x92e>
 80095d4:	f7ff fb5c 	bl	8008c90 <sulp>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80095e0:	f7f6 fdc4 	bl	800016c <__adddf3>
 80095e4:	4680      	mov	r8, r0
 80095e6:	4689      	mov	r9, r1
 80095e8:	e7de      	b.n	80095a8 <_strtod_l+0x8d0>
 80095ea:	4013      	ands	r3, r2
 80095ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095f4:	f04f 38ff 	mov.w	r8, #4294967295
 80095f8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095fc:	e7d4      	b.n	80095a8 <_strtod_l+0x8d0>
 80095fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009600:	ea13 0f08 	tst.w	r3, r8
 8009604:	e7e0      	b.n	80095c8 <_strtod_l+0x8f0>
 8009606:	f7ff fb43 	bl	8008c90 <sulp>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009612:	f7f6 fda9 	bl	8000168 <__aeabi_dsub>
 8009616:	2200      	movs	r2, #0
 8009618:	2300      	movs	r3, #0
 800961a:	4680      	mov	r8, r0
 800961c:	4689      	mov	r9, r1
 800961e:	f7f7 f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8009622:	2800      	cmp	r0, #0
 8009624:	d0c0      	beq.n	80095a8 <_strtod_l+0x8d0>
 8009626:	e606      	b.n	8009236 <_strtod_l+0x55e>
 8009628:	4659      	mov	r1, fp
 800962a:	4630      	mov	r0, r6
 800962c:	f003 f866 	bl	800c6fc <__ratio>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009638:	2200      	movs	r2, #0
 800963a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800963e:	f7f7 f9c7 	bl	80009d0 <__aeabi_dcmple>
 8009642:	2800      	cmp	r0, #0
 8009644:	d06f      	beq.n	8009726 <_strtod_l+0xa4e>
 8009646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009648:	2b00      	cmp	r3, #0
 800964a:	d17c      	bne.n	8009746 <_strtod_l+0xa6e>
 800964c:	f1b8 0f00 	cmp.w	r8, #0
 8009650:	d159      	bne.n	8009706 <_strtod_l+0xa2e>
 8009652:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009656:	2b00      	cmp	r3, #0
 8009658:	d17b      	bne.n	8009752 <_strtod_l+0xa7a>
 800965a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800965e:	2200      	movs	r2, #0
 8009660:	4b62      	ldr	r3, [pc, #392]	; (80097ec <_strtod_l+0xb14>)
 8009662:	f7f7 f9ab 	bl	80009bc <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d15a      	bne.n	8009720 <_strtod_l+0xa48>
 800966a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800966e:	2200      	movs	r2, #0
 8009670:	4b5f      	ldr	r3, [pc, #380]	; (80097f0 <_strtod_l+0xb18>)
 8009672:	f7f6 ff31 	bl	80004d8 <__aeabi_dmul>
 8009676:	4605      	mov	r5, r0
 8009678:	460f      	mov	r7, r1
 800967a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800967e:	9506      	str	r5, [sp, #24]
 8009680:	9307      	str	r3, [sp, #28]
 8009682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009686:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800968a:	4b56      	ldr	r3, [pc, #344]	; (80097e4 <_strtod_l+0xb0c>)
 800968c:	4a55      	ldr	r2, [pc, #340]	; (80097e4 <_strtod_l+0xb0c>)
 800968e:	ea0a 0303 	and.w	r3, sl, r3
 8009692:	9313      	str	r3, [sp, #76]	; 0x4c
 8009694:	4b57      	ldr	r3, [pc, #348]	; (80097f4 <_strtod_l+0xb1c>)
 8009696:	ea0a 0202 	and.w	r2, sl, r2
 800969a:	429a      	cmp	r2, r3
 800969c:	f040 80b0 	bne.w	8009800 <_strtod_l+0xb28>
 80096a0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f002 ff6a 	bl	800c580 <__ulp>
 80096ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096b0:	f7f6 ff12 	bl	80004d8 <__aeabi_dmul>
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	f7f6 fd58 	bl	800016c <__adddf3>
 80096bc:	f8df a124 	ldr.w	sl, [pc, #292]	; 80097e4 <_strtod_l+0xb0c>
 80096c0:	4a4d      	ldr	r2, [pc, #308]	; (80097f8 <_strtod_l+0xb20>)
 80096c2:	ea01 0a0a 	and.w	sl, r1, sl
 80096c6:	4592      	cmp	sl, r2
 80096c8:	4680      	mov	r8, r0
 80096ca:	d948      	bls.n	800975e <_strtod_l+0xa86>
 80096cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096ce:	4b46      	ldr	r3, [pc, #280]	; (80097e8 <_strtod_l+0xb10>)
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d103      	bne.n	80096dc <_strtod_l+0xa04>
 80096d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d6:	3301      	adds	r3, #1
 80096d8:	f43f ad3c 	beq.w	8009154 <_strtod_l+0x47c>
 80096dc:	f04f 38ff 	mov.w	r8, #4294967295
 80096e0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80097e8 <_strtod_l+0xb10>
 80096e4:	4620      	mov	r0, r4
 80096e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096e8:	f002 fc1e 	bl	800bf28 <_Bfree>
 80096ec:	4620      	mov	r0, r4
 80096ee:	9908      	ldr	r1, [sp, #32]
 80096f0:	f002 fc1a 	bl	800bf28 <_Bfree>
 80096f4:	4659      	mov	r1, fp
 80096f6:	4620      	mov	r0, r4
 80096f8:	f002 fc16 	bl	800bf28 <_Bfree>
 80096fc:	4631      	mov	r1, r6
 80096fe:	4620      	mov	r0, r4
 8009700:	f002 fc12 	bl	800bf28 <_Bfree>
 8009704:	e605      	b.n	8009312 <_strtod_l+0x63a>
 8009706:	f1b8 0f01 	cmp.w	r8, #1
 800970a:	d103      	bne.n	8009714 <_strtod_l+0xa3c>
 800970c:	f1b9 0f00 	cmp.w	r9, #0
 8009710:	f43f ad91 	beq.w	8009236 <_strtod_l+0x55e>
 8009714:	2200      	movs	r2, #0
 8009716:	4b39      	ldr	r3, [pc, #228]	; (80097fc <_strtod_l+0xb24>)
 8009718:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800971a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800971e:	e016      	b.n	800974e <_strtod_l+0xa76>
 8009720:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009722:	4f33      	ldr	r7, [pc, #204]	; (80097f0 <_strtod_l+0xb18>)
 8009724:	e7a9      	b.n	800967a <_strtod_l+0x9a2>
 8009726:	4b32      	ldr	r3, [pc, #200]	; (80097f0 <_strtod_l+0xb18>)
 8009728:	2200      	movs	r2, #0
 800972a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800972e:	f7f6 fed3 	bl	80004d8 <__aeabi_dmul>
 8009732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009734:	4605      	mov	r5, r0
 8009736:	460f      	mov	r7, r1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d09e      	beq.n	800967a <_strtod_l+0x9a2>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009744:	e79d      	b.n	8009682 <_strtod_l+0x9aa>
 8009746:	2200      	movs	r2, #0
 8009748:	4b28      	ldr	r3, [pc, #160]	; (80097ec <_strtod_l+0xb14>)
 800974a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800974e:	4f27      	ldr	r7, [pc, #156]	; (80097ec <_strtod_l+0xb14>)
 8009750:	e797      	b.n	8009682 <_strtod_l+0x9aa>
 8009752:	2200      	movs	r2, #0
 8009754:	4b29      	ldr	r3, [pc, #164]	; (80097fc <_strtod_l+0xb24>)
 8009756:	4645      	mov	r5, r8
 8009758:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800975c:	e7f7      	b.n	800974e <_strtod_l+0xa76>
 800975e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009762:	9b05      	ldr	r3, [sp, #20]
 8009764:	46ca      	mov	sl, r9
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1bc      	bne.n	80096e4 <_strtod_l+0xa0c>
 800976a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800976e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009770:	0d1b      	lsrs	r3, r3, #20
 8009772:	051b      	lsls	r3, r3, #20
 8009774:	429a      	cmp	r2, r3
 8009776:	d1b5      	bne.n	80096e4 <_strtod_l+0xa0c>
 8009778:	4628      	mov	r0, r5
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 fd24 	bl	80011c8 <__aeabi_d2lz>
 8009780:	f7f6 fe7c 	bl	800047c <__aeabi_l2d>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4628      	mov	r0, r5
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 fcec 	bl	8000168 <__aeabi_dsub>
 8009790:	460b      	mov	r3, r1
 8009792:	4602      	mov	r2, r0
 8009794:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009798:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979e:	ea4a 0a08 	orr.w	sl, sl, r8
 80097a2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80097a6:	d06c      	beq.n	8009882 <_strtod_l+0xbaa>
 80097a8:	a309      	add	r3, pc, #36	; (adr r3, 80097d0 <_strtod_l+0xaf8>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f7 f905 	bl	80009bc <__aeabi_dcmplt>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f47f acd8 	bne.w	8009168 <_strtod_l+0x490>
 80097b8:	a307      	add	r3, pc, #28	; (adr r3, 80097d8 <_strtod_l+0xb00>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097c2:	f7f7 f919 	bl	80009f8 <__aeabi_dcmpgt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d08c      	beq.n	80096e4 <_strtod_l+0xa0c>
 80097ca:	e4cd      	b.n	8009168 <_strtod_l+0x490>
 80097cc:	f3af 8000 	nop.w
 80097d0:	94a03595 	.word	0x94a03595
 80097d4:	3fdfffff 	.word	0x3fdfffff
 80097d8:	35afe535 	.word	0x35afe535
 80097dc:	3fe00000 	.word	0x3fe00000
 80097e0:	000fffff 	.word	0x000fffff
 80097e4:	7ff00000 	.word	0x7ff00000
 80097e8:	7fefffff 	.word	0x7fefffff
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	3fe00000 	.word	0x3fe00000
 80097f4:	7fe00000 	.word	0x7fe00000
 80097f8:	7c9fffff 	.word	0x7c9fffff
 80097fc:	bff00000 	.word	0xbff00000
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	b333      	cbz	r3, 8009852 <_strtod_l+0xb7a>
 8009804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009806:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800980a:	d822      	bhi.n	8009852 <_strtod_l+0xb7a>
 800980c:	a328      	add	r3, pc, #160	; (adr r3, 80098b0 <_strtod_l+0xbd8>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	4628      	mov	r0, r5
 8009814:	4639      	mov	r1, r7
 8009816:	f7f7 f8db 	bl	80009d0 <__aeabi_dcmple>
 800981a:	b1a0      	cbz	r0, 8009846 <_strtod_l+0xb6e>
 800981c:	4639      	mov	r1, r7
 800981e:	4628      	mov	r0, r5
 8009820:	f7f7 f932 	bl	8000a88 <__aeabi_d2uiz>
 8009824:	2801      	cmp	r0, #1
 8009826:	bf38      	it	cc
 8009828:	2001      	movcc	r0, #1
 800982a:	f7f6 fddb 	bl	80003e4 <__aeabi_ui2d>
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	4605      	mov	r5, r0
 8009832:	460f      	mov	r7, r1
 8009834:	bb03      	cbnz	r3, 8009878 <_strtod_l+0xba0>
 8009836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800983a:	9014      	str	r0, [sp, #80]	; 0x50
 800983c:	9315      	str	r3, [sp, #84]	; 0x54
 800983e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009842:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800984a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	9311      	str	r3, [sp, #68]	; 0x44
 8009852:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009854:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009856:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800985a:	f002 fe91 	bl	800c580 <__ulp>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4640      	mov	r0, r8
 8009864:	4649      	mov	r1, r9
 8009866:	f7f6 fe37 	bl	80004d8 <__aeabi_dmul>
 800986a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800986e:	f7f6 fc7d 	bl	800016c <__adddf3>
 8009872:	4680      	mov	r8, r0
 8009874:	4689      	mov	r9, r1
 8009876:	e774      	b.n	8009762 <_strtod_l+0xa8a>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009880:	e7dd      	b.n	800983e <_strtod_l+0xb66>
 8009882:	a30d      	add	r3, pc, #52	; (adr r3, 80098b8 <_strtod_l+0xbe0>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f7 f898 	bl	80009bc <__aeabi_dcmplt>
 800988c:	e79b      	b.n	80097c6 <_strtod_l+0xaee>
 800988e:	2300      	movs	r3, #0
 8009890:	930e      	str	r3, [sp, #56]	; 0x38
 8009892:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009894:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f7ff ba5b 	b.w	8008d52 <_strtod_l+0x7a>
 800989c:	2a65      	cmp	r2, #101	; 0x65
 800989e:	f43f ab52 	beq.w	8008f46 <_strtod_l+0x26e>
 80098a2:	2a45      	cmp	r2, #69	; 0x45
 80098a4:	f43f ab4f 	beq.w	8008f46 <_strtod_l+0x26e>
 80098a8:	2301      	movs	r3, #1
 80098aa:	f7ff bb87 	b.w	8008fbc <_strtod_l+0x2e4>
 80098ae:	bf00      	nop
 80098b0:	ffc00000 	.word	0xffc00000
 80098b4:	41dfffff 	.word	0x41dfffff
 80098b8:	94a03595 	.word	0x94a03595
 80098bc:	3fcfffff 	.word	0x3fcfffff

080098c0 <strtof>:
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	4f24      	ldr	r7, [pc, #144]	; (8009958 <strtof+0x98>)
 80098c6:	460a      	mov	r2, r1
 80098c8:	4b24      	ldr	r3, [pc, #144]	; (800995c <strtof+0x9c>)
 80098ca:	4601      	mov	r1, r0
 80098cc:	6838      	ldr	r0, [r7, #0]
 80098ce:	f7ff fa03 	bl	8008cd8 <_strtod_l>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4606      	mov	r6, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	f7f7 f897 	bl	8000a0c <__aeabi_dcmpun>
 80098de:	b168      	cbz	r0, 80098fc <strtof+0x3c>
 80098e0:	2c00      	cmp	r4, #0
 80098e2:	481f      	ldr	r0, [pc, #124]	; (8009960 <strtof+0xa0>)
 80098e4:	da06      	bge.n	80098f4 <strtof+0x34>
 80098e6:	f7fe ff35 	bl	8008754 <nanf>
 80098ea:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80098ee:	4628      	mov	r0, r5
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	f7fe bf2c 	b.w	8008754 <nanf>
 80098fc:	4621      	mov	r1, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	f7f7 f8e2 	bl	8000ac8 <__aeabi_d2f>
 8009904:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8009908:	4605      	mov	r5, r0
 800990a:	4916      	ldr	r1, [pc, #88]	; (8009964 <strtof+0xa4>)
 800990c:	4640      	mov	r0, r8
 800990e:	f7f7 fbff 	bl	8001110 <__aeabi_fcmpun>
 8009912:	b9b0      	cbnz	r0, 8009942 <strtof+0x82>
 8009914:	4640      	mov	r0, r8
 8009916:	4913      	ldr	r1, [pc, #76]	; (8009964 <strtof+0xa4>)
 8009918:	f7f7 fbdc 	bl	80010d4 <__aeabi_fcmple>
 800991c:	b988      	cbnz	r0, 8009942 <strtof+0x82>
 800991e:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8009922:	f04f 32ff 	mov.w	r2, #4294967295
 8009926:	4630      	mov	r0, r6
 8009928:	4641      	mov	r1, r8
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <strtof+0xa8>)
 800992c:	f7f7 f86e 	bl	8000a0c <__aeabi_dcmpun>
 8009930:	b970      	cbnz	r0, 8009950 <strtof+0x90>
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	4630      	mov	r0, r6
 8009938:	4641      	mov	r1, r8
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <strtof+0xa8>)
 800993c:	f7f7 f848 	bl	80009d0 <__aeabi_dcmple>
 8009940:	b930      	cbnz	r0, 8009950 <strtof+0x90>
 8009942:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8009946:	d1d2      	bne.n	80098ee <strtof+0x2e>
 8009948:	4b08      	ldr	r3, [pc, #32]	; (800996c <strtof+0xac>)
 800994a:	4023      	ands	r3, r4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0ce      	beq.n	80098ee <strtof+0x2e>
 8009950:	2222      	movs	r2, #34	; 0x22
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	e7ca      	b.n	80098ee <strtof+0x2e>
 8009958:	200001dc 	.word	0x200001dc
 800995c:	20000024 	.word	0x20000024
 8009960:	0800d7e0 	.word	0x0800d7e0
 8009964:	7f7fffff 	.word	0x7f7fffff
 8009968:	7fefffff 	.word	0x7fefffff
 800996c:	7ff00000 	.word	0x7ff00000

08009970 <_strtol_l.constprop.0>:
 8009970:	2b01      	cmp	r3, #1
 8009972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009976:	4686      	mov	lr, r0
 8009978:	4690      	mov	r8, r2
 800997a:	d001      	beq.n	8009980 <_strtol_l.constprop.0+0x10>
 800997c:	2b24      	cmp	r3, #36	; 0x24
 800997e:	d906      	bls.n	800998e <_strtol_l.constprop.0+0x1e>
 8009980:	f001 f802 	bl	800a988 <__errno>
 8009984:	2316      	movs	r3, #22
 8009986:	6003      	str	r3, [r0, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998e:	460d      	mov	r5, r1
 8009990:	4835      	ldr	r0, [pc, #212]	; (8009a68 <_strtol_l.constprop.0+0xf8>)
 8009992:	462a      	mov	r2, r5
 8009994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009998:	5d06      	ldrb	r6, [r0, r4]
 800999a:	f016 0608 	ands.w	r6, r6, #8
 800999e:	d1f8      	bne.n	8009992 <_strtol_l.constprop.0+0x22>
 80099a0:	2c2d      	cmp	r4, #45	; 0x2d
 80099a2:	d12e      	bne.n	8009a02 <_strtol_l.constprop.0+0x92>
 80099a4:	2601      	movs	r6, #1
 80099a6:	782c      	ldrb	r4, [r5, #0]
 80099a8:	1c95      	adds	r5, r2, #2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d057      	beq.n	8009a5e <_strtol_l.constprop.0+0xee>
 80099ae:	2b10      	cmp	r3, #16
 80099b0:	d109      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 80099b2:	2c30      	cmp	r4, #48	; 0x30
 80099b4:	d107      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 80099b6:	782a      	ldrb	r2, [r5, #0]
 80099b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80099bc:	2a58      	cmp	r2, #88	; 0x58
 80099be:	d149      	bne.n	8009a54 <_strtol_l.constprop.0+0xe4>
 80099c0:	2310      	movs	r3, #16
 80099c2:	786c      	ldrb	r4, [r5, #1]
 80099c4:	3502      	adds	r5, #2
 80099c6:	2200      	movs	r2, #0
 80099c8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80099cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099d0:	fbbc f9f3 	udiv	r9, ip, r3
 80099d4:	4610      	mov	r0, r2
 80099d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80099da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80099de:	2f09      	cmp	r7, #9
 80099e0:	d814      	bhi.n	8009a0c <_strtol_l.constprop.0+0x9c>
 80099e2:	463c      	mov	r4, r7
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	dd20      	ble.n	8009a2a <_strtol_l.constprop.0+0xba>
 80099e8:	1c57      	adds	r7, r2, #1
 80099ea:	d007      	beq.n	80099fc <_strtol_l.constprop.0+0x8c>
 80099ec:	4581      	cmp	r9, r0
 80099ee:	d319      	bcc.n	8009a24 <_strtol_l.constprop.0+0xb4>
 80099f0:	d101      	bne.n	80099f6 <_strtol_l.constprop.0+0x86>
 80099f2:	45a2      	cmp	sl, r4
 80099f4:	db16      	blt.n	8009a24 <_strtol_l.constprop.0+0xb4>
 80099f6:	2201      	movs	r2, #1
 80099f8:	fb00 4003 	mla	r0, r0, r3, r4
 80099fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a00:	e7eb      	b.n	80099da <_strtol_l.constprop.0+0x6a>
 8009a02:	2c2b      	cmp	r4, #43	; 0x2b
 8009a04:	bf04      	itt	eq
 8009a06:	782c      	ldrbeq	r4, [r5, #0]
 8009a08:	1c95      	addeq	r5, r2, #2
 8009a0a:	e7ce      	b.n	80099aa <_strtol_l.constprop.0+0x3a>
 8009a0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a10:	2f19      	cmp	r7, #25
 8009a12:	d801      	bhi.n	8009a18 <_strtol_l.constprop.0+0xa8>
 8009a14:	3c37      	subs	r4, #55	; 0x37
 8009a16:	e7e5      	b.n	80099e4 <_strtol_l.constprop.0+0x74>
 8009a18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a1c:	2f19      	cmp	r7, #25
 8009a1e:	d804      	bhi.n	8009a2a <_strtol_l.constprop.0+0xba>
 8009a20:	3c57      	subs	r4, #87	; 0x57
 8009a22:	e7df      	b.n	80099e4 <_strtol_l.constprop.0+0x74>
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	e7e8      	b.n	80099fc <_strtol_l.constprop.0+0x8c>
 8009a2a:	1c53      	adds	r3, r2, #1
 8009a2c:	d108      	bne.n	8009a40 <_strtol_l.constprop.0+0xd0>
 8009a2e:	2322      	movs	r3, #34	; 0x22
 8009a30:	4660      	mov	r0, ip
 8009a32:	f8ce 3000 	str.w	r3, [lr]
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	d0a6      	beq.n	800998a <_strtol_l.constprop.0+0x1a>
 8009a3c:	1e69      	subs	r1, r5, #1
 8009a3e:	e006      	b.n	8009a4e <_strtol_l.constprop.0+0xde>
 8009a40:	b106      	cbz	r6, 8009a44 <_strtol_l.constprop.0+0xd4>
 8009a42:	4240      	negs	r0, r0
 8009a44:	f1b8 0f00 	cmp.w	r8, #0
 8009a48:	d09f      	beq.n	800998a <_strtol_l.constprop.0+0x1a>
 8009a4a:	2a00      	cmp	r2, #0
 8009a4c:	d1f6      	bne.n	8009a3c <_strtol_l.constprop.0+0xcc>
 8009a4e:	f8c8 1000 	str.w	r1, [r8]
 8009a52:	e79a      	b.n	800998a <_strtol_l.constprop.0+0x1a>
 8009a54:	2430      	movs	r4, #48	; 0x30
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1b5      	bne.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a5a:	2308      	movs	r3, #8
 8009a5c:	e7b3      	b.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a5e:	2c30      	cmp	r4, #48	; 0x30
 8009a60:	d0a9      	beq.n	80099b6 <_strtol_l.constprop.0+0x46>
 8009a62:	230a      	movs	r3, #10
 8009a64:	e7af      	b.n	80099c6 <_strtol_l.constprop.0+0x56>
 8009a66:	bf00      	nop
 8009a68:	0800d669 	.word	0x0800d669

08009a6c <strtol>:
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	460a      	mov	r2, r1
 8009a70:	4601      	mov	r1, r0
 8009a72:	4802      	ldr	r0, [pc, #8]	; (8009a7c <strtol+0x10>)
 8009a74:	6800      	ldr	r0, [r0, #0]
 8009a76:	f7ff bf7b 	b.w	8009970 <_strtol_l.constprop.0>
 8009a7a:	bf00      	nop
 8009a7c:	200001dc 	.word	0x200001dc

08009a80 <__cvt>:
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a86:	461f      	mov	r7, r3
 8009a88:	bfbb      	ittet	lt
 8009a8a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009a8e:	461f      	movlt	r7, r3
 8009a90:	2300      	movge	r3, #0
 8009a92:	232d      	movlt	r3, #45	; 0x2d
 8009a94:	b088      	sub	sp, #32
 8009a96:	4614      	mov	r4, r2
 8009a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009a9c:	7013      	strb	r3, [r2, #0]
 8009a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009aa0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009aa4:	f023 0820 	bic.w	r8, r3, #32
 8009aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009aac:	d005      	beq.n	8009aba <__cvt+0x3a>
 8009aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ab2:	d100      	bne.n	8009ab6 <__cvt+0x36>
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e000      	b.n	8009abc <__cvt+0x3c>
 8009aba:	2303      	movs	r3, #3
 8009abc:	aa07      	add	r2, sp, #28
 8009abe:	9204      	str	r2, [sp, #16]
 8009ac0:	aa06      	add	r2, sp, #24
 8009ac2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009ac6:	e9cd 3500 	strd	r3, r5, [sp]
 8009aca:	4622      	mov	r2, r4
 8009acc:	463b      	mov	r3, r7
 8009ace:	f001 f853 	bl	800ab78 <_dtoa_r>
 8009ad2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	d102      	bne.n	8009ae0 <__cvt+0x60>
 8009ada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009adc:	07db      	lsls	r3, r3, #31
 8009ade:	d522      	bpl.n	8009b26 <__cvt+0xa6>
 8009ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ae4:	eb06 0905 	add.w	r9, r6, r5
 8009ae8:	d110      	bne.n	8009b0c <__cvt+0x8c>
 8009aea:	7833      	ldrb	r3, [r6, #0]
 8009aec:	2b30      	cmp	r3, #48	; 0x30
 8009aee:	d10a      	bne.n	8009b06 <__cvt+0x86>
 8009af0:	2200      	movs	r2, #0
 8009af2:	2300      	movs	r3, #0
 8009af4:	4620      	mov	r0, r4
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8009afc:	b918      	cbnz	r0, 8009b06 <__cvt+0x86>
 8009afe:	f1c5 0501 	rsb	r5, r5, #1
 8009b02:	f8ca 5000 	str.w	r5, [sl]
 8009b06:	f8da 3000 	ldr.w	r3, [sl]
 8009b0a:	4499      	add	r9, r3
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2300      	movs	r3, #0
 8009b10:	4620      	mov	r0, r4
 8009b12:	4639      	mov	r1, r7
 8009b14:	f7f6 ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8009b18:	b108      	cbz	r0, 8009b1e <__cvt+0x9e>
 8009b1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8009b1e:	2230      	movs	r2, #48	; 0x30
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	454b      	cmp	r3, r9
 8009b24:	d307      	bcc.n	8009b36 <__cvt+0xb6>
 8009b26:	4630      	mov	r0, r6
 8009b28:	9b07      	ldr	r3, [sp, #28]
 8009b2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b2c:	1b9b      	subs	r3, r3, r6
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	b008      	add	sp, #32
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	1c59      	adds	r1, r3, #1
 8009b38:	9107      	str	r1, [sp, #28]
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e7f0      	b.n	8009b20 <__cvt+0xa0>

08009b3e <__exponent>:
 8009b3e:	4603      	mov	r3, r0
 8009b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b42:	2900      	cmp	r1, #0
 8009b44:	f803 2b02 	strb.w	r2, [r3], #2
 8009b48:	bfb6      	itet	lt
 8009b4a:	222d      	movlt	r2, #45	; 0x2d
 8009b4c:	222b      	movge	r2, #43	; 0x2b
 8009b4e:	4249      	neglt	r1, r1
 8009b50:	2909      	cmp	r1, #9
 8009b52:	7042      	strb	r2, [r0, #1]
 8009b54:	dd2a      	ble.n	8009bac <__exponent+0x6e>
 8009b56:	f10d 0207 	add.w	r2, sp, #7
 8009b5a:	4617      	mov	r7, r2
 8009b5c:	260a      	movs	r6, #10
 8009b5e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b62:	4694      	mov	ip, r2
 8009b64:	fb06 1415 	mls	r4, r6, r5, r1
 8009b68:	3430      	adds	r4, #48	; 0x30
 8009b6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009b6e:	460c      	mov	r4, r1
 8009b70:	2c63      	cmp	r4, #99	; 0x63
 8009b72:	4629      	mov	r1, r5
 8009b74:	f102 32ff 	add.w	r2, r2, #4294967295
 8009b78:	dcf1      	bgt.n	8009b5e <__exponent+0x20>
 8009b7a:	3130      	adds	r1, #48	; 0x30
 8009b7c:	f1ac 0402 	sub.w	r4, ip, #2
 8009b80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009b84:	4622      	mov	r2, r4
 8009b86:	1c41      	adds	r1, r0, #1
 8009b88:	42ba      	cmp	r2, r7
 8009b8a:	d30a      	bcc.n	8009ba2 <__exponent+0x64>
 8009b8c:	f10d 0209 	add.w	r2, sp, #9
 8009b90:	eba2 020c 	sub.w	r2, r2, ip
 8009b94:	42bc      	cmp	r4, r7
 8009b96:	bf88      	it	hi
 8009b98:	2200      	movhi	r2, #0
 8009b9a:	4413      	add	r3, r2
 8009b9c:	1a18      	subs	r0, r3, r0
 8009b9e:	b003      	add	sp, #12
 8009ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ba6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009baa:	e7ed      	b.n	8009b88 <__exponent+0x4a>
 8009bac:	2330      	movs	r3, #48	; 0x30
 8009bae:	3130      	adds	r1, #48	; 0x30
 8009bb0:	7083      	strb	r3, [r0, #2]
 8009bb2:	70c1      	strb	r1, [r0, #3]
 8009bb4:	1d03      	adds	r3, r0, #4
 8009bb6:	e7f1      	b.n	8009b9c <__exponent+0x5e>

08009bb8 <_printf_float>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	b091      	sub	sp, #68	; 0x44
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	4605      	mov	r5, r0
 8009bca:	f000 fe6f 	bl	800a8ac <_localeconv_r>
 8009bce:	6803      	ldr	r3, [r0, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd4:	f7f6 fabc 	bl	8000150 <strlen>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	930e      	str	r3, [sp, #56]	; 0x38
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	900a      	str	r0, [sp, #40]	; 0x28
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	f103 0208 	add.w	r2, r3, #8
 8009bec:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bf4:	f8c8 2000 	str.w	r2, [r8]
 8009bf8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	4643      	mov	r3, r8
 8009c00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c04:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0e:	4650      	mov	r0, sl
 8009c10:	4b9c      	ldr	r3, [pc, #624]	; (8009e84 <_printf_float+0x2cc>)
 8009c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c14:	f7f6 fefa 	bl	8000a0c <__aeabi_dcmpun>
 8009c18:	bb70      	cbnz	r0, 8009c78 <_printf_float+0xc0>
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	4650      	mov	r0, sl
 8009c20:	4b98      	ldr	r3, [pc, #608]	; (8009e84 <_printf_float+0x2cc>)
 8009c22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c24:	f7f6 fed4 	bl	80009d0 <__aeabi_dcmple>
 8009c28:	bb30      	cbnz	r0, 8009c78 <_printf_float+0xc0>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4650      	mov	r0, sl
 8009c30:	4641      	mov	r1, r8
 8009c32:	f7f6 fec3 	bl	80009bc <__aeabi_dcmplt>
 8009c36:	b110      	cbz	r0, 8009c3e <_printf_float+0x86>
 8009c38:	232d      	movs	r3, #45	; 0x2d
 8009c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3e:	4a92      	ldr	r2, [pc, #584]	; (8009e88 <_printf_float+0x2d0>)
 8009c40:	4b92      	ldr	r3, [pc, #584]	; (8009e8c <_printf_float+0x2d4>)
 8009c42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009c46:	bf94      	ite	ls
 8009c48:	4690      	movls	r8, r2
 8009c4a:	4698      	movhi	r8, r3
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	f04f 0a00 	mov.w	sl, #0
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	f02b 0304 	bic.w	r3, fp, #4
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	4633      	mov	r3, r6
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	9700      	str	r7, [sp, #0]
 8009c62:	aa0f      	add	r2, sp, #60	; 0x3c
 8009c64:	f000 f9d6 	bl	800a014 <_printf_common>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f040 8090 	bne.w	8009d8e <_printf_float+0x1d6>
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	b011      	add	sp, #68	; 0x44
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	4652      	mov	r2, sl
 8009c7a:	4643      	mov	r3, r8
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	4641      	mov	r1, r8
 8009c80:	f7f6 fec4 	bl	8000a0c <__aeabi_dcmpun>
 8009c84:	b148      	cbz	r0, 8009c9a <_printf_float+0xe2>
 8009c86:	f1b8 0f00 	cmp.w	r8, #0
 8009c8a:	bfb8      	it	lt
 8009c8c:	232d      	movlt	r3, #45	; 0x2d
 8009c8e:	4a80      	ldr	r2, [pc, #512]	; (8009e90 <_printf_float+0x2d8>)
 8009c90:	bfb8      	it	lt
 8009c92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c96:	4b7f      	ldr	r3, [pc, #508]	; (8009e94 <_printf_float+0x2dc>)
 8009c98:	e7d3      	b.n	8009c42 <_printf_float+0x8a>
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	d142      	bne.n	8009d2a <_printf_float+0x172>
 8009ca4:	2306      	movs	r3, #6
 8009ca6:	6063      	str	r3, [r4, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	9206      	str	r2, [sp, #24]
 8009cac:	aa0e      	add	r2, sp, #56	; 0x38
 8009cae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009cb2:	aa0d      	add	r2, sp, #52	; 0x34
 8009cb4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009cb8:	9203      	str	r2, [sp, #12]
 8009cba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009cbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	6863      	ldr	r3, [r4, #4]
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4628      	mov	r0, r5
 8009ccc:	4643      	mov	r3, r8
 8009cce:	910b      	str	r1, [sp, #44]	; 0x2c
 8009cd0:	f7ff fed6 	bl	8009a80 <__cvt>
 8009cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	2947      	cmp	r1, #71	; 0x47
 8009cda:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cdc:	d108      	bne.n	8009cf0 <_printf_float+0x138>
 8009cde:	1cc8      	adds	r0, r1, #3
 8009ce0:	db02      	blt.n	8009ce8 <_printf_float+0x130>
 8009ce2:	6863      	ldr	r3, [r4, #4]
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	dd40      	ble.n	8009d6a <_printf_float+0x1b2>
 8009ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8009cec:	fa5f f989 	uxtb.w	r9, r9
 8009cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cf4:	d81f      	bhi.n	8009d36 <_printf_float+0x17e>
 8009cf6:	464a      	mov	r2, r9
 8009cf8:	3901      	subs	r1, #1
 8009cfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cfe:	910d      	str	r1, [sp, #52]	; 0x34
 8009d00:	f7ff ff1d 	bl	8009b3e <__exponent>
 8009d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d06:	4682      	mov	sl, r0
 8009d08:	1813      	adds	r3, r2, r0
 8009d0a:	2a01      	cmp	r2, #1
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	dc02      	bgt.n	8009d16 <_printf_float+0x15e>
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	07d2      	lsls	r2, r2, #31
 8009d14:	d501      	bpl.n	8009d1a <_printf_float+0x162>
 8009d16:	3301      	adds	r3, #1
 8009d18:	6123      	str	r3, [r4, #16]
 8009d1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d09b      	beq.n	8009c5a <_printf_float+0xa2>
 8009d22:	232d      	movs	r3, #45	; 0x2d
 8009d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d28:	e797      	b.n	8009c5a <_printf_float+0xa2>
 8009d2a:	2947      	cmp	r1, #71	; 0x47
 8009d2c:	d1bc      	bne.n	8009ca8 <_printf_float+0xf0>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1ba      	bne.n	8009ca8 <_printf_float+0xf0>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e7b7      	b.n	8009ca6 <_printf_float+0xee>
 8009d36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009d3a:	d118      	bne.n	8009d6e <_printf_float+0x1b6>
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	dd0b      	ble.n	8009d5a <_printf_float+0x1a2>
 8009d42:	6121      	str	r1, [r4, #16]
 8009d44:	b913      	cbnz	r3, 8009d4c <_printf_float+0x194>
 8009d46:	6822      	ldr	r2, [r4, #0]
 8009d48:	07d0      	lsls	r0, r2, #31
 8009d4a:	d502      	bpl.n	8009d52 <_printf_float+0x19a>
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	440b      	add	r3, r1
 8009d50:	6123      	str	r3, [r4, #16]
 8009d52:	f04f 0a00 	mov.w	sl, #0
 8009d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d58:	e7df      	b.n	8009d1a <_printf_float+0x162>
 8009d5a:	b913      	cbnz	r3, 8009d62 <_printf_float+0x1aa>
 8009d5c:	6822      	ldr	r2, [r4, #0]
 8009d5e:	07d2      	lsls	r2, r2, #31
 8009d60:	d501      	bpl.n	8009d66 <_printf_float+0x1ae>
 8009d62:	3302      	adds	r3, #2
 8009d64:	e7f4      	b.n	8009d50 <_printf_float+0x198>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e7f2      	b.n	8009d50 <_printf_float+0x198>
 8009d6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d70:	4299      	cmp	r1, r3
 8009d72:	db05      	blt.n	8009d80 <_printf_float+0x1c8>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	6121      	str	r1, [r4, #16]
 8009d78:	07d8      	lsls	r0, r3, #31
 8009d7a:	d5ea      	bpl.n	8009d52 <_printf_float+0x19a>
 8009d7c:	1c4b      	adds	r3, r1, #1
 8009d7e:	e7e7      	b.n	8009d50 <_printf_float+0x198>
 8009d80:	2900      	cmp	r1, #0
 8009d82:	bfcc      	ite	gt
 8009d84:	2201      	movgt	r2, #1
 8009d86:	f1c1 0202 	rsble	r2, r1, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	e7e0      	b.n	8009d50 <_printf_float+0x198>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	055a      	lsls	r2, r3, #21
 8009d92:	d407      	bmi.n	8009da4 <_printf_float+0x1ec>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	4642      	mov	r2, r8
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d12b      	bne.n	8009dfa <_printf_float+0x242>
 8009da2:	e764      	b.n	8009c6e <_printf_float+0xb6>
 8009da4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009da8:	f240 80dd 	bls.w	8009f66 <_printf_float+0x3ae>
 8009dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009db0:	2200      	movs	r2, #0
 8009db2:	2300      	movs	r3, #0
 8009db4:	f7f6 fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d033      	beq.n	8009e24 <_printf_float+0x26c>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	4a35      	ldr	r2, [pc, #212]	; (8009e98 <_printf_float+0x2e0>)
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f43f af51 	beq.w	8009c6e <_printf_float+0xb6>
 8009dcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	db02      	blt.n	8009dda <_printf_float+0x222>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	07d8      	lsls	r0, r3, #31
 8009dd8:	d50f      	bpl.n	8009dfa <_printf_float+0x242>
 8009dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	f43f af42 	beq.w	8009c6e <_printf_float+0xb6>
 8009dea:	f04f 0800 	mov.w	r8, #0
 8009dee:	f104 091a 	add.w	r9, r4, #26
 8009df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df4:	3b01      	subs	r3, #1
 8009df6:	4543      	cmp	r3, r8
 8009df8:	dc09      	bgt.n	8009e0e <_printf_float+0x256>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	079b      	lsls	r3, r3, #30
 8009dfe:	f100 8104 	bmi.w	800a00a <_printf_float+0x452>
 8009e02:	68e0      	ldr	r0, [r4, #12]
 8009e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e06:	4298      	cmp	r0, r3
 8009e08:	bfb8      	it	lt
 8009e0a:	4618      	movlt	r0, r3
 8009e0c:	e731      	b.n	8009c72 <_printf_float+0xba>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	464a      	mov	r2, r9
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f af28 	beq.w	8009c6e <_printf_float+0xb6>
 8009e1e:	f108 0801 	add.w	r8, r8, #1
 8009e22:	e7e6      	b.n	8009df2 <_printf_float+0x23a>
 8009e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	dc38      	bgt.n	8009e9c <_printf_float+0x2e4>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	4a19      	ldr	r2, [pc, #100]	; (8009e98 <_printf_float+0x2e0>)
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f af1a 	beq.w	8009c6e <_printf_float+0xb6>
 8009e3a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	d102      	bne.n	8009e48 <_printf_float+0x290>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	07d9      	lsls	r1, r3, #31
 8009e46:	d5d8      	bpl.n	8009dfa <_printf_float+0x242>
 8009e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f af0b 	beq.w	8009c6e <_printf_float+0xb6>
 8009e58:	f04f 0900 	mov.w	r9, #0
 8009e5c:	f104 0a1a 	add.w	sl, r4, #26
 8009e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e62:	425b      	negs	r3, r3
 8009e64:	454b      	cmp	r3, r9
 8009e66:	dc01      	bgt.n	8009e6c <_printf_float+0x2b4>
 8009e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e6a:	e794      	b.n	8009d96 <_printf_float+0x1de>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4652      	mov	r2, sl
 8009e70:	4631      	mov	r1, r6
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	f43f aef9 	beq.w	8009c6e <_printf_float+0xb6>
 8009e7c:	f109 0901 	add.w	r9, r9, #1
 8009e80:	e7ee      	b.n	8009e60 <_printf_float+0x2a8>
 8009e82:	bf00      	nop
 8009e84:	7fefffff 	.word	0x7fefffff
 8009e88:	0800d769 	.word	0x0800d769
 8009e8c:	0800d76d 	.word	0x0800d76d
 8009e90:	0800d771 	.word	0x0800d771
 8009e94:	0800d775 	.word	0x0800d775
 8009e98:	0800d779 	.word	0x0800d779
 8009e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	bfa8      	it	ge
 8009ea4:	461a      	movge	r2, r3
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	4691      	mov	r9, r2
 8009eaa:	dc37      	bgt.n	8009f1c <_printf_float+0x364>
 8009eac:	f04f 0b00 	mov.w	fp, #0
 8009eb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eb4:	f104 021a 	add.w	r2, r4, #26
 8009eb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ebc:	ebaa 0309 	sub.w	r3, sl, r9
 8009ec0:	455b      	cmp	r3, fp
 8009ec2:	dc33      	bgt.n	8009f2c <_printf_float+0x374>
 8009ec4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	db3b      	blt.n	8009f44 <_printf_float+0x38c>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	07da      	lsls	r2, r3, #31
 8009ed0:	d438      	bmi.n	8009f44 <_printf_float+0x38c>
 8009ed2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009ed6:	eba2 0903 	sub.w	r9, r2, r3
 8009eda:	eba2 020a 	sub.w	r2, r2, sl
 8009ede:	4591      	cmp	r9, r2
 8009ee0:	bfa8      	it	ge
 8009ee2:	4691      	movge	r9, r2
 8009ee4:	f1b9 0f00 	cmp.w	r9, #0
 8009ee8:	dc34      	bgt.n	8009f54 <_printf_float+0x39c>
 8009eea:	f04f 0800 	mov.w	r8, #0
 8009eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ef2:	f104 0a1a 	add.w	sl, r4, #26
 8009ef6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	eba3 0309 	sub.w	r3, r3, r9
 8009f00:	4543      	cmp	r3, r8
 8009f02:	f77f af7a 	ble.w	8009dfa <_printf_float+0x242>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f aeac 	beq.w	8009c6e <_printf_float+0xb6>
 8009f16:	f108 0801 	add.w	r8, r8, #1
 8009f1a:	e7ec      	b.n	8009ef6 <_printf_float+0x33e>
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	4631      	mov	r1, r6
 8009f20:	4642      	mov	r2, r8
 8009f22:	4628      	mov	r0, r5
 8009f24:	47b8      	blx	r7
 8009f26:	3001      	adds	r0, #1
 8009f28:	d1c0      	bne.n	8009eac <_printf_float+0x2f4>
 8009f2a:	e6a0      	b.n	8009c6e <_printf_float+0xb6>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4628      	mov	r0, r5
 8009f32:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	f43f ae99 	beq.w	8009c6e <_printf_float+0xb6>
 8009f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f3e:	f10b 0b01 	add.w	fp, fp, #1
 8009f42:	e7b9      	b.n	8009eb8 <_printf_float+0x300>
 8009f44:	4631      	mov	r1, r6
 8009f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d1bf      	bne.n	8009ed2 <_printf_float+0x31a>
 8009f52:	e68c      	b.n	8009c6e <_printf_float+0xb6>
 8009f54:	464b      	mov	r3, r9
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	eb08 020a 	add.w	r2, r8, sl
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	d1c2      	bne.n	8009eea <_printf_float+0x332>
 8009f64:	e683      	b.n	8009c6e <_printf_float+0xb6>
 8009f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f68:	2a01      	cmp	r2, #1
 8009f6a:	dc01      	bgt.n	8009f70 <_printf_float+0x3b8>
 8009f6c:	07db      	lsls	r3, r3, #31
 8009f6e:	d539      	bpl.n	8009fe4 <_printf_float+0x42c>
 8009f70:	2301      	movs	r3, #1
 8009f72:	4642      	mov	r2, r8
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f ae77 	beq.w	8009c6e <_printf_float+0xb6>
 8009f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f84:	4631      	mov	r1, r6
 8009f86:	4628      	mov	r0, r5
 8009f88:	47b8      	blx	r7
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	f43f ae6f 	beq.w	8009c6e <_printf_float+0xb6>
 8009f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f94:	2200      	movs	r2, #0
 8009f96:	2300      	movs	r3, #0
 8009f98:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009f9c:	f7f6 fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8009fa0:	b9d8      	cbnz	r0, 8009fda <_printf_float+0x422>
 8009fa2:	f109 33ff 	add.w	r3, r9, #4294967295
 8009fa6:	f108 0201 	add.w	r2, r8, #1
 8009faa:	4631      	mov	r1, r6
 8009fac:	4628      	mov	r0, r5
 8009fae:	47b8      	blx	r7
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d10e      	bne.n	8009fd2 <_printf_float+0x41a>
 8009fb4:	e65b      	b.n	8009c6e <_printf_float+0xb6>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	464a      	mov	r2, r9
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f ae54 	beq.w	8009c6e <_printf_float+0xb6>
 8009fc6:	f108 0801 	add.w	r8, r8, #1
 8009fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	4543      	cmp	r3, r8
 8009fd0:	dcf1      	bgt.n	8009fb6 <_printf_float+0x3fe>
 8009fd2:	4653      	mov	r3, sl
 8009fd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fd8:	e6de      	b.n	8009d98 <_printf_float+0x1e0>
 8009fda:	f04f 0800 	mov.w	r8, #0
 8009fde:	f104 091a 	add.w	r9, r4, #26
 8009fe2:	e7f2      	b.n	8009fca <_printf_float+0x412>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	e7df      	b.n	8009faa <_printf_float+0x3f2>
 8009fea:	2301      	movs	r3, #1
 8009fec:	464a      	mov	r2, r9
 8009fee:	4631      	mov	r1, r6
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	47b8      	blx	r7
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	f43f ae3a 	beq.w	8009c6e <_printf_float+0xb6>
 8009ffa:	f108 0801 	add.w	r8, r8, #1
 8009ffe:	68e3      	ldr	r3, [r4, #12]
 800a000:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a002:	1a5b      	subs	r3, r3, r1
 800a004:	4543      	cmp	r3, r8
 800a006:	dcf0      	bgt.n	8009fea <_printf_float+0x432>
 800a008:	e6fb      	b.n	8009e02 <_printf_float+0x24a>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	f104 0919 	add.w	r9, r4, #25
 800a012:	e7f4      	b.n	8009ffe <_printf_float+0x446>

0800a014 <_printf_common>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	4616      	mov	r6, r2
 800a01a:	4699      	mov	r9, r3
 800a01c:	688a      	ldr	r2, [r1, #8]
 800a01e:	690b      	ldr	r3, [r1, #16]
 800a020:	4607      	mov	r7, r0
 800a022:	4293      	cmp	r3, r2
 800a024:	bfb8      	it	lt
 800a026:	4613      	movlt	r3, r2
 800a028:	6033      	str	r3, [r6, #0]
 800a02a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a02e:	460c      	mov	r4, r1
 800a030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a034:	b10a      	cbz	r2, 800a03a <_printf_common+0x26>
 800a036:	3301      	adds	r3, #1
 800a038:	6033      	str	r3, [r6, #0]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	0699      	lsls	r1, r3, #26
 800a03e:	bf42      	ittt	mi
 800a040:	6833      	ldrmi	r3, [r6, #0]
 800a042:	3302      	addmi	r3, #2
 800a044:	6033      	strmi	r3, [r6, #0]
 800a046:	6825      	ldr	r5, [r4, #0]
 800a048:	f015 0506 	ands.w	r5, r5, #6
 800a04c:	d106      	bne.n	800a05c <_printf_common+0x48>
 800a04e:	f104 0a19 	add.w	sl, r4, #25
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	6832      	ldr	r2, [r6, #0]
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dc2b      	bgt.n	800a0b4 <_printf_common+0xa0>
 800a05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a060:	1e13      	subs	r3, r2, #0
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	bf18      	it	ne
 800a066:	2301      	movne	r3, #1
 800a068:	0692      	lsls	r2, r2, #26
 800a06a:	d430      	bmi.n	800a0ce <_printf_common+0xba>
 800a06c:	4649      	mov	r1, r9
 800a06e:	4638      	mov	r0, r7
 800a070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a074:	47c0      	blx	r8
 800a076:	3001      	adds	r0, #1
 800a078:	d023      	beq.n	800a0c2 <_printf_common+0xae>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	6922      	ldr	r2, [r4, #16]
 800a07e:	f003 0306 	and.w	r3, r3, #6
 800a082:	2b04      	cmp	r3, #4
 800a084:	bf14      	ite	ne
 800a086:	2500      	movne	r5, #0
 800a088:	6833      	ldreq	r3, [r6, #0]
 800a08a:	f04f 0600 	mov.w	r6, #0
 800a08e:	bf08      	it	eq
 800a090:	68e5      	ldreq	r5, [r4, #12]
 800a092:	f104 041a 	add.w	r4, r4, #26
 800a096:	bf08      	it	eq
 800a098:	1aed      	subeq	r5, r5, r3
 800a09a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a09e:	bf08      	it	eq
 800a0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bfc4      	itt	gt
 800a0a8:	1a9b      	subgt	r3, r3, r2
 800a0aa:	18ed      	addgt	r5, r5, r3
 800a0ac:	42b5      	cmp	r5, r6
 800a0ae:	d11a      	bne.n	800a0e6 <_printf_common+0xd2>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	e008      	b.n	800a0c6 <_printf_common+0xb2>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4652      	mov	r2, sl
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c0      	blx	r8
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d103      	bne.n	800a0ca <_printf_common+0xb6>
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	3501      	adds	r5, #1
 800a0cc:	e7c1      	b.n	800a052 <_printf_common+0x3e>
 800a0ce:	2030      	movs	r0, #48	; 0x30
 800a0d0:	18e1      	adds	r1, r4, r3
 800a0d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0dc:	4422      	add	r2, r4
 800a0de:	3302      	adds	r3, #2
 800a0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e4:	e7c2      	b.n	800a06c <_printf_common+0x58>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	47c0      	blx	r8
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d0e6      	beq.n	800a0c2 <_printf_common+0xae>
 800a0f4:	3601      	adds	r6, #1
 800a0f6:	e7d9      	b.n	800a0ac <_printf_common+0x98>

0800a0f8 <_printf_i>:
 800a0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	7e0f      	ldrb	r7, [r1, #24]
 800a0fe:	4691      	mov	r9, r2
 800a100:	2f78      	cmp	r7, #120	; 0x78
 800a102:	4680      	mov	r8, r0
 800a104:	460c      	mov	r4, r1
 800a106:	469a      	mov	sl, r3
 800a108:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a10a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a10e:	d807      	bhi.n	800a120 <_printf_i+0x28>
 800a110:	2f62      	cmp	r7, #98	; 0x62
 800a112:	d80a      	bhi.n	800a12a <_printf_i+0x32>
 800a114:	2f00      	cmp	r7, #0
 800a116:	f000 80d5 	beq.w	800a2c4 <_printf_i+0x1cc>
 800a11a:	2f58      	cmp	r7, #88	; 0x58
 800a11c:	f000 80c1 	beq.w	800a2a2 <_printf_i+0x1aa>
 800a120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a128:	e03a      	b.n	800a1a0 <_printf_i+0xa8>
 800a12a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a12e:	2b15      	cmp	r3, #21
 800a130:	d8f6      	bhi.n	800a120 <_printf_i+0x28>
 800a132:	a101      	add	r1, pc, #4	; (adr r1, 800a138 <_printf_i+0x40>)
 800a134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a138:	0800a191 	.word	0x0800a191
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a121 	.word	0x0800a121
 800a144:	0800a121 	.word	0x0800a121
 800a148:	0800a121 	.word	0x0800a121
 800a14c:	0800a121 	.word	0x0800a121
 800a150:	0800a1a5 	.word	0x0800a1a5
 800a154:	0800a121 	.word	0x0800a121
 800a158:	0800a121 	.word	0x0800a121
 800a15c:	0800a121 	.word	0x0800a121
 800a160:	0800a121 	.word	0x0800a121
 800a164:	0800a2ab 	.word	0x0800a2ab
 800a168:	0800a1d1 	.word	0x0800a1d1
 800a16c:	0800a265 	.word	0x0800a265
 800a170:	0800a121 	.word	0x0800a121
 800a174:	0800a121 	.word	0x0800a121
 800a178:	0800a2cd 	.word	0x0800a2cd
 800a17c:	0800a121 	.word	0x0800a121
 800a180:	0800a1d1 	.word	0x0800a1d1
 800a184:	0800a121 	.word	0x0800a121
 800a188:	0800a121 	.word	0x0800a121
 800a18c:	0800a26d 	.word	0x0800a26d
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	1d1a      	adds	r2, r3, #4
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	602a      	str	r2, [r5, #0]
 800a198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e0a0      	b.n	800a2e6 <_printf_i+0x1ee>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	0607      	lsls	r7, r0, #24
 800a1aa:	f103 0104 	add.w	r1, r3, #4
 800a1ae:	6029      	str	r1, [r5, #0]
 800a1b0:	d501      	bpl.n	800a1b6 <_printf_i+0xbe>
 800a1b2:	681e      	ldr	r6, [r3, #0]
 800a1b4:	e003      	b.n	800a1be <_printf_i+0xc6>
 800a1b6:	0646      	lsls	r6, r0, #25
 800a1b8:	d5fb      	bpl.n	800a1b2 <_printf_i+0xba>
 800a1ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	da03      	bge.n	800a1ca <_printf_i+0xd2>
 800a1c2:	232d      	movs	r3, #45	; 0x2d
 800a1c4:	4276      	negs	r6, r6
 800a1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ca:	230a      	movs	r3, #10
 800a1cc:	4859      	ldr	r0, [pc, #356]	; (800a334 <_printf_i+0x23c>)
 800a1ce:	e012      	b.n	800a1f6 <_printf_i+0xfe>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	6820      	ldr	r0, [r4, #0]
 800a1d4:	1d19      	adds	r1, r3, #4
 800a1d6:	6029      	str	r1, [r5, #0]
 800a1d8:	0605      	lsls	r5, r0, #24
 800a1da:	d501      	bpl.n	800a1e0 <_printf_i+0xe8>
 800a1dc:	681e      	ldr	r6, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <_printf_i+0xee>
 800a1e0:	0641      	lsls	r1, r0, #25
 800a1e2:	d5fb      	bpl.n	800a1dc <_printf_i+0xe4>
 800a1e4:	881e      	ldrh	r6, [r3, #0]
 800a1e6:	2f6f      	cmp	r7, #111	; 0x6f
 800a1e8:	bf0c      	ite	eq
 800a1ea:	2308      	moveq	r3, #8
 800a1ec:	230a      	movne	r3, #10
 800a1ee:	4851      	ldr	r0, [pc, #324]	; (800a334 <_printf_i+0x23c>)
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1f6:	6865      	ldr	r5, [r4, #4]
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	bfa8      	it	ge
 800a1fc:	6821      	ldrge	r1, [r4, #0]
 800a1fe:	60a5      	str	r5, [r4, #8]
 800a200:	bfa4      	itt	ge
 800a202:	f021 0104 	bicge.w	r1, r1, #4
 800a206:	6021      	strge	r1, [r4, #0]
 800a208:	b90e      	cbnz	r6, 800a20e <_printf_i+0x116>
 800a20a:	2d00      	cmp	r5, #0
 800a20c:	d04b      	beq.n	800a2a6 <_printf_i+0x1ae>
 800a20e:	4615      	mov	r5, r2
 800a210:	fbb6 f1f3 	udiv	r1, r6, r3
 800a214:	fb03 6711 	mls	r7, r3, r1, r6
 800a218:	5dc7      	ldrb	r7, [r0, r7]
 800a21a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a21e:	4637      	mov	r7, r6
 800a220:	42bb      	cmp	r3, r7
 800a222:	460e      	mov	r6, r1
 800a224:	d9f4      	bls.n	800a210 <_printf_i+0x118>
 800a226:	2b08      	cmp	r3, #8
 800a228:	d10b      	bne.n	800a242 <_printf_i+0x14a>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	07de      	lsls	r6, r3, #31
 800a22e:	d508      	bpl.n	800a242 <_printf_i+0x14a>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	6861      	ldr	r1, [r4, #4]
 800a234:	4299      	cmp	r1, r3
 800a236:	bfde      	ittt	le
 800a238:	2330      	movle	r3, #48	; 0x30
 800a23a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a23e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a242:	1b52      	subs	r2, r2, r5
 800a244:	6122      	str	r2, [r4, #16]
 800a246:	464b      	mov	r3, r9
 800a248:	4621      	mov	r1, r4
 800a24a:	4640      	mov	r0, r8
 800a24c:	f8cd a000 	str.w	sl, [sp]
 800a250:	aa03      	add	r2, sp, #12
 800a252:	f7ff fedf 	bl	800a014 <_printf_common>
 800a256:	3001      	adds	r0, #1
 800a258:	d14a      	bne.n	800a2f0 <_printf_i+0x1f8>
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	b004      	add	sp, #16
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	f043 0320 	orr.w	r3, r3, #32
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	2778      	movs	r7, #120	; 0x78
 800a26e:	4832      	ldr	r0, [pc, #200]	; (800a338 <_printf_i+0x240>)
 800a270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	061f      	lsls	r7, r3, #24
 800a27a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a27e:	d402      	bmi.n	800a286 <_printf_i+0x18e>
 800a280:	065f      	lsls	r7, r3, #25
 800a282:	bf48      	it	mi
 800a284:	b2b6      	uxthmi	r6, r6
 800a286:	07df      	lsls	r7, r3, #31
 800a288:	bf48      	it	mi
 800a28a:	f043 0320 	orrmi.w	r3, r3, #32
 800a28e:	6029      	str	r1, [r5, #0]
 800a290:	bf48      	it	mi
 800a292:	6023      	strmi	r3, [r4, #0]
 800a294:	b91e      	cbnz	r6, 800a29e <_printf_i+0x1a6>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	f023 0320 	bic.w	r3, r3, #32
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	2310      	movs	r3, #16
 800a2a0:	e7a6      	b.n	800a1f0 <_printf_i+0xf8>
 800a2a2:	4824      	ldr	r0, [pc, #144]	; (800a334 <_printf_i+0x23c>)
 800a2a4:	e7e4      	b.n	800a270 <_printf_i+0x178>
 800a2a6:	4615      	mov	r5, r2
 800a2a8:	e7bd      	b.n	800a226 <_printf_i+0x12e>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	6826      	ldr	r6, [r4, #0]
 800a2ae:	1d18      	adds	r0, r3, #4
 800a2b0:	6961      	ldr	r1, [r4, #20]
 800a2b2:	6028      	str	r0, [r5, #0]
 800a2b4:	0635      	lsls	r5, r6, #24
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	d501      	bpl.n	800a2be <_printf_i+0x1c6>
 800a2ba:	6019      	str	r1, [r3, #0]
 800a2bc:	e002      	b.n	800a2c4 <_printf_i+0x1cc>
 800a2be:	0670      	lsls	r0, r6, #25
 800a2c0:	d5fb      	bpl.n	800a2ba <_printf_i+0x1c2>
 800a2c2:	8019      	strh	r1, [r3, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4615      	mov	r5, r2
 800a2c8:	6123      	str	r3, [r4, #16]
 800a2ca:	e7bc      	b.n	800a246 <_printf_i+0x14e>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	1d1a      	adds	r2, r3, #4
 800a2d2:	602a      	str	r2, [r5, #0]
 800a2d4:	681d      	ldr	r5, [r3, #0]
 800a2d6:	6862      	ldr	r2, [r4, #4]
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f000 fb81 	bl	800a9e0 <memchr>
 800a2de:	b108      	cbz	r0, 800a2e4 <_printf_i+0x1ec>
 800a2e0:	1b40      	subs	r0, r0, r5
 800a2e2:	6060      	str	r0, [r4, #4]
 800a2e4:	6863      	ldr	r3, [r4, #4]
 800a2e6:	6123      	str	r3, [r4, #16]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ee:	e7aa      	b.n	800a246 <_printf_i+0x14e>
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	47d0      	blx	sl
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d0ad      	beq.n	800a25a <_printf_i+0x162>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	079b      	lsls	r3, r3, #30
 800a302:	d413      	bmi.n	800a32c <_printf_i+0x234>
 800a304:	68e0      	ldr	r0, [r4, #12]
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	4298      	cmp	r0, r3
 800a30a:	bfb8      	it	lt
 800a30c:	4618      	movlt	r0, r3
 800a30e:	e7a6      	b.n	800a25e <_printf_i+0x166>
 800a310:	2301      	movs	r3, #1
 800a312:	4632      	mov	r2, r6
 800a314:	4649      	mov	r1, r9
 800a316:	4640      	mov	r0, r8
 800a318:	47d0      	blx	sl
 800a31a:	3001      	adds	r0, #1
 800a31c:	d09d      	beq.n	800a25a <_printf_i+0x162>
 800a31e:	3501      	adds	r5, #1
 800a320:	68e3      	ldr	r3, [r4, #12]
 800a322:	9903      	ldr	r1, [sp, #12]
 800a324:	1a5b      	subs	r3, r3, r1
 800a326:	42ab      	cmp	r3, r5
 800a328:	dcf2      	bgt.n	800a310 <_printf_i+0x218>
 800a32a:	e7eb      	b.n	800a304 <_printf_i+0x20c>
 800a32c:	2500      	movs	r5, #0
 800a32e:	f104 0619 	add.w	r6, r4, #25
 800a332:	e7f5      	b.n	800a320 <_printf_i+0x228>
 800a334:	0800d77b 	.word	0x0800d77b
 800a338:	0800d78c 	.word	0x0800d78c

0800a33c <std>:
 800a33c:	2300      	movs	r3, #0
 800a33e:	b510      	push	{r4, lr}
 800a340:	4604      	mov	r4, r0
 800a342:	e9c0 3300 	strd	r3, r3, [r0]
 800a346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a34a:	6083      	str	r3, [r0, #8]
 800a34c:	8181      	strh	r1, [r0, #12]
 800a34e:	6643      	str	r3, [r0, #100]	; 0x64
 800a350:	81c2      	strh	r2, [r0, #14]
 800a352:	6183      	str	r3, [r0, #24]
 800a354:	4619      	mov	r1, r3
 800a356:	2208      	movs	r2, #8
 800a358:	305c      	adds	r0, #92	; 0x5c
 800a35a:	f000 fa39 	bl	800a7d0 <memset>
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <std+0x38>)
 800a360:	6224      	str	r4, [r4, #32]
 800a362:	6263      	str	r3, [r4, #36]	; 0x24
 800a364:	4b04      	ldr	r3, [pc, #16]	; (800a378 <std+0x3c>)
 800a366:	62a3      	str	r3, [r4, #40]	; 0x28
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <std+0x40>)
 800a36a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <std+0x44>)
 800a36e:	6323      	str	r3, [r4, #48]	; 0x30
 800a370:	bd10      	pop	{r4, pc}
 800a372:	bf00      	nop
 800a374:	0800a621 	.word	0x0800a621
 800a378:	0800a643 	.word	0x0800a643
 800a37c:	0800a67b 	.word	0x0800a67b
 800a380:	0800a69f 	.word	0x0800a69f

0800a384 <stdio_exit_handler>:
 800a384:	4a02      	ldr	r2, [pc, #8]	; (800a390 <stdio_exit_handler+0xc>)
 800a386:	4903      	ldr	r1, [pc, #12]	; (800a394 <stdio_exit_handler+0x10>)
 800a388:	4803      	ldr	r0, [pc, #12]	; (800a398 <stdio_exit_handler+0x14>)
 800a38a:	f000 b869 	b.w	800a460 <_fwalk_sglue>
 800a38e:	bf00      	nop
 800a390:	20000018 	.word	0x20000018
 800a394:	0800ce35 	.word	0x0800ce35
 800a398:	20000190 	.word	0x20000190

0800a39c <cleanup_stdio>:
 800a39c:	6841      	ldr	r1, [r0, #4]
 800a39e:	4b0c      	ldr	r3, [pc, #48]	; (800a3d0 <cleanup_stdio+0x34>)
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	4299      	cmp	r1, r3
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	d001      	beq.n	800a3ac <cleanup_stdio+0x10>
 800a3a8:	f002 fd44 	bl	800ce34 <_fflush_r>
 800a3ac:	68a1      	ldr	r1, [r4, #8]
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <cleanup_stdio+0x38>)
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	d002      	beq.n	800a3ba <cleanup_stdio+0x1e>
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f002 fd3d 	bl	800ce34 <_fflush_r>
 800a3ba:	68e1      	ldr	r1, [r4, #12]
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <cleanup_stdio+0x3c>)
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	d004      	beq.n	800a3cc <cleanup_stdio+0x30>
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c8:	f002 bd34 	b.w	800ce34 <_fflush_r>
 800a3cc:	bd10      	pop	{r4, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200007f8 	.word	0x200007f8
 800a3d4:	20000860 	.word	0x20000860
 800a3d8:	200008c8 	.word	0x200008c8

0800a3dc <global_stdio_init.part.0>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4b0b      	ldr	r3, [pc, #44]	; (800a40c <global_stdio_init.part.0+0x30>)
 800a3e0:	4c0b      	ldr	r4, [pc, #44]	; (800a410 <global_stdio_init.part.0+0x34>)
 800a3e2:	4a0c      	ldr	r2, [pc, #48]	; (800a414 <global_stdio_init.part.0+0x38>)
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	2104      	movs	r1, #4
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f7ff ffa6 	bl	800a33c <std>
 800a3f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	2109      	movs	r1, #9
 800a3f8:	f7ff ffa0 	bl	800a33c <std>
 800a3fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a400:	2202      	movs	r2, #2
 800a402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a406:	2112      	movs	r1, #18
 800a408:	f7ff bf98 	b.w	800a33c <std>
 800a40c:	20000930 	.word	0x20000930
 800a410:	200007f8 	.word	0x200007f8
 800a414:	0800a385 	.word	0x0800a385

0800a418 <__sfp_lock_acquire>:
 800a418:	4801      	ldr	r0, [pc, #4]	; (800a420 <__sfp_lock_acquire+0x8>)
 800a41a:	f000 badf 	b.w	800a9dc <__retarget_lock_acquire_recursive>
 800a41e:	bf00      	nop
 800a420:	20000939 	.word	0x20000939

0800a424 <__sfp_lock_release>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__sfp_lock_release+0x8>)
 800a426:	f000 bada 	b.w	800a9de <__retarget_lock_release_recursive>
 800a42a:	bf00      	nop
 800a42c:	20000939 	.word	0x20000939

0800a430 <__sinit>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4604      	mov	r4, r0
 800a434:	f7ff fff0 	bl	800a418 <__sfp_lock_acquire>
 800a438:	6a23      	ldr	r3, [r4, #32]
 800a43a:	b11b      	cbz	r3, 800a444 <__sinit+0x14>
 800a43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a440:	f7ff bff0 	b.w	800a424 <__sfp_lock_release>
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <__sinit+0x28>)
 800a446:	6223      	str	r3, [r4, #32]
 800a448:	4b04      	ldr	r3, [pc, #16]	; (800a45c <__sinit+0x2c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1f5      	bne.n	800a43c <__sinit+0xc>
 800a450:	f7ff ffc4 	bl	800a3dc <global_stdio_init.part.0>
 800a454:	e7f2      	b.n	800a43c <__sinit+0xc>
 800a456:	bf00      	nop
 800a458:	0800a39d 	.word	0x0800a39d
 800a45c:	20000930 	.word	0x20000930

0800a460 <_fwalk_sglue>:
 800a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a464:	4607      	mov	r7, r0
 800a466:	4688      	mov	r8, r1
 800a468:	4614      	mov	r4, r2
 800a46a:	2600      	movs	r6, #0
 800a46c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a470:	f1b9 0901 	subs.w	r9, r9, #1
 800a474:	d505      	bpl.n	800a482 <_fwalk_sglue+0x22>
 800a476:	6824      	ldr	r4, [r4, #0]
 800a478:	2c00      	cmp	r4, #0
 800a47a:	d1f7      	bne.n	800a46c <_fwalk_sglue+0xc>
 800a47c:	4630      	mov	r0, r6
 800a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d907      	bls.n	800a498 <_fwalk_sglue+0x38>
 800a488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a48c:	3301      	adds	r3, #1
 800a48e:	d003      	beq.n	800a498 <_fwalk_sglue+0x38>
 800a490:	4629      	mov	r1, r5
 800a492:	4638      	mov	r0, r7
 800a494:	47c0      	blx	r8
 800a496:	4306      	orrs	r6, r0
 800a498:	3568      	adds	r5, #104	; 0x68
 800a49a:	e7e9      	b.n	800a470 <_fwalk_sglue+0x10>

0800a49c <iprintf>:
 800a49c:	b40f      	push	{r0, r1, r2, r3}
 800a49e:	b507      	push	{r0, r1, r2, lr}
 800a4a0:	4906      	ldr	r1, [pc, #24]	; (800a4bc <iprintf+0x20>)
 800a4a2:	ab04      	add	r3, sp, #16
 800a4a4:	6808      	ldr	r0, [r1, #0]
 800a4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4aa:	6881      	ldr	r1, [r0, #8]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	f002 fb25 	bl	800cafc <_vfiprintf_r>
 800a4b2:	b003      	add	sp, #12
 800a4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b8:	b004      	add	sp, #16
 800a4ba:	4770      	bx	lr
 800a4bc:	200001dc 	.word	0x200001dc

0800a4c0 <_puts_r>:
 800a4c0:	6a03      	ldr	r3, [r0, #32]
 800a4c2:	b570      	push	{r4, r5, r6, lr}
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460e      	mov	r6, r1
 800a4c8:	6884      	ldr	r4, [r0, #8]
 800a4ca:	b90b      	cbnz	r3, 800a4d0 <_puts_r+0x10>
 800a4cc:	f7ff ffb0 	bl	800a430 <__sinit>
 800a4d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4d2:	07db      	lsls	r3, r3, #31
 800a4d4:	d405      	bmi.n	800a4e2 <_puts_r+0x22>
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	0598      	lsls	r0, r3, #22
 800a4da:	d402      	bmi.n	800a4e2 <_puts_r+0x22>
 800a4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4de:	f000 fa7d 	bl	800a9dc <__retarget_lock_acquire_recursive>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	0719      	lsls	r1, r3, #28
 800a4e6:	d513      	bpl.n	800a510 <_puts_r+0x50>
 800a4e8:	6923      	ldr	r3, [r4, #16]
 800a4ea:	b18b      	cbz	r3, 800a510 <_puts_r+0x50>
 800a4ec:	3e01      	subs	r6, #1
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	60a3      	str	r3, [r4, #8]
 800a4f8:	b9e9      	cbnz	r1, 800a536 <_puts_r+0x76>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da2e      	bge.n	800a55c <_puts_r+0x9c>
 800a4fe:	4622      	mov	r2, r4
 800a500:	210a      	movs	r1, #10
 800a502:	4628      	mov	r0, r5
 800a504:	f000 f8cf 	bl	800a6a6 <__swbuf_r>
 800a508:	3001      	adds	r0, #1
 800a50a:	d007      	beq.n	800a51c <_puts_r+0x5c>
 800a50c:	250a      	movs	r5, #10
 800a50e:	e007      	b.n	800a520 <_puts_r+0x60>
 800a510:	4621      	mov	r1, r4
 800a512:	4628      	mov	r0, r5
 800a514:	f000 f904 	bl	800a720 <__swsetup_r>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0e7      	beq.n	800a4ec <_puts_r+0x2c>
 800a51c:	f04f 35ff 	mov.w	r5, #4294967295
 800a520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a522:	07da      	lsls	r2, r3, #31
 800a524:	d405      	bmi.n	800a532 <_puts_r+0x72>
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	059b      	lsls	r3, r3, #22
 800a52a:	d402      	bmi.n	800a532 <_puts_r+0x72>
 800a52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a52e:	f000 fa56 	bl	800a9de <__retarget_lock_release_recursive>
 800a532:	4628      	mov	r0, r5
 800a534:	bd70      	pop	{r4, r5, r6, pc}
 800a536:	2b00      	cmp	r3, #0
 800a538:	da04      	bge.n	800a544 <_puts_r+0x84>
 800a53a:	69a2      	ldr	r2, [r4, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	dc06      	bgt.n	800a54e <_puts_r+0x8e>
 800a540:	290a      	cmp	r1, #10
 800a542:	d004      	beq.n	800a54e <_puts_r+0x8e>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	7019      	strb	r1, [r3, #0]
 800a54c:	e7cf      	b.n	800a4ee <_puts_r+0x2e>
 800a54e:	4622      	mov	r2, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 f8a8 	bl	800a6a6 <__swbuf_r>
 800a556:	3001      	adds	r0, #1
 800a558:	d1c9      	bne.n	800a4ee <_puts_r+0x2e>
 800a55a:	e7df      	b.n	800a51c <_puts_r+0x5c>
 800a55c:	250a      	movs	r5, #10
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	701d      	strb	r5, [r3, #0]
 800a566:	e7db      	b.n	800a520 <_puts_r+0x60>

0800a568 <puts>:
 800a568:	4b02      	ldr	r3, [pc, #8]	; (800a574 <puts+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f7ff bfa7 	b.w	800a4c0 <_puts_r>
 800a572:	bf00      	nop
 800a574:	200001dc 	.word	0x200001dc

0800a578 <sniprintf>:
 800a578:	b40c      	push	{r2, r3}
 800a57a:	b530      	push	{r4, r5, lr}
 800a57c:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <sniprintf+0x64>)
 800a57e:	1e0c      	subs	r4, r1, #0
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	b09d      	sub	sp, #116	; 0x74
 800a584:	da08      	bge.n	800a598 <sniprintf+0x20>
 800a586:	238b      	movs	r3, #139	; 0x8b
 800a588:	f04f 30ff 	mov.w	r0, #4294967295
 800a58c:	602b      	str	r3, [r5, #0]
 800a58e:	b01d      	add	sp, #116	; 0x74
 800a590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a594:	b002      	add	sp, #8
 800a596:	4770      	bx	lr
 800a598:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a59c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5a0:	bf0c      	ite	eq
 800a5a2:	4623      	moveq	r3, r4
 800a5a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5b0:	9002      	str	r0, [sp, #8]
 800a5b2:	9006      	str	r0, [sp, #24]
 800a5b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	ab21      	add	r3, sp, #132	; 0x84
 800a5bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5be:	a902      	add	r1, sp, #8
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	f002 f975 	bl	800c8b0 <_svfiprintf_r>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	bfbc      	itt	lt
 800a5ca:	238b      	movlt	r3, #139	; 0x8b
 800a5cc:	602b      	strlt	r3, [r5, #0]
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	d0dd      	beq.n	800a58e <sniprintf+0x16>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	9b02      	ldr	r3, [sp, #8]
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	e7d9      	b.n	800a58e <sniprintf+0x16>
 800a5da:	bf00      	nop
 800a5dc:	200001dc 	.word	0x200001dc

0800a5e0 <siprintf>:
 800a5e0:	b40e      	push	{r1, r2, r3}
 800a5e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5e6:	b500      	push	{lr}
 800a5e8:	b09c      	sub	sp, #112	; 0x70
 800a5ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a5ec:	9002      	str	r0, [sp, #8]
 800a5ee:	9006      	str	r0, [sp, #24]
 800a5f0:	9107      	str	r1, [sp, #28]
 800a5f2:	9104      	str	r1, [sp, #16]
 800a5f4:	4808      	ldr	r0, [pc, #32]	; (800a618 <siprintf+0x38>)
 800a5f6:	4909      	ldr	r1, [pc, #36]	; (800a61c <siprintf+0x3c>)
 800a5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fc:	9105      	str	r1, [sp, #20]
 800a5fe:	6800      	ldr	r0, [r0, #0]
 800a600:	a902      	add	r1, sp, #8
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	f002 f954 	bl	800c8b0 <_svfiprintf_r>
 800a608:	2200      	movs	r2, #0
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	b01c      	add	sp, #112	; 0x70
 800a610:	f85d eb04 	ldr.w	lr, [sp], #4
 800a614:	b003      	add	sp, #12
 800a616:	4770      	bx	lr
 800a618:	200001dc 	.word	0x200001dc
 800a61c:	ffff0208 	.word	0xffff0208

0800a620 <__sread>:
 800a620:	b510      	push	{r4, lr}
 800a622:	460c      	mov	r4, r1
 800a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a628:	f000 f966 	bl	800a8f8 <_read_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	bfab      	itete	ge
 800a630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a632:	89a3      	ldrhlt	r3, [r4, #12]
 800a634:	181b      	addge	r3, r3, r0
 800a636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a63a:	bfac      	ite	ge
 800a63c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a63e:	81a3      	strhlt	r3, [r4, #12]
 800a640:	bd10      	pop	{r4, pc}

0800a642 <__swrite>:
 800a642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a646:	461f      	mov	r7, r3
 800a648:	898b      	ldrh	r3, [r1, #12]
 800a64a:	4605      	mov	r5, r0
 800a64c:	05db      	lsls	r3, r3, #23
 800a64e:	460c      	mov	r4, r1
 800a650:	4616      	mov	r6, r2
 800a652:	d505      	bpl.n	800a660 <__swrite+0x1e>
 800a654:	2302      	movs	r3, #2
 800a656:	2200      	movs	r2, #0
 800a658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65c:	f000 f93a 	bl	800a8d4 <_lseek_r>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	4632      	mov	r2, r6
 800a664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	4628      	mov	r0, r5
 800a66c:	463b      	mov	r3, r7
 800a66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a676:	f000 b975 	b.w	800a964 <_write_r>

0800a67a <__sseek>:
 800a67a:	b510      	push	{r4, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a682:	f000 f927 	bl	800a8d4 <_lseek_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	bf15      	itete	ne
 800a68c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a68e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a696:	81a3      	strheq	r3, [r4, #12]
 800a698:	bf18      	it	ne
 800a69a:	81a3      	strhne	r3, [r4, #12]
 800a69c:	bd10      	pop	{r4, pc}

0800a69e <__sclose>:
 800a69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a2:	f000 b907 	b.w	800a8b4 <_close_r>

0800a6a6 <__swbuf_r>:
 800a6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	b118      	cbz	r0, 800a6b8 <__swbuf_r+0x12>
 800a6b0:	6a03      	ldr	r3, [r0, #32]
 800a6b2:	b90b      	cbnz	r3, 800a6b8 <__swbuf_r+0x12>
 800a6b4:	f7ff febc 	bl	800a430 <__sinit>
 800a6b8:	69a3      	ldr	r3, [r4, #24]
 800a6ba:	60a3      	str	r3, [r4, #8]
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	071a      	lsls	r2, r3, #28
 800a6c0:	d525      	bpl.n	800a70e <__swbuf_r+0x68>
 800a6c2:	6923      	ldr	r3, [r4, #16]
 800a6c4:	b31b      	cbz	r3, 800a70e <__swbuf_r+0x68>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	6922      	ldr	r2, [r4, #16]
 800a6ca:	b2f6      	uxtb	r6, r6
 800a6cc:	1a98      	subs	r0, r3, r2
 800a6ce:	6963      	ldr	r3, [r4, #20]
 800a6d0:	4637      	mov	r7, r6
 800a6d2:	4283      	cmp	r3, r0
 800a6d4:	dc04      	bgt.n	800a6e0 <__swbuf_r+0x3a>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f002 fbab 	bl	800ce34 <_fflush_r>
 800a6de:	b9e0      	cbnz	r0, 800a71a <__swbuf_r+0x74>
 800a6e0:	68a3      	ldr	r3, [r4, #8]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	60a3      	str	r3, [r4, #8]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	6022      	str	r2, [r4, #0]
 800a6ec:	701e      	strb	r6, [r3, #0]
 800a6ee:	6962      	ldr	r2, [r4, #20]
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d004      	beq.n	800a700 <__swbuf_r+0x5a>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	07db      	lsls	r3, r3, #31
 800a6fa:	d506      	bpl.n	800a70a <__swbuf_r+0x64>
 800a6fc:	2e0a      	cmp	r6, #10
 800a6fe:	d104      	bne.n	800a70a <__swbuf_r+0x64>
 800a700:	4621      	mov	r1, r4
 800a702:	4628      	mov	r0, r5
 800a704:	f002 fb96 	bl	800ce34 <_fflush_r>
 800a708:	b938      	cbnz	r0, 800a71a <__swbuf_r+0x74>
 800a70a:	4638      	mov	r0, r7
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f805 	bl	800a720 <__swsetup_r>
 800a716:	2800      	cmp	r0, #0
 800a718:	d0d5      	beq.n	800a6c6 <__swbuf_r+0x20>
 800a71a:	f04f 37ff 	mov.w	r7, #4294967295
 800a71e:	e7f4      	b.n	800a70a <__swbuf_r+0x64>

0800a720 <__swsetup_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4b2a      	ldr	r3, [pc, #168]	; (800a7cc <__swsetup_r+0xac>)
 800a724:	4605      	mov	r5, r0
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	460c      	mov	r4, r1
 800a72a:	b118      	cbz	r0, 800a734 <__swsetup_r+0x14>
 800a72c:	6a03      	ldr	r3, [r0, #32]
 800a72e:	b90b      	cbnz	r3, 800a734 <__swsetup_r+0x14>
 800a730:	f7ff fe7e 	bl	800a430 <__sinit>
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a73a:	0718      	lsls	r0, r3, #28
 800a73c:	d422      	bmi.n	800a784 <__swsetup_r+0x64>
 800a73e:	06d9      	lsls	r1, r3, #27
 800a740:	d407      	bmi.n	800a752 <__swsetup_r+0x32>
 800a742:	2309      	movs	r3, #9
 800a744:	602b      	str	r3, [r5, #0]
 800a746:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	e034      	b.n	800a7bc <__swsetup_r+0x9c>
 800a752:	0758      	lsls	r0, r3, #29
 800a754:	d512      	bpl.n	800a77c <__swsetup_r+0x5c>
 800a756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a758:	b141      	cbz	r1, 800a76c <__swsetup_r+0x4c>
 800a75a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a75e:	4299      	cmp	r1, r3
 800a760:	d002      	beq.n	800a768 <__swsetup_r+0x48>
 800a762:	4628      	mov	r0, r5
 800a764:	f000 ffec 	bl	800b740 <_free_r>
 800a768:	2300      	movs	r3, #0
 800a76a:	6363      	str	r3, [r4, #52]	; 0x34
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	2300      	movs	r3, #0
 800a776:	6063      	str	r3, [r4, #4]
 800a778:	6923      	ldr	r3, [r4, #16]
 800a77a:	6023      	str	r3, [r4, #0]
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f043 0308 	orr.w	r3, r3, #8
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	b94b      	cbnz	r3, 800a79c <__swsetup_r+0x7c>
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a792:	d003      	beq.n	800a79c <__swsetup_r+0x7c>
 800a794:	4621      	mov	r1, r4
 800a796:	4628      	mov	r0, r5
 800a798:	f002 fbab 	bl	800cef2 <__smakebuf_r>
 800a79c:	89a0      	ldrh	r0, [r4, #12]
 800a79e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7a2:	f010 0301 	ands.w	r3, r0, #1
 800a7a6:	d00a      	beq.n	800a7be <__swsetup_r+0x9e>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60a3      	str	r3, [r4, #8]
 800a7ac:	6963      	ldr	r3, [r4, #20]
 800a7ae:	425b      	negs	r3, r3
 800a7b0:	61a3      	str	r3, [r4, #24]
 800a7b2:	6923      	ldr	r3, [r4, #16]
 800a7b4:	b943      	cbnz	r3, 800a7c8 <__swsetup_r+0xa8>
 800a7b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7ba:	d1c4      	bne.n	800a746 <__swsetup_r+0x26>
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	0781      	lsls	r1, r0, #30
 800a7c0:	bf58      	it	pl
 800a7c2:	6963      	ldrpl	r3, [r4, #20]
 800a7c4:	60a3      	str	r3, [r4, #8]
 800a7c6:	e7f4      	b.n	800a7b2 <__swsetup_r+0x92>
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e7f7      	b.n	800a7bc <__swsetup_r+0x9c>
 800a7cc:	200001dc 	.word	0x200001dc

0800a7d0 <memset>:
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4402      	add	r2, r0
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d100      	bne.n	800a7da <memset+0xa>
 800a7d8:	4770      	bx	lr
 800a7da:	f803 1b01 	strb.w	r1, [r3], #1
 800a7de:	e7f9      	b.n	800a7d4 <memset+0x4>

0800a7e0 <strchr>:
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	b2c9      	uxtb	r1, r1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ea:	b112      	cbz	r2, 800a7f2 <strchr+0x12>
 800a7ec:	428a      	cmp	r2, r1
 800a7ee:	d1f9      	bne.n	800a7e4 <strchr+0x4>
 800a7f0:	4770      	bx	lr
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	bf18      	it	ne
 800a7f6:	2000      	movne	r0, #0
 800a7f8:	4770      	bx	lr

0800a7fa <strncmp>:
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	b16a      	cbz	r2, 800a81a <strncmp+0x20>
 800a7fe:	3901      	subs	r1, #1
 800a800:	1884      	adds	r4, r0, r2
 800a802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d103      	bne.n	800a816 <strncmp+0x1c>
 800a80e:	42a0      	cmp	r0, r4
 800a810:	d001      	beq.n	800a816 <strncmp+0x1c>
 800a812:	2a00      	cmp	r2, #0
 800a814:	d1f5      	bne.n	800a802 <strncmp+0x8>
 800a816:	1ad0      	subs	r0, r2, r3
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	4610      	mov	r0, r2
 800a81c:	e7fc      	b.n	800a818 <strncmp+0x1e>

0800a81e <strstr>:
 800a81e:	780a      	ldrb	r2, [r1, #0]
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	b96a      	cbnz	r2, 800a840 <strstr+0x22>
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	429a      	cmp	r2, r3
 800a828:	d109      	bne.n	800a83e <strstr+0x20>
 800a82a:	460c      	mov	r4, r1
 800a82c:	4605      	mov	r5, r0
 800a82e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0f6      	beq.n	800a824 <strstr+0x6>
 800a836:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a83a:	429e      	cmp	r6, r3
 800a83c:	d0f7      	beq.n	800a82e <strstr+0x10>
 800a83e:	3001      	adds	r0, #1
 800a840:	7803      	ldrb	r3, [r0, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1ef      	bne.n	800a826 <strstr+0x8>
 800a846:	4618      	mov	r0, r3
 800a848:	e7ec      	b.n	800a824 <strstr+0x6>

0800a84a <_raise_r>:
 800a84a:	291f      	cmp	r1, #31
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4604      	mov	r4, r0
 800a850:	460d      	mov	r5, r1
 800a852:	d904      	bls.n	800a85e <_raise_r+0x14>
 800a854:	2316      	movs	r3, #22
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	bd38      	pop	{r3, r4, r5, pc}
 800a85e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a860:	b112      	cbz	r2, 800a868 <_raise_r+0x1e>
 800a862:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a866:	b94b      	cbnz	r3, 800a87c <_raise_r+0x32>
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 f869 	bl	800a940 <_getpid_r>
 800a86e:	462a      	mov	r2, r5
 800a870:	4601      	mov	r1, r0
 800a872:	4620      	mov	r0, r4
 800a874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a878:	f000 b850 	b.w	800a91c <_kill_r>
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d00a      	beq.n	800a896 <_raise_r+0x4c>
 800a880:	1c59      	adds	r1, r3, #1
 800a882:	d103      	bne.n	800a88c <_raise_r+0x42>
 800a884:	2316      	movs	r3, #22
 800a886:	6003      	str	r3, [r0, #0]
 800a888:	2001      	movs	r0, #1
 800a88a:	e7e7      	b.n	800a85c <_raise_r+0x12>
 800a88c:	2400      	movs	r4, #0
 800a88e:	4628      	mov	r0, r5
 800a890:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a894:	4798      	blx	r3
 800a896:	2000      	movs	r0, #0
 800a898:	e7e0      	b.n	800a85c <_raise_r+0x12>
	...

0800a89c <raise>:
 800a89c:	4b02      	ldr	r3, [pc, #8]	; (800a8a8 <raise+0xc>)
 800a89e:	4601      	mov	r1, r0
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	f7ff bfd2 	b.w	800a84a <_raise_r>
 800a8a6:	bf00      	nop
 800a8a8:	200001dc 	.word	0x200001dc

0800a8ac <_localeconv_r>:
 800a8ac:	4800      	ldr	r0, [pc, #0]	; (800a8b0 <_localeconv_r+0x4>)
 800a8ae:	4770      	bx	lr
 800a8b0:	20000114 	.word	0x20000114

0800a8b4 <_close_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4d05      	ldr	r5, [pc, #20]	; (800a8d0 <_close_r+0x1c>)
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	f7f9 f8de 	bl	8003a80 <_close>
 800a8c4:	1c43      	adds	r3, r0, #1
 800a8c6:	d102      	bne.n	800a8ce <_close_r+0x1a>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	b103      	cbz	r3, 800a8ce <_close_r+0x1a>
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	bd38      	pop	{r3, r4, r5, pc}
 800a8d0:	20000934 	.word	0x20000934

0800a8d4 <_lseek_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4d05      	ldr	r5, [pc, #20]	; (800a8f4 <_lseek_r+0x20>)
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f7f9 f8f0 	bl	8003ac8 <_lseek>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_lseek_r+0x1e>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_lseek_r+0x1e>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	20000934 	.word	0x20000934

0800a8f8 <_read_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4611      	mov	r1, r2
 800a900:	2200      	movs	r2, #0
 800a902:	4d05      	ldr	r5, [pc, #20]	; (800a918 <_read_r+0x20>)
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	f7f9 f89d 	bl	8003a46 <_read>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_read_r+0x1e>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_read_r+0x1e>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	20000934 	.word	0x20000934

0800a91c <_kill_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	2300      	movs	r3, #0
 800a920:	4d06      	ldr	r5, [pc, #24]	; (800a93c <_kill_r+0x20>)
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	4611      	mov	r1, r2
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f7f9 f872 	bl	8003a12 <_kill>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d102      	bne.n	800a938 <_kill_r+0x1c>
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	b103      	cbz	r3, 800a938 <_kill_r+0x1c>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	20000934 	.word	0x20000934

0800a940 <_getpid_r>:
 800a940:	f7f9 b860 	b.w	8003a04 <_getpid>

0800a944 <_sbrk_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	2300      	movs	r3, #0
 800a948:	4d05      	ldr	r5, [pc, #20]	; (800a960 <_sbrk_r+0x1c>)
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	f7f9 f8c6 	bl	8003ae0 <_sbrk>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_sbrk_r+0x1a>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_sbrk_r+0x1a>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000934 	.word	0x20000934

0800a964 <_write_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	2200      	movs	r2, #0
 800a96e:	4d05      	ldr	r5, [pc, #20]	; (800a984 <_write_r+0x20>)
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f7 f9d6 	bl	8001d24 <_write>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_write_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_write_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000934 	.word	0x20000934

0800a988 <__errno>:
 800a988:	4b01      	ldr	r3, [pc, #4]	; (800a990 <__errno+0x8>)
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	200001dc 	.word	0x200001dc

0800a994 <__libc_init_array>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	2600      	movs	r6, #0
 800a998:	4d0c      	ldr	r5, [pc, #48]	; (800a9cc <__libc_init_array+0x38>)
 800a99a:	4c0d      	ldr	r4, [pc, #52]	; (800a9d0 <__libc_init_array+0x3c>)
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	42a6      	cmp	r6, r4
 800a9a2:	d109      	bne.n	800a9b8 <__libc_init_array+0x24>
 800a9a4:	f002 fb6a 	bl	800d07c <_init>
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	4d0a      	ldr	r5, [pc, #40]	; (800a9d4 <__libc_init_array+0x40>)
 800a9ac:	4c0a      	ldr	r4, [pc, #40]	; (800a9d8 <__libc_init_array+0x44>)
 800a9ae:	1b64      	subs	r4, r4, r5
 800a9b0:	10a4      	asrs	r4, r4, #2
 800a9b2:	42a6      	cmp	r6, r4
 800a9b4:	d105      	bne.n	800a9c2 <__libc_init_array+0x2e>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9bc:	4798      	blx	r3
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7ee      	b.n	800a9a0 <__libc_init_array+0xc>
 800a9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c6:	4798      	blx	r3
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7f2      	b.n	800a9b2 <__libc_init_array+0x1e>
 800a9cc:	0800da20 	.word	0x0800da20
 800a9d0:	0800da20 	.word	0x0800da20
 800a9d4:	0800da20 	.word	0x0800da20
 800a9d8:	0800da28 	.word	0x0800da28

0800a9dc <__retarget_lock_acquire_recursive>:
 800a9dc:	4770      	bx	lr

0800a9de <__retarget_lock_release_recursive>:
 800a9de:	4770      	bx	lr

0800a9e0 <memchr>:
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	b2c9      	uxtb	r1, r1
 800a9e6:	4402      	add	r2, r0
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	d101      	bne.n	800a9f2 <memchr+0x12>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e003      	b.n	800a9fa <memchr+0x1a>
 800a9f2:	7804      	ldrb	r4, [r0, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	428c      	cmp	r4, r1
 800a9f8:	d1f6      	bne.n	800a9e8 <memchr+0x8>
 800a9fa:	bd10      	pop	{r4, pc}

0800a9fc <memcpy>:
 800a9fc:	440a      	add	r2, r1
 800a9fe:	4291      	cmp	r1, r2
 800aa00:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa04:	d100      	bne.n	800aa08 <memcpy+0xc>
 800aa06:	4770      	bx	lr
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa0e:	4291      	cmp	r1, r2
 800aa10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa14:	d1f9      	bne.n	800aa0a <memcpy+0xe>
 800aa16:	bd10      	pop	{r4, pc}

0800aa18 <nan>:
 800aa18:	2000      	movs	r0, #0
 800aa1a:	4901      	ldr	r1, [pc, #4]	; (800aa20 <nan+0x8>)
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	7ff80000 	.word	0x7ff80000

0800aa24 <__assert_func>:
 800aa24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa26:	4614      	mov	r4, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <__assert_func+0x2c>)
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68d8      	ldr	r0, [r3, #12]
 800aa32:	b14c      	cbz	r4, 800aa48 <__assert_func+0x24>
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <__assert_func+0x30>)
 800aa36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa3a:	9100      	str	r1, [sp, #0]
 800aa3c:	462b      	mov	r3, r5
 800aa3e:	4906      	ldr	r1, [pc, #24]	; (800aa58 <__assert_func+0x34>)
 800aa40:	f002 fa20 	bl	800ce84 <fiprintf>
 800aa44:	f7fe f81e 	bl	8008a84 <abort>
 800aa48:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <__assert_func+0x38>)
 800aa4a:	461c      	mov	r4, r3
 800aa4c:	e7f3      	b.n	800aa36 <__assert_func+0x12>
 800aa4e:	bf00      	nop
 800aa50:	200001dc 	.word	0x200001dc
 800aa54:	0800d7a5 	.word	0x0800d7a5
 800aa58:	0800d7b2 	.word	0x0800d7b2
 800aa5c:	0800d7e0 	.word	0x0800d7e0

0800aa60 <quorem>:
 800aa60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	6903      	ldr	r3, [r0, #16]
 800aa66:	690c      	ldr	r4, [r1, #16]
 800aa68:	4607      	mov	r7, r0
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	db7f      	blt.n	800ab6e <quorem+0x10e>
 800aa6e:	3c01      	subs	r4, #1
 800aa70:	f100 0514 	add.w	r5, r0, #20
 800aa74:	f101 0814 	add.w	r8, r1, #20
 800aa78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa86:	3301      	adds	r3, #1
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa96:	d331      	bcc.n	800aafc <quorem+0x9c>
 800aa98:	f04f 0e00 	mov.w	lr, #0
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	46ac      	mov	ip, r5
 800aaa0:	46f2      	mov	sl, lr
 800aaa2:	f850 2b04 	ldr.w	r2, [r0], #4
 800aaa6:	b293      	uxth	r3, r2
 800aaa8:	fb06 e303 	mla	r3, r6, r3, lr
 800aaac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aab0:	0c1a      	lsrs	r2, r3, #16
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	fb06 220e 	mla	r2, r6, lr, r2
 800aab8:	ebaa 0303 	sub.w	r3, sl, r3
 800aabc:	f8dc a000 	ldr.w	sl, [ip]
 800aac0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aac4:	fa1f fa8a 	uxth.w	sl, sl
 800aac8:	4453      	add	r3, sl
 800aaca:	f8dc a000 	ldr.w	sl, [ip]
 800aace:	b292      	uxth	r2, r2
 800aad0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aad8:	b29b      	uxth	r3, r3
 800aada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aade:	4581      	cmp	r9, r0
 800aae0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aae4:	f84c 3b04 	str.w	r3, [ip], #4
 800aae8:	d2db      	bcs.n	800aaa2 <quorem+0x42>
 800aaea:	f855 300b 	ldr.w	r3, [r5, fp]
 800aaee:	b92b      	cbnz	r3, 800aafc <quorem+0x9c>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	3b04      	subs	r3, #4
 800aaf4:	429d      	cmp	r5, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	d32d      	bcc.n	800ab56 <quorem+0xf6>
 800aafa:	613c      	str	r4, [r7, #16]
 800aafc:	4638      	mov	r0, r7
 800aafe:	f001 fc97 	bl	800c430 <__mcmp>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	db23      	blt.n	800ab4e <quorem+0xee>
 800ab06:	4629      	mov	r1, r5
 800ab08:	2000      	movs	r0, #0
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab10:	f8d1 c000 	ldr.w	ip, [r1]
 800ab14:	b293      	uxth	r3, r2
 800ab16:	1ac3      	subs	r3, r0, r3
 800ab18:	0c12      	lsrs	r2, r2, #16
 800ab1a:	fa1f f08c 	uxth.w	r0, ip
 800ab1e:	4403      	add	r3, r0
 800ab20:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ab24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab2e:	45c1      	cmp	r9, r8
 800ab30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab34:	f841 3b04 	str.w	r3, [r1], #4
 800ab38:	d2e8      	bcs.n	800ab0c <quorem+0xac>
 800ab3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab42:	b922      	cbnz	r2, 800ab4e <quorem+0xee>
 800ab44:	3b04      	subs	r3, #4
 800ab46:	429d      	cmp	r5, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	d30a      	bcc.n	800ab62 <quorem+0x102>
 800ab4c:	613c      	str	r4, [r7, #16]
 800ab4e:	4630      	mov	r0, r6
 800ab50:	b003      	add	sp, #12
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	3b04      	subs	r3, #4
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d1cd      	bne.n	800aafa <quorem+0x9a>
 800ab5e:	3c01      	subs	r4, #1
 800ab60:	e7c8      	b.n	800aaf4 <quorem+0x94>
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	3b04      	subs	r3, #4
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	d1f0      	bne.n	800ab4c <quorem+0xec>
 800ab6a:	3c01      	subs	r4, #1
 800ab6c:	e7eb      	b.n	800ab46 <quorem+0xe6>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e7ee      	b.n	800ab50 <quorem+0xf0>
 800ab72:	0000      	movs	r0, r0
 800ab74:	0000      	movs	r0, r0
	...

0800ab78 <_dtoa_r>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	4616      	mov	r6, r2
 800ab7e:	461f      	mov	r7, r3
 800ab80:	69c4      	ldr	r4, [r0, #28]
 800ab82:	b099      	sub	sp, #100	; 0x64
 800ab84:	4605      	mov	r5, r0
 800ab86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ab8e:	b974      	cbnz	r4, 800abae <_dtoa_r+0x36>
 800ab90:	2010      	movs	r0, #16
 800ab92:	f7fd ff83 	bl	8008a9c <malloc>
 800ab96:	4602      	mov	r2, r0
 800ab98:	61e8      	str	r0, [r5, #28]
 800ab9a:	b920      	cbnz	r0, 800aba6 <_dtoa_r+0x2e>
 800ab9c:	21ef      	movs	r1, #239	; 0xef
 800ab9e:	4bac      	ldr	r3, [pc, #688]	; (800ae50 <_dtoa_r+0x2d8>)
 800aba0:	48ac      	ldr	r0, [pc, #688]	; (800ae54 <_dtoa_r+0x2dc>)
 800aba2:	f7ff ff3f 	bl	800aa24 <__assert_func>
 800aba6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abaa:	6004      	str	r4, [r0, #0]
 800abac:	60c4      	str	r4, [r0, #12]
 800abae:	69eb      	ldr	r3, [r5, #28]
 800abb0:	6819      	ldr	r1, [r3, #0]
 800abb2:	b151      	cbz	r1, 800abca <_dtoa_r+0x52>
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	2301      	movs	r3, #1
 800abb8:	4093      	lsls	r3, r2
 800abba:	604a      	str	r2, [r1, #4]
 800abbc:	608b      	str	r3, [r1, #8]
 800abbe:	4628      	mov	r0, r5
 800abc0:	f001 f9b2 	bl	800bf28 <_Bfree>
 800abc4:	2200      	movs	r2, #0
 800abc6:	69eb      	ldr	r3, [r5, #28]
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	1e3b      	subs	r3, r7, #0
 800abcc:	bfaf      	iteee	ge
 800abce:	2300      	movge	r3, #0
 800abd0:	2201      	movlt	r2, #1
 800abd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abd6:	9305      	strlt	r3, [sp, #20]
 800abd8:	bfa8      	it	ge
 800abda:	f8c8 3000 	strge.w	r3, [r8]
 800abde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800abe2:	4b9d      	ldr	r3, [pc, #628]	; (800ae58 <_dtoa_r+0x2e0>)
 800abe4:	bfb8      	it	lt
 800abe6:	f8c8 2000 	strlt.w	r2, [r8]
 800abea:	ea33 0309 	bics.w	r3, r3, r9
 800abee:	d119      	bne.n	800ac24 <_dtoa_r+0xac>
 800abf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800abf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abfc:	4333      	orrs	r3, r6
 800abfe:	f000 8589 	beq.w	800b714 <_dtoa_r+0xb9c>
 800ac02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac04:	b953      	cbnz	r3, 800ac1c <_dtoa_r+0xa4>
 800ac06:	4b95      	ldr	r3, [pc, #596]	; (800ae5c <_dtoa_r+0x2e4>)
 800ac08:	e023      	b.n	800ac52 <_dtoa_r+0xda>
 800ac0a:	4b95      	ldr	r3, [pc, #596]	; (800ae60 <_dtoa_r+0x2e8>)
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	3308      	adds	r3, #8
 800ac10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	9803      	ldr	r0, [sp, #12]
 800ac16:	b019      	add	sp, #100	; 0x64
 800ac18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1c:	4b8f      	ldr	r3, [pc, #572]	; (800ae5c <_dtoa_r+0x2e4>)
 800ac1e:	9303      	str	r3, [sp, #12]
 800ac20:	3303      	adds	r3, #3
 800ac22:	e7f5      	b.n	800ac10 <_dtoa_r+0x98>
 800ac24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ac2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac30:	2200      	movs	r2, #0
 800ac32:	2300      	movs	r3, #0
 800ac34:	f7f5 feb8 	bl	80009a8 <__aeabi_dcmpeq>
 800ac38:	4680      	mov	r8, r0
 800ac3a:	b160      	cbz	r0, 800ac56 <_dtoa_r+0xde>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8562 	beq.w	800b70e <_dtoa_r+0xb96>
 800ac4a:	4b86      	ldr	r3, [pc, #536]	; (800ae64 <_dtoa_r+0x2ec>)
 800ac4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	e7de      	b.n	800ac14 <_dtoa_r+0x9c>
 800ac56:	ab16      	add	r3, sp, #88	; 0x58
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	ab17      	add	r3, sp, #92	; 0x5c
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	4628      	mov	r0, r5
 800ac60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac64:	f001 fcf4 	bl	800c650 <__d2b>
 800ac68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	d07e      	beq.n	800ad70 <_dtoa_r+0x1f8>
 800ac72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac78:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac80:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	2200      	movs	r2, #0
 800ac90:	4b75      	ldr	r3, [pc, #468]	; (800ae68 <_dtoa_r+0x2f0>)
 800ac92:	f7f5 fa69 	bl	8000168 <__aeabi_dsub>
 800ac96:	a368      	add	r3, pc, #416	; (adr r3, 800ae38 <_dtoa_r+0x2c0>)
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f7f5 fc1c 	bl	80004d8 <__aeabi_dmul>
 800aca0:	a367      	add	r3, pc, #412	; (adr r3, 800ae40 <_dtoa_r+0x2c8>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 fa61 	bl	800016c <__adddf3>
 800acaa:	4606      	mov	r6, r0
 800acac:	4620      	mov	r0, r4
 800acae:	460f      	mov	r7, r1
 800acb0:	f7f5 fba8 	bl	8000404 <__aeabi_i2d>
 800acb4:	a364      	add	r3, pc, #400	; (adr r3, 800ae48 <_dtoa_r+0x2d0>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 fc0d 	bl	80004d8 <__aeabi_dmul>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4630      	mov	r0, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	f7f5 fa51 	bl	800016c <__adddf3>
 800acca:	4606      	mov	r6, r0
 800accc:	460f      	mov	r7, r1
 800acce:	f7f5 feb3 	bl	8000a38 <__aeabi_d2iz>
 800acd2:	2200      	movs	r2, #0
 800acd4:	4683      	mov	fp, r0
 800acd6:	2300      	movs	r3, #0
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fe6e 	bl	80009bc <__aeabi_dcmplt>
 800ace0:	b148      	cbz	r0, 800acf6 <_dtoa_r+0x17e>
 800ace2:	4658      	mov	r0, fp
 800ace4:	f7f5 fb8e 	bl	8000404 <__aeabi_i2d>
 800ace8:	4632      	mov	r2, r6
 800acea:	463b      	mov	r3, r7
 800acec:	f7f5 fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 800acf0:	b908      	cbnz	r0, 800acf6 <_dtoa_r+0x17e>
 800acf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acf6:	f1bb 0f16 	cmp.w	fp, #22
 800acfa:	d857      	bhi.n	800adac <_dtoa_r+0x234>
 800acfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad00:	4b5a      	ldr	r3, [pc, #360]	; (800ae6c <_dtoa_r+0x2f4>)
 800ad02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fe57 	bl	80009bc <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d04e      	beq.n	800adb0 <_dtoa_r+0x238>
 800ad12:	2300      	movs	r3, #0
 800ad14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad1c:	1b1b      	subs	r3, r3, r4
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	bf46      	itte	mi
 800ad22:	f1c3 0901 	rsbmi	r9, r3, #1
 800ad26:	2300      	movmi	r3, #0
 800ad28:	f04f 0900 	movpl.w	r9, #0
 800ad2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad2e:	bf48      	it	mi
 800ad30:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ad32:	f1bb 0f00 	cmp.w	fp, #0
 800ad36:	db3d      	blt.n	800adb4 <_dtoa_r+0x23c>
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ad3e:	445b      	add	r3, fp
 800ad40:	9309      	str	r3, [sp, #36]	; 0x24
 800ad42:	2300      	movs	r3, #0
 800ad44:	930a      	str	r3, [sp, #40]	; 0x28
 800ad46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	d867      	bhi.n	800ae1c <_dtoa_r+0x2a4>
 800ad4c:	2b05      	cmp	r3, #5
 800ad4e:	bfc4      	itt	gt
 800ad50:	3b04      	subgt	r3, #4
 800ad52:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ad54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad56:	bfc8      	it	gt
 800ad58:	2400      	movgt	r4, #0
 800ad5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ad5e:	bfd8      	it	le
 800ad60:	2401      	movle	r4, #1
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	f200 8086 	bhi.w	800ae74 <_dtoa_r+0x2fc>
 800ad68:	e8df f003 	tbb	[pc, r3]
 800ad6c:	5637392c 	.word	0x5637392c
 800ad70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad74:	441c      	add	r4, r3
 800ad76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad7a:	2b20      	cmp	r3, #32
 800ad7c:	bfc1      	itttt	gt
 800ad7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad82:	fa09 f903 	lslgt.w	r9, r9, r3
 800ad86:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800ad8a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ad8e:	bfd6      	itet	le
 800ad90:	f1c3 0320 	rsble	r3, r3, #32
 800ad94:	ea49 0003 	orrgt.w	r0, r9, r3
 800ad98:	fa06 f003 	lslle.w	r0, r6, r3
 800ad9c:	f7f5 fb22 	bl	80003e4 <__aeabi_ui2d>
 800ada0:	2201      	movs	r2, #1
 800ada2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ada6:	3c01      	subs	r4, #1
 800ada8:	9213      	str	r2, [sp, #76]	; 0x4c
 800adaa:	e76f      	b.n	800ac8c <_dtoa_r+0x114>
 800adac:	2301      	movs	r3, #1
 800adae:	e7b3      	b.n	800ad18 <_dtoa_r+0x1a0>
 800adb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800adb2:	e7b2      	b.n	800ad1a <_dtoa_r+0x1a2>
 800adb4:	f1cb 0300 	rsb	r3, fp, #0
 800adb8:	930a      	str	r3, [sp, #40]	; 0x28
 800adba:	2300      	movs	r3, #0
 800adbc:	eba9 090b 	sub.w	r9, r9, fp
 800adc0:	930e      	str	r3, [sp, #56]	; 0x38
 800adc2:	e7c0      	b.n	800ad46 <_dtoa_r+0x1ce>
 800adc4:	2300      	movs	r3, #0
 800adc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800adc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dc55      	bgt.n	800ae7a <_dtoa_r+0x302>
 800adce:	2301      	movs	r3, #1
 800add0:	461a      	mov	r2, r3
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	9308      	str	r3, [sp, #32]
 800add6:	9223      	str	r2, [sp, #140]	; 0x8c
 800add8:	e00b      	b.n	800adf2 <_dtoa_r+0x27a>
 800adda:	2301      	movs	r3, #1
 800addc:	e7f3      	b.n	800adc6 <_dtoa_r+0x24e>
 800adde:	2300      	movs	r3, #0
 800ade0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ade4:	445b      	add	r3, fp
 800ade6:	9306      	str	r3, [sp, #24]
 800ade8:	3301      	adds	r3, #1
 800adea:	2b01      	cmp	r3, #1
 800adec:	9308      	str	r3, [sp, #32]
 800adee:	bfb8      	it	lt
 800adf0:	2301      	movlt	r3, #1
 800adf2:	2100      	movs	r1, #0
 800adf4:	2204      	movs	r2, #4
 800adf6:	69e8      	ldr	r0, [r5, #28]
 800adf8:	f102 0614 	add.w	r6, r2, #20
 800adfc:	429e      	cmp	r6, r3
 800adfe:	d940      	bls.n	800ae82 <_dtoa_r+0x30a>
 800ae00:	6041      	str	r1, [r0, #4]
 800ae02:	4628      	mov	r0, r5
 800ae04:	f001 f850 	bl	800bea8 <_Balloc>
 800ae08:	9003      	str	r0, [sp, #12]
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d13c      	bne.n	800ae88 <_dtoa_r+0x310>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	f240 11af 	movw	r1, #431	; 0x1af
 800ae14:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <_dtoa_r+0x2f8>)
 800ae16:	e6c3      	b.n	800aba0 <_dtoa_r+0x28>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e7e1      	b.n	800ade0 <_dtoa_r+0x268>
 800ae1c:	2401      	movs	r4, #1
 800ae1e:	2300      	movs	r3, #0
 800ae20:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae22:	9322      	str	r3, [sp, #136]	; 0x88
 800ae24:	f04f 33ff 	mov.w	r3, #4294967295
 800ae28:	2200      	movs	r2, #0
 800ae2a:	9306      	str	r3, [sp, #24]
 800ae2c:	9308      	str	r3, [sp, #32]
 800ae2e:	2312      	movs	r3, #18
 800ae30:	e7d1      	b.n	800add6 <_dtoa_r+0x25e>
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
 800ae38:	636f4361 	.word	0x636f4361
 800ae3c:	3fd287a7 	.word	0x3fd287a7
 800ae40:	8b60c8b3 	.word	0x8b60c8b3
 800ae44:	3fc68a28 	.word	0x3fc68a28
 800ae48:	509f79fb 	.word	0x509f79fb
 800ae4c:	3fd34413 	.word	0x3fd34413
 800ae50:	0800d5a6 	.word	0x0800d5a6
 800ae54:	0800d7ee 	.word	0x0800d7ee
 800ae58:	7ff00000 	.word	0x7ff00000
 800ae5c:	0800d7ea 	.word	0x0800d7ea
 800ae60:	0800d7e1 	.word	0x0800d7e1
 800ae64:	0800d77a 	.word	0x0800d77a
 800ae68:	3ff80000 	.word	0x3ff80000
 800ae6c:	0800d938 	.word	0x0800d938
 800ae70:	0800d846 	.word	0x0800d846
 800ae74:	2301      	movs	r3, #1
 800ae76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae78:	e7d4      	b.n	800ae24 <_dtoa_r+0x2ac>
 800ae7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae7c:	9306      	str	r3, [sp, #24]
 800ae7e:	9308      	str	r3, [sp, #32]
 800ae80:	e7b7      	b.n	800adf2 <_dtoa_r+0x27a>
 800ae82:	3101      	adds	r1, #1
 800ae84:	0052      	lsls	r2, r2, #1
 800ae86:	e7b7      	b.n	800adf8 <_dtoa_r+0x280>
 800ae88:	69eb      	ldr	r3, [r5, #28]
 800ae8a:	9a03      	ldr	r2, [sp, #12]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	9b08      	ldr	r3, [sp, #32]
 800ae90:	2b0e      	cmp	r3, #14
 800ae92:	f200 80a8 	bhi.w	800afe6 <_dtoa_r+0x46e>
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	f000 80a5 	beq.w	800afe6 <_dtoa_r+0x46e>
 800ae9c:	f1bb 0f00 	cmp.w	fp, #0
 800aea0:	dd34      	ble.n	800af0c <_dtoa_r+0x394>
 800aea2:	4b9a      	ldr	r3, [pc, #616]	; (800b10c <_dtoa_r+0x594>)
 800aea4:	f00b 020f 	and.w	r2, fp, #15
 800aea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aeb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeb4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aeb8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800aebc:	d016      	beq.n	800aeec <_dtoa_r+0x374>
 800aebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aec2:	4b93      	ldr	r3, [pc, #588]	; (800b110 <_dtoa_r+0x598>)
 800aec4:	2703      	movs	r7, #3
 800aec6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aeca:	f7f5 fc2f 	bl	800072c <__aeabi_ddiv>
 800aece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aed2:	f004 040f 	and.w	r4, r4, #15
 800aed6:	4e8e      	ldr	r6, [pc, #568]	; (800b110 <_dtoa_r+0x598>)
 800aed8:	b954      	cbnz	r4, 800aef0 <_dtoa_r+0x378>
 800aeda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aee2:	f7f5 fc23 	bl	800072c <__aeabi_ddiv>
 800aee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeea:	e029      	b.n	800af40 <_dtoa_r+0x3c8>
 800aeec:	2702      	movs	r7, #2
 800aeee:	e7f2      	b.n	800aed6 <_dtoa_r+0x35e>
 800aef0:	07e1      	lsls	r1, r4, #31
 800aef2:	d508      	bpl.n	800af06 <_dtoa_r+0x38e>
 800aef4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aefc:	f7f5 faec 	bl	80004d8 <__aeabi_dmul>
 800af00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af04:	3701      	adds	r7, #1
 800af06:	1064      	asrs	r4, r4, #1
 800af08:	3608      	adds	r6, #8
 800af0a:	e7e5      	b.n	800aed8 <_dtoa_r+0x360>
 800af0c:	f000 80a5 	beq.w	800b05a <_dtoa_r+0x4e2>
 800af10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af14:	f1cb 0400 	rsb	r4, fp, #0
 800af18:	4b7c      	ldr	r3, [pc, #496]	; (800b10c <_dtoa_r+0x594>)
 800af1a:	f004 020f 	and.w	r2, r4, #15
 800af1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f7f5 fad7 	bl	80004d8 <__aeabi_dmul>
 800af2a:	2702      	movs	r7, #2
 800af2c:	2300      	movs	r3, #0
 800af2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af32:	4e77      	ldr	r6, [pc, #476]	; (800b110 <_dtoa_r+0x598>)
 800af34:	1124      	asrs	r4, r4, #4
 800af36:	2c00      	cmp	r4, #0
 800af38:	f040 8084 	bne.w	800b044 <_dtoa_r+0x4cc>
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1d2      	bne.n	800aee6 <_dtoa_r+0x36e>
 800af40:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af44:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8087 	beq.w	800b05e <_dtoa_r+0x4e6>
 800af50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af54:	2200      	movs	r2, #0
 800af56:	4b6f      	ldr	r3, [pc, #444]	; (800b114 <_dtoa_r+0x59c>)
 800af58:	f7f5 fd30 	bl	80009bc <__aeabi_dcmplt>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d07e      	beq.n	800b05e <_dtoa_r+0x4e6>
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d07b      	beq.n	800b05e <_dtoa_r+0x4e6>
 800af66:	9b06      	ldr	r3, [sp, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd38      	ble.n	800afde <_dtoa_r+0x466>
 800af6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af70:	2200      	movs	r2, #0
 800af72:	4b69      	ldr	r3, [pc, #420]	; (800b118 <_dtoa_r+0x5a0>)
 800af74:	f7f5 fab0 	bl	80004d8 <__aeabi_dmul>
 800af78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af7c:	9c06      	ldr	r4, [sp, #24]
 800af7e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800af82:	3701      	adds	r7, #1
 800af84:	4638      	mov	r0, r7
 800af86:	f7f5 fa3d 	bl	8000404 <__aeabi_i2d>
 800af8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af8e:	f7f5 faa3 	bl	80004d8 <__aeabi_dmul>
 800af92:	2200      	movs	r2, #0
 800af94:	4b61      	ldr	r3, [pc, #388]	; (800b11c <_dtoa_r+0x5a4>)
 800af96:	f7f5 f8e9 	bl	800016c <__adddf3>
 800af9a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afa2:	9611      	str	r6, [sp, #68]	; 0x44
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	d15d      	bne.n	800b064 <_dtoa_r+0x4ec>
 800afa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afac:	2200      	movs	r2, #0
 800afae:	4b5c      	ldr	r3, [pc, #368]	; (800b120 <_dtoa_r+0x5a8>)
 800afb0:	f7f5 f8da 	bl	8000168 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afbc:	4633      	mov	r3, r6
 800afbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afc0:	f7f5 fd1a 	bl	80009f8 <__aeabi_dcmpgt>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f040 8295 	bne.w	800b4f4 <_dtoa_r+0x97c>
 800afca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afd0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800afd4:	f7f5 fcf2 	bl	80009bc <__aeabi_dcmplt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	f040 8289 	bne.w	800b4f0 <_dtoa_r+0x978>
 800afde:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800afe2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800afe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f2c0 8151 	blt.w	800b290 <_dtoa_r+0x718>
 800afee:	f1bb 0f0e 	cmp.w	fp, #14
 800aff2:	f300 814d 	bgt.w	800b290 <_dtoa_r+0x718>
 800aff6:	4b45      	ldr	r3, [pc, #276]	; (800b10c <_dtoa_r+0x594>)
 800aff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800affc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b000:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b006:	2b00      	cmp	r3, #0
 800b008:	f280 80da 	bge.w	800b1c0 <_dtoa_r+0x648>
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f300 80d6 	bgt.w	800b1c0 <_dtoa_r+0x648>
 800b014:	f040 826b 	bne.w	800b4ee <_dtoa_r+0x976>
 800b018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b01c:	2200      	movs	r2, #0
 800b01e:	4b40      	ldr	r3, [pc, #256]	; (800b120 <_dtoa_r+0x5a8>)
 800b020:	f7f5 fa5a 	bl	80004d8 <__aeabi_dmul>
 800b024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b028:	f7f5 fcdc 	bl	80009e4 <__aeabi_dcmpge>
 800b02c:	9c08      	ldr	r4, [sp, #32]
 800b02e:	4626      	mov	r6, r4
 800b030:	2800      	cmp	r0, #0
 800b032:	f040 8241 	bne.w	800b4b8 <_dtoa_r+0x940>
 800b036:	2331      	movs	r3, #49	; 0x31
 800b038:	9f03      	ldr	r7, [sp, #12]
 800b03a:	f10b 0b01 	add.w	fp, fp, #1
 800b03e:	f807 3b01 	strb.w	r3, [r7], #1
 800b042:	e23d      	b.n	800b4c0 <_dtoa_r+0x948>
 800b044:	07e2      	lsls	r2, r4, #31
 800b046:	d505      	bpl.n	800b054 <_dtoa_r+0x4dc>
 800b048:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b04c:	f7f5 fa44 	bl	80004d8 <__aeabi_dmul>
 800b050:	2301      	movs	r3, #1
 800b052:	3701      	adds	r7, #1
 800b054:	1064      	asrs	r4, r4, #1
 800b056:	3608      	adds	r6, #8
 800b058:	e76d      	b.n	800af36 <_dtoa_r+0x3be>
 800b05a:	2702      	movs	r7, #2
 800b05c:	e770      	b.n	800af40 <_dtoa_r+0x3c8>
 800b05e:	46d8      	mov	r8, fp
 800b060:	9c08      	ldr	r4, [sp, #32]
 800b062:	e78f      	b.n	800af84 <_dtoa_r+0x40c>
 800b064:	9903      	ldr	r1, [sp, #12]
 800b066:	4b29      	ldr	r3, [pc, #164]	; (800b10c <_dtoa_r+0x594>)
 800b068:	4421      	add	r1, r4
 800b06a:	9112      	str	r1, [sp, #72]	; 0x48
 800b06c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b06e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b072:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b076:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b07a:	2900      	cmp	r1, #0
 800b07c:	d054      	beq.n	800b128 <_dtoa_r+0x5b0>
 800b07e:	2000      	movs	r0, #0
 800b080:	4928      	ldr	r1, [pc, #160]	; (800b124 <_dtoa_r+0x5ac>)
 800b082:	f7f5 fb53 	bl	800072c <__aeabi_ddiv>
 800b086:	463b      	mov	r3, r7
 800b088:	4632      	mov	r2, r6
 800b08a:	f7f5 f86d 	bl	8000168 <__aeabi_dsub>
 800b08e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b092:	9f03      	ldr	r7, [sp, #12]
 800b094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b098:	f7f5 fcce 	bl	8000a38 <__aeabi_d2iz>
 800b09c:	4604      	mov	r4, r0
 800b09e:	f7f5 f9b1 	bl	8000404 <__aeabi_i2d>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0aa:	f7f5 f85d 	bl	8000168 <__aeabi_dsub>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	3430      	adds	r4, #48	; 0x30
 800b0b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0bc:	f807 4b01 	strb.w	r4, [r7], #1
 800b0c0:	f7f5 fc7c 	bl	80009bc <__aeabi_dcmplt>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d173      	bne.n	800b1b0 <_dtoa_r+0x638>
 800b0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	4911      	ldr	r1, [pc, #68]	; (800b114 <_dtoa_r+0x59c>)
 800b0d0:	f7f5 f84a 	bl	8000168 <__aeabi_dsub>
 800b0d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0d8:	f7f5 fc70 	bl	80009bc <__aeabi_dcmplt>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	f040 80b6 	bne.w	800b24e <_dtoa_r+0x6d6>
 800b0e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0e4:	429f      	cmp	r7, r3
 800b0e6:	f43f af7a 	beq.w	800afde <_dtoa_r+0x466>
 800b0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <_dtoa_r+0x5a0>)
 800b0f2:	f7f5 f9f1 	bl	80004d8 <__aeabi_dmul>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b100:	4b05      	ldr	r3, [pc, #20]	; (800b118 <_dtoa_r+0x5a0>)
 800b102:	f7f5 f9e9 	bl	80004d8 <__aeabi_dmul>
 800b106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b10a:	e7c3      	b.n	800b094 <_dtoa_r+0x51c>
 800b10c:	0800d938 	.word	0x0800d938
 800b110:	0800d910 	.word	0x0800d910
 800b114:	3ff00000 	.word	0x3ff00000
 800b118:	40240000 	.word	0x40240000
 800b11c:	401c0000 	.word	0x401c0000
 800b120:	40140000 	.word	0x40140000
 800b124:	3fe00000 	.word	0x3fe00000
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 f9d4 	bl	80004d8 <__aeabi_dmul>
 800b130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b132:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b136:	9c03      	ldr	r4, [sp, #12]
 800b138:	9314      	str	r3, [sp, #80]	; 0x50
 800b13a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b13e:	f7f5 fc7b 	bl	8000a38 <__aeabi_d2iz>
 800b142:	9015      	str	r0, [sp, #84]	; 0x54
 800b144:	f7f5 f95e 	bl	8000404 <__aeabi_i2d>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b150:	f7f5 f80a 	bl	8000168 <__aeabi_dsub>
 800b154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b156:	4606      	mov	r6, r0
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	f804 3b01 	strb.w	r3, [r4], #1
 800b15e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b160:	460f      	mov	r7, r1
 800b162:	429c      	cmp	r4, r3
 800b164:	f04f 0200 	mov.w	r2, #0
 800b168:	d124      	bne.n	800b1b4 <_dtoa_r+0x63c>
 800b16a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b16e:	4baf      	ldr	r3, [pc, #700]	; (800b42c <_dtoa_r+0x8b4>)
 800b170:	f7f4 fffc 	bl	800016c <__adddf3>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4630      	mov	r0, r6
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 fc3c 	bl	80009f8 <__aeabi_dcmpgt>
 800b180:	2800      	cmp	r0, #0
 800b182:	d163      	bne.n	800b24c <_dtoa_r+0x6d4>
 800b184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b188:	2000      	movs	r0, #0
 800b18a:	49a8      	ldr	r1, [pc, #672]	; (800b42c <_dtoa_r+0x8b4>)
 800b18c:	f7f4 ffec 	bl	8000168 <__aeabi_dsub>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fc10 	bl	80009bc <__aeabi_dcmplt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f43f af1e 	beq.w	800afde <_dtoa_r+0x466>
 800b1a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b1a4:	1e7b      	subs	r3, r7, #1
 800b1a6:	9314      	str	r3, [sp, #80]	; 0x50
 800b1a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b1ac:	2b30      	cmp	r3, #48	; 0x30
 800b1ae:	d0f8      	beq.n	800b1a2 <_dtoa_r+0x62a>
 800b1b0:	46c3      	mov	fp, r8
 800b1b2:	e03b      	b.n	800b22c <_dtoa_r+0x6b4>
 800b1b4:	4b9e      	ldr	r3, [pc, #632]	; (800b430 <_dtoa_r+0x8b8>)
 800b1b6:	f7f5 f98f 	bl	80004d8 <__aeabi_dmul>
 800b1ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1be:	e7bc      	b.n	800b13a <_dtoa_r+0x5c2>
 800b1c0:	9f03      	ldr	r7, [sp, #12]
 800b1c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b1c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	f7f5 faad 	bl	800072c <__aeabi_ddiv>
 800b1d2:	f7f5 fc31 	bl	8000a38 <__aeabi_d2iz>
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	f7f5 f914 	bl	8000404 <__aeabi_i2d>
 800b1dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1e0:	f7f5 f97a 	bl	80004d8 <__aeabi_dmul>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	f7f4 ffbc 	bl	8000168 <__aeabi_dsub>
 800b1f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b1f4:	f807 6b01 	strb.w	r6, [r7], #1
 800b1f8:	9e03      	ldr	r6, [sp, #12]
 800b1fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b1fe:	1bbe      	subs	r6, r7, r6
 800b200:	45b4      	cmp	ip, r6
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	d136      	bne.n	800b276 <_dtoa_r+0x6fe>
 800b208:	f7f4 ffb0 	bl	800016c <__adddf3>
 800b20c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b210:	4680      	mov	r8, r0
 800b212:	4689      	mov	r9, r1
 800b214:	f7f5 fbf0 	bl	80009f8 <__aeabi_dcmpgt>
 800b218:	bb58      	cbnz	r0, 800b272 <_dtoa_r+0x6fa>
 800b21a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 800b226:	b108      	cbz	r0, 800b22c <_dtoa_r+0x6b4>
 800b228:	07e3      	lsls	r3, r4, #31
 800b22a:	d422      	bmi.n	800b272 <_dtoa_r+0x6fa>
 800b22c:	4651      	mov	r1, sl
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 fe7a 	bl	800bf28 <_Bfree>
 800b234:	2300      	movs	r3, #0
 800b236:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b238:	703b      	strb	r3, [r7, #0]
 800b23a:	f10b 0301 	add.w	r3, fp, #1
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b242:	2b00      	cmp	r3, #0
 800b244:	f43f ace6 	beq.w	800ac14 <_dtoa_r+0x9c>
 800b248:	601f      	str	r7, [r3, #0]
 800b24a:	e4e3      	b.n	800ac14 <_dtoa_r+0x9c>
 800b24c:	4627      	mov	r7, r4
 800b24e:	463b      	mov	r3, r7
 800b250:	461f      	mov	r7, r3
 800b252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b256:	2a39      	cmp	r2, #57	; 0x39
 800b258:	d107      	bne.n	800b26a <_dtoa_r+0x6f2>
 800b25a:	9a03      	ldr	r2, [sp, #12]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d1f7      	bne.n	800b250 <_dtoa_r+0x6d8>
 800b260:	2230      	movs	r2, #48	; 0x30
 800b262:	9903      	ldr	r1, [sp, #12]
 800b264:	f108 0801 	add.w	r8, r8, #1
 800b268:	700a      	strb	r2, [r1, #0]
 800b26a:	781a      	ldrb	r2, [r3, #0]
 800b26c:	3201      	adds	r2, #1
 800b26e:	701a      	strb	r2, [r3, #0]
 800b270:	e79e      	b.n	800b1b0 <_dtoa_r+0x638>
 800b272:	46d8      	mov	r8, fp
 800b274:	e7eb      	b.n	800b24e <_dtoa_r+0x6d6>
 800b276:	2200      	movs	r2, #0
 800b278:	4b6d      	ldr	r3, [pc, #436]	; (800b430 <_dtoa_r+0x8b8>)
 800b27a:	f7f5 f92d 	bl	80004d8 <__aeabi_dmul>
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	4680      	mov	r8, r0
 800b284:	4689      	mov	r9, r1
 800b286:	f7f5 fb8f 	bl	80009a8 <__aeabi_dcmpeq>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d09b      	beq.n	800b1c6 <_dtoa_r+0x64e>
 800b28e:	e7cd      	b.n	800b22c <_dtoa_r+0x6b4>
 800b290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b292:	2a00      	cmp	r2, #0
 800b294:	f000 80c4 	beq.w	800b420 <_dtoa_r+0x8a8>
 800b298:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b29a:	2a01      	cmp	r2, #1
 800b29c:	f300 80a8 	bgt.w	800b3f0 <_dtoa_r+0x878>
 800b2a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	f000 80a0 	beq.w	800b3e8 <_dtoa_r+0x870>
 800b2a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2ac:	464f      	mov	r7, r9
 800b2ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	441a      	add	r2, r3
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	4499      	add	r9, r3
 800b2ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b2bc:	f000 ff34 	bl	800c128 <__i2b>
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	b15f      	cbz	r7, 800b2dc <_dtoa_r+0x764>
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dd08      	ble.n	800b2dc <_dtoa_r+0x764>
 800b2ca:	42bb      	cmp	r3, r7
 800b2cc:	bfa8      	it	ge
 800b2ce:	463b      	movge	r3, r7
 800b2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d2:	eba9 0903 	sub.w	r9, r9, r3
 800b2d6:	1aff      	subs	r7, r7, r3
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	9309      	str	r3, [sp, #36]	; 0x24
 800b2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2de:	b1f3      	cbz	r3, 800b31e <_dtoa_r+0x7a6>
 800b2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 80a0 	beq.w	800b428 <_dtoa_r+0x8b0>
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	dd10      	ble.n	800b30e <_dtoa_r+0x796>
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 ffd7 	bl	800c2a4 <__pow5mult>
 800b2f6:	4652      	mov	r2, sl
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f000 ff29 	bl	800c154 <__multiply>
 800b302:	4680      	mov	r8, r0
 800b304:	4651      	mov	r1, sl
 800b306:	4628      	mov	r0, r5
 800b308:	f000 fe0e 	bl	800bf28 <_Bfree>
 800b30c:	46c2      	mov	sl, r8
 800b30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b310:	1b1a      	subs	r2, r3, r4
 800b312:	d004      	beq.n	800b31e <_dtoa_r+0x7a6>
 800b314:	4651      	mov	r1, sl
 800b316:	4628      	mov	r0, r5
 800b318:	f000 ffc4 	bl	800c2a4 <__pow5mult>
 800b31c:	4682      	mov	sl, r0
 800b31e:	2101      	movs	r1, #1
 800b320:	4628      	mov	r0, r5
 800b322:	f000 ff01 	bl	800c128 <__i2b>
 800b326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b328:	4604      	mov	r4, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f340 8082 	ble.w	800b434 <_dtoa_r+0x8bc>
 800b330:	461a      	mov	r2, r3
 800b332:	4601      	mov	r1, r0
 800b334:	4628      	mov	r0, r5
 800b336:	f000 ffb5 	bl	800c2a4 <__pow5mult>
 800b33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b33c:	4604      	mov	r4, r0
 800b33e:	2b01      	cmp	r3, #1
 800b340:	dd7b      	ble.n	800b43a <_dtoa_r+0x8c2>
 800b342:	f04f 0800 	mov.w	r8, #0
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b34c:	6918      	ldr	r0, [r3, #16]
 800b34e:	f000 fe9d 	bl	800c08c <__hi0bits>
 800b352:	f1c0 0020 	rsb	r0, r0, #32
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	4418      	add	r0, r3
 800b35a:	f010 001f 	ands.w	r0, r0, #31
 800b35e:	f000 8092 	beq.w	800b486 <_dtoa_r+0x90e>
 800b362:	f1c0 0320 	rsb	r3, r0, #32
 800b366:	2b04      	cmp	r3, #4
 800b368:	f340 8085 	ble.w	800b476 <_dtoa_r+0x8fe>
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	f1c0 001c 	rsb	r0, r0, #28
 800b372:	4403      	add	r3, r0
 800b374:	4481      	add	r9, r0
 800b376:	4407      	add	r7, r0
 800b378:	9309      	str	r3, [sp, #36]	; 0x24
 800b37a:	f1b9 0f00 	cmp.w	r9, #0
 800b37e:	dd05      	ble.n	800b38c <_dtoa_r+0x814>
 800b380:	4651      	mov	r1, sl
 800b382:	464a      	mov	r2, r9
 800b384:	4628      	mov	r0, r5
 800b386:	f000 ffe7 	bl	800c358 <__lshift>
 800b38a:	4682      	mov	sl, r0
 800b38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dd05      	ble.n	800b39e <_dtoa_r+0x826>
 800b392:	4621      	mov	r1, r4
 800b394:	461a      	mov	r2, r3
 800b396:	4628      	mov	r0, r5
 800b398:	f000 ffde 	bl	800c358 <__lshift>
 800b39c:	4604      	mov	r4, r0
 800b39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d072      	beq.n	800b48a <_dtoa_r+0x912>
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	f001 f842 	bl	800c430 <__mcmp>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	da6c      	bge.n	800b48a <_dtoa_r+0x912>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4651      	mov	r1, sl
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 fdd8 	bl	800bf6c <__multadd>
 800b3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3be:	4682      	mov	sl, r0
 800b3c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 81ac 	beq.w	800b722 <_dtoa_r+0xbaa>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	220a      	movs	r2, #10
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f000 fdcb 	bl	800bf6c <__multadd>
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	4606      	mov	r6, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f300 8093 	bgt.w	800b506 <_dtoa_r+0x98e>
 800b3e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	dc59      	bgt.n	800b49a <_dtoa_r+0x922>
 800b3e6:	e08e      	b.n	800b506 <_dtoa_r+0x98e>
 800b3e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3ee:	e75d      	b.n	800b2ac <_dtoa_r+0x734>
 800b3f0:	9b08      	ldr	r3, [sp, #32]
 800b3f2:	1e5c      	subs	r4, r3, #1
 800b3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	bfbf      	itttt	lt
 800b3fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b3fe:	1ae3      	sublt	r3, r4, r3
 800b400:	18d2      	addlt	r2, r2, r3
 800b402:	bfa8      	it	ge
 800b404:	1b1c      	subge	r4, r3, r4
 800b406:	9b08      	ldr	r3, [sp, #32]
 800b408:	bfbe      	ittt	lt
 800b40a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b40c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b40e:	2400      	movlt	r4, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfb5      	itete	lt
 800b414:	eba9 0703 	sublt.w	r7, r9, r3
 800b418:	464f      	movge	r7, r9
 800b41a:	2300      	movlt	r3, #0
 800b41c:	9b08      	ldrge	r3, [sp, #32]
 800b41e:	e747      	b.n	800b2b0 <_dtoa_r+0x738>
 800b420:	464f      	mov	r7, r9
 800b422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b426:	e74c      	b.n	800b2c2 <_dtoa_r+0x74a>
 800b428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42a:	e773      	b.n	800b314 <_dtoa_r+0x79c>
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	40240000 	.word	0x40240000
 800b434:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b436:	2b01      	cmp	r3, #1
 800b438:	dc18      	bgt.n	800b46c <_dtoa_r+0x8f4>
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	b9b3      	cbnz	r3, 800b46c <_dtoa_r+0x8f4>
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b444:	b993      	cbnz	r3, 800b46c <_dtoa_r+0x8f4>
 800b446:	9b05      	ldr	r3, [sp, #20]
 800b448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b44c:	0d1b      	lsrs	r3, r3, #20
 800b44e:	051b      	lsls	r3, r3, #20
 800b450:	b17b      	cbz	r3, 800b472 <_dtoa_r+0x8fa>
 800b452:	f04f 0801 	mov.w	r8, #1
 800b456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b458:	f109 0901 	add.w	r9, r9, #1
 800b45c:	3301      	adds	r3, #1
 800b45e:	9309      	str	r3, [sp, #36]	; 0x24
 800b460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b462:	2b00      	cmp	r3, #0
 800b464:	f47f af6f 	bne.w	800b346 <_dtoa_r+0x7ce>
 800b468:	2001      	movs	r0, #1
 800b46a:	e774      	b.n	800b356 <_dtoa_r+0x7de>
 800b46c:	f04f 0800 	mov.w	r8, #0
 800b470:	e7f6      	b.n	800b460 <_dtoa_r+0x8e8>
 800b472:	4698      	mov	r8, r3
 800b474:	e7f4      	b.n	800b460 <_dtoa_r+0x8e8>
 800b476:	d080      	beq.n	800b37a <_dtoa_r+0x802>
 800b478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47a:	331c      	adds	r3, #28
 800b47c:	441a      	add	r2, r3
 800b47e:	4499      	add	r9, r3
 800b480:	441f      	add	r7, r3
 800b482:	9209      	str	r2, [sp, #36]	; 0x24
 800b484:	e779      	b.n	800b37a <_dtoa_r+0x802>
 800b486:	4603      	mov	r3, r0
 800b488:	e7f6      	b.n	800b478 <_dtoa_r+0x900>
 800b48a:	9b08      	ldr	r3, [sp, #32]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dc34      	bgt.n	800b4fa <_dtoa_r+0x982>
 800b490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b492:	2b02      	cmp	r3, #2
 800b494:	dd31      	ble.n	800b4fa <_dtoa_r+0x982>
 800b496:	9b08      	ldr	r3, [sp, #32]
 800b498:	9306      	str	r3, [sp, #24]
 800b49a:	9b06      	ldr	r3, [sp, #24]
 800b49c:	b963      	cbnz	r3, 800b4b8 <_dtoa_r+0x940>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	2205      	movs	r2, #5
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 fd62 	bl	800bf6c <__multadd>
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4650      	mov	r0, sl
 800b4ae:	f000 ffbf 	bl	800c430 <__mcmp>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f73f adbf 	bgt.w	800b036 <_dtoa_r+0x4be>
 800b4b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4ba:	9f03      	ldr	r7, [sp, #12]
 800b4bc:	ea6f 0b03 	mvn.w	fp, r3
 800b4c0:	f04f 0800 	mov.w	r8, #0
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f000 fd2e 	bl	800bf28 <_Bfree>
 800b4cc:	2e00      	cmp	r6, #0
 800b4ce:	f43f aead 	beq.w	800b22c <_dtoa_r+0x6b4>
 800b4d2:	f1b8 0f00 	cmp.w	r8, #0
 800b4d6:	d005      	beq.n	800b4e4 <_dtoa_r+0x96c>
 800b4d8:	45b0      	cmp	r8, r6
 800b4da:	d003      	beq.n	800b4e4 <_dtoa_r+0x96c>
 800b4dc:	4641      	mov	r1, r8
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 fd22 	bl	800bf28 <_Bfree>
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 fd1e 	bl	800bf28 <_Bfree>
 800b4ec:	e69e      	b.n	800b22c <_dtoa_r+0x6b4>
 800b4ee:	2400      	movs	r4, #0
 800b4f0:	4626      	mov	r6, r4
 800b4f2:	e7e1      	b.n	800b4b8 <_dtoa_r+0x940>
 800b4f4:	46c3      	mov	fp, r8
 800b4f6:	4626      	mov	r6, r4
 800b4f8:	e59d      	b.n	800b036 <_dtoa_r+0x4be>
 800b4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 80c8 	beq.w	800b692 <_dtoa_r+0xb1a>
 800b502:	9b08      	ldr	r3, [sp, #32]
 800b504:	9306      	str	r3, [sp, #24]
 800b506:	2f00      	cmp	r7, #0
 800b508:	dd05      	ble.n	800b516 <_dtoa_r+0x99e>
 800b50a:	4631      	mov	r1, r6
 800b50c:	463a      	mov	r2, r7
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 ff22 	bl	800c358 <__lshift>
 800b514:	4606      	mov	r6, r0
 800b516:	f1b8 0f00 	cmp.w	r8, #0
 800b51a:	d05b      	beq.n	800b5d4 <_dtoa_r+0xa5c>
 800b51c:	4628      	mov	r0, r5
 800b51e:	6871      	ldr	r1, [r6, #4]
 800b520:	f000 fcc2 	bl	800bea8 <_Balloc>
 800b524:	4607      	mov	r7, r0
 800b526:	b928      	cbnz	r0, 800b534 <_dtoa_r+0x9bc>
 800b528:	4602      	mov	r2, r0
 800b52a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b52e:	4b81      	ldr	r3, [pc, #516]	; (800b734 <_dtoa_r+0xbbc>)
 800b530:	f7ff bb36 	b.w	800aba0 <_dtoa_r+0x28>
 800b534:	6932      	ldr	r2, [r6, #16]
 800b536:	f106 010c 	add.w	r1, r6, #12
 800b53a:	3202      	adds	r2, #2
 800b53c:	0092      	lsls	r2, r2, #2
 800b53e:	300c      	adds	r0, #12
 800b540:	f7ff fa5c 	bl	800a9fc <memcpy>
 800b544:	2201      	movs	r2, #1
 800b546:	4639      	mov	r1, r7
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 ff05 	bl	800c358 <__lshift>
 800b54e:	46b0      	mov	r8, r6
 800b550:	4606      	mov	r6, r0
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	9a03      	ldr	r2, [sp, #12]
 800b556:	3301      	adds	r3, #1
 800b558:	9308      	str	r3, [sp, #32]
 800b55a:	9b06      	ldr	r3, [sp, #24]
 800b55c:	4413      	add	r3, r2
 800b55e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	930a      	str	r3, [sp, #40]	; 0x28
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	4621      	mov	r1, r4
 800b56c:	3b01      	subs	r3, #1
 800b56e:	4650      	mov	r0, sl
 800b570:	9304      	str	r3, [sp, #16]
 800b572:	f7ff fa75 	bl	800aa60 <quorem>
 800b576:	4641      	mov	r1, r8
 800b578:	9006      	str	r0, [sp, #24]
 800b57a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b57e:	4650      	mov	r0, sl
 800b580:	f000 ff56 	bl	800c430 <__mcmp>
 800b584:	4632      	mov	r2, r6
 800b586:	9009      	str	r0, [sp, #36]	; 0x24
 800b588:	4621      	mov	r1, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 ff6c 	bl	800c468 <__mdiff>
 800b590:	68c2      	ldr	r2, [r0, #12]
 800b592:	4607      	mov	r7, r0
 800b594:	bb02      	cbnz	r2, 800b5d8 <_dtoa_r+0xa60>
 800b596:	4601      	mov	r1, r0
 800b598:	4650      	mov	r0, sl
 800b59a:	f000 ff49 	bl	800c430 <__mcmp>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	920c      	str	r2, [sp, #48]	; 0x30
 800b5a6:	f000 fcbf 	bl	800bf28 <_Bfree>
 800b5aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ae:	9f08      	ldr	r7, [sp, #32]
 800b5b0:	ea43 0102 	orr.w	r1, r3, r2
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b6:	4319      	orrs	r1, r3
 800b5b8:	d110      	bne.n	800b5dc <_dtoa_r+0xa64>
 800b5ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b5be:	d029      	beq.n	800b614 <_dtoa_r+0xa9c>
 800b5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	dd02      	ble.n	800b5cc <_dtoa_r+0xa54>
 800b5c6:	9b06      	ldr	r3, [sp, #24]
 800b5c8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	f883 9000 	strb.w	r9, [r3]
 800b5d2:	e777      	b.n	800b4c4 <_dtoa_r+0x94c>
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	e7ba      	b.n	800b54e <_dtoa_r+0x9d6>
 800b5d8:	2201      	movs	r2, #1
 800b5da:	e7e1      	b.n	800b5a0 <_dtoa_r+0xa28>
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	db04      	blt.n	800b5ec <_dtoa_r+0xa74>
 800b5e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5e8:	430b      	orrs	r3, r1
 800b5ea:	d120      	bne.n	800b62e <_dtoa_r+0xab6>
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	dded      	ble.n	800b5cc <_dtoa_r+0xa54>
 800b5f0:	4651      	mov	r1, sl
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	f000 feaf 	bl	800c358 <__lshift>
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	4682      	mov	sl, r0
 800b5fe:	f000 ff17 	bl	800c430 <__mcmp>
 800b602:	2800      	cmp	r0, #0
 800b604:	dc03      	bgt.n	800b60e <_dtoa_r+0xa96>
 800b606:	d1e1      	bne.n	800b5cc <_dtoa_r+0xa54>
 800b608:	f019 0f01 	tst.w	r9, #1
 800b60c:	d0de      	beq.n	800b5cc <_dtoa_r+0xa54>
 800b60e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b612:	d1d8      	bne.n	800b5c6 <_dtoa_r+0xa4e>
 800b614:	2339      	movs	r3, #57	; 0x39
 800b616:	9a04      	ldr	r2, [sp, #16]
 800b618:	7013      	strb	r3, [r2, #0]
 800b61a:	463b      	mov	r3, r7
 800b61c:	461f      	mov	r7, r3
 800b61e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b622:	3b01      	subs	r3, #1
 800b624:	2a39      	cmp	r2, #57	; 0x39
 800b626:	d06b      	beq.n	800b700 <_dtoa_r+0xb88>
 800b628:	3201      	adds	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e74a      	b.n	800b4c4 <_dtoa_r+0x94c>
 800b62e:	2a00      	cmp	r2, #0
 800b630:	dd07      	ble.n	800b642 <_dtoa_r+0xaca>
 800b632:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b636:	d0ed      	beq.n	800b614 <_dtoa_r+0xa9c>
 800b638:	9a04      	ldr	r2, [sp, #16]
 800b63a:	f109 0301 	add.w	r3, r9, #1
 800b63e:	7013      	strb	r3, [r2, #0]
 800b640:	e740      	b.n	800b4c4 <_dtoa_r+0x94c>
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b646:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d042      	beq.n	800b6d4 <_dtoa_r+0xb5c>
 800b64e:	4651      	mov	r1, sl
 800b650:	2300      	movs	r3, #0
 800b652:	220a      	movs	r2, #10
 800b654:	4628      	mov	r0, r5
 800b656:	f000 fc89 	bl	800bf6c <__multadd>
 800b65a:	45b0      	cmp	r8, r6
 800b65c:	4682      	mov	sl, r0
 800b65e:	f04f 0300 	mov.w	r3, #0
 800b662:	f04f 020a 	mov.w	r2, #10
 800b666:	4641      	mov	r1, r8
 800b668:	4628      	mov	r0, r5
 800b66a:	d107      	bne.n	800b67c <_dtoa_r+0xb04>
 800b66c:	f000 fc7e 	bl	800bf6c <__multadd>
 800b670:	4680      	mov	r8, r0
 800b672:	4606      	mov	r6, r0
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	3301      	adds	r3, #1
 800b678:	9308      	str	r3, [sp, #32]
 800b67a:	e775      	b.n	800b568 <_dtoa_r+0x9f0>
 800b67c:	f000 fc76 	bl	800bf6c <__multadd>
 800b680:	4631      	mov	r1, r6
 800b682:	4680      	mov	r8, r0
 800b684:	2300      	movs	r3, #0
 800b686:	220a      	movs	r2, #10
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 fc6f 	bl	800bf6c <__multadd>
 800b68e:	4606      	mov	r6, r0
 800b690:	e7f0      	b.n	800b674 <_dtoa_r+0xafc>
 800b692:	9b08      	ldr	r3, [sp, #32]
 800b694:	9306      	str	r3, [sp, #24]
 800b696:	9f03      	ldr	r7, [sp, #12]
 800b698:	4621      	mov	r1, r4
 800b69a:	4650      	mov	r0, sl
 800b69c:	f7ff f9e0 	bl	800aa60 <quorem>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6a6:	f807 9b01 	strb.w	r9, [r7], #1
 800b6aa:	1afa      	subs	r2, r7, r3
 800b6ac:	9b06      	ldr	r3, [sp, #24]
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	dd07      	ble.n	800b6c2 <_dtoa_r+0xb4a>
 800b6b2:	4651      	mov	r1, sl
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	220a      	movs	r2, #10
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 fc57 	bl	800bf6c <__multadd>
 800b6be:	4682      	mov	sl, r0
 800b6c0:	e7ea      	b.n	800b698 <_dtoa_r+0xb20>
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	f04f 0800 	mov.w	r8, #0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	bfcc      	ite	gt
 800b6cc:	461f      	movgt	r7, r3
 800b6ce:	2701      	movle	r7, #1
 800b6d0:	9b03      	ldr	r3, [sp, #12]
 800b6d2:	441f      	add	r7, r3
 800b6d4:	4651      	mov	r1, sl
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f000 fe3d 	bl	800c358 <__lshift>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4682      	mov	sl, r0
 800b6e2:	f000 fea5 	bl	800c430 <__mcmp>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	dc97      	bgt.n	800b61a <_dtoa_r+0xaa2>
 800b6ea:	d102      	bne.n	800b6f2 <_dtoa_r+0xb7a>
 800b6ec:	f019 0f01 	tst.w	r9, #1
 800b6f0:	d193      	bne.n	800b61a <_dtoa_r+0xaa2>
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	461f      	mov	r7, r3
 800b6f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6fa:	2a30      	cmp	r2, #48	; 0x30
 800b6fc:	d0fa      	beq.n	800b6f4 <_dtoa_r+0xb7c>
 800b6fe:	e6e1      	b.n	800b4c4 <_dtoa_r+0x94c>
 800b700:	9a03      	ldr	r2, [sp, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d18a      	bne.n	800b61c <_dtoa_r+0xaa4>
 800b706:	2331      	movs	r3, #49	; 0x31
 800b708:	f10b 0b01 	add.w	fp, fp, #1
 800b70c:	e797      	b.n	800b63e <_dtoa_r+0xac6>
 800b70e:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <_dtoa_r+0xbc0>)
 800b710:	f7ff ba9f 	b.w	800ac52 <_dtoa_r+0xda>
 800b714:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b716:	2b00      	cmp	r3, #0
 800b718:	f47f aa77 	bne.w	800ac0a <_dtoa_r+0x92>
 800b71c:	4b07      	ldr	r3, [pc, #28]	; (800b73c <_dtoa_r+0xbc4>)
 800b71e:	f7ff ba98 	b.w	800ac52 <_dtoa_r+0xda>
 800b722:	9b06      	ldr	r3, [sp, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dcb6      	bgt.n	800b696 <_dtoa_r+0xb1e>
 800b728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	f73f aeb5 	bgt.w	800b49a <_dtoa_r+0x922>
 800b730:	e7b1      	b.n	800b696 <_dtoa_r+0xb1e>
 800b732:	bf00      	nop
 800b734:	0800d846 	.word	0x0800d846
 800b738:	0800d779 	.word	0x0800d779
 800b73c:	0800d7e1 	.word	0x0800d7e1

0800b740 <_free_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4605      	mov	r5, r0
 800b744:	2900      	cmp	r1, #0
 800b746:	d040      	beq.n	800b7ca <_free_r+0x8a>
 800b748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b74c:	1f0c      	subs	r4, r1, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	bfb8      	it	lt
 800b752:	18e4      	addlt	r4, r4, r3
 800b754:	f7fd fa52 	bl	8008bfc <__malloc_lock>
 800b758:	4a1c      	ldr	r2, [pc, #112]	; (800b7cc <_free_r+0x8c>)
 800b75a:	6813      	ldr	r3, [r2, #0]
 800b75c:	b933      	cbnz	r3, 800b76c <_free_r+0x2c>
 800b75e:	6063      	str	r3, [r4, #4]
 800b760:	6014      	str	r4, [r2, #0]
 800b762:	4628      	mov	r0, r5
 800b764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b768:	f7fd ba4e 	b.w	8008c08 <__malloc_unlock>
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d908      	bls.n	800b782 <_free_r+0x42>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	1821      	adds	r1, r4, r0
 800b774:	428b      	cmp	r3, r1
 800b776:	bf01      	itttt	eq
 800b778:	6819      	ldreq	r1, [r3, #0]
 800b77a:	685b      	ldreq	r3, [r3, #4]
 800b77c:	1809      	addeq	r1, r1, r0
 800b77e:	6021      	streq	r1, [r4, #0]
 800b780:	e7ed      	b.n	800b75e <_free_r+0x1e>
 800b782:	461a      	mov	r2, r3
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	b10b      	cbz	r3, 800b78c <_free_r+0x4c>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d9fa      	bls.n	800b782 <_free_r+0x42>
 800b78c:	6811      	ldr	r1, [r2, #0]
 800b78e:	1850      	adds	r0, r2, r1
 800b790:	42a0      	cmp	r0, r4
 800b792:	d10b      	bne.n	800b7ac <_free_r+0x6c>
 800b794:	6820      	ldr	r0, [r4, #0]
 800b796:	4401      	add	r1, r0
 800b798:	1850      	adds	r0, r2, r1
 800b79a:	4283      	cmp	r3, r0
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	d1e0      	bne.n	800b762 <_free_r+0x22>
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	4408      	add	r0, r1
 800b7a6:	6010      	str	r0, [r2, #0]
 800b7a8:	6053      	str	r3, [r2, #4]
 800b7aa:	e7da      	b.n	800b762 <_free_r+0x22>
 800b7ac:	d902      	bls.n	800b7b4 <_free_r+0x74>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	e7d6      	b.n	800b762 <_free_r+0x22>
 800b7b4:	6820      	ldr	r0, [r4, #0]
 800b7b6:	1821      	adds	r1, r4, r0
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	bf01      	itttt	eq
 800b7bc:	6819      	ldreq	r1, [r3, #0]
 800b7be:	685b      	ldreq	r3, [r3, #4]
 800b7c0:	1809      	addeq	r1, r1, r0
 800b7c2:	6021      	streq	r1, [r4, #0]
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6054      	str	r4, [r2, #4]
 800b7c8:	e7cb      	b.n	800b762 <_free_r+0x22>
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	200007f0 	.word	0x200007f0

0800b7d0 <rshift>:
 800b7d0:	6903      	ldr	r3, [r0, #16]
 800b7d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7da:	f100 0414 	add.w	r4, r0, #20
 800b7de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7e2:	dd46      	ble.n	800b872 <rshift+0xa2>
 800b7e4:	f011 011f 	ands.w	r1, r1, #31
 800b7e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7f0:	d10c      	bne.n	800b80c <rshift+0x3c>
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	f100 0710 	add.w	r7, r0, #16
 800b7f8:	42b1      	cmp	r1, r6
 800b7fa:	d335      	bcc.n	800b868 <rshift+0x98>
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	1eea      	subs	r2, r5, #3
 800b802:	4296      	cmp	r6, r2
 800b804:	bf38      	it	cc
 800b806:	2300      	movcc	r3, #0
 800b808:	4423      	add	r3, r4
 800b80a:	e015      	b.n	800b838 <rshift+0x68>
 800b80c:	46a1      	mov	r9, r4
 800b80e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b812:	f1c1 0820 	rsb	r8, r1, #32
 800b816:	40cf      	lsrs	r7, r1
 800b818:	f105 0e04 	add.w	lr, r5, #4
 800b81c:	4576      	cmp	r6, lr
 800b81e:	46f4      	mov	ip, lr
 800b820:	d816      	bhi.n	800b850 <rshift+0x80>
 800b822:	1a9a      	subs	r2, r3, r2
 800b824:	0092      	lsls	r2, r2, #2
 800b826:	3a04      	subs	r2, #4
 800b828:	3501      	adds	r5, #1
 800b82a:	42ae      	cmp	r6, r5
 800b82c:	bf38      	it	cc
 800b82e:	2200      	movcc	r2, #0
 800b830:	18a3      	adds	r3, r4, r2
 800b832:	50a7      	str	r7, [r4, r2]
 800b834:	b107      	cbz	r7, 800b838 <rshift+0x68>
 800b836:	3304      	adds	r3, #4
 800b838:	42a3      	cmp	r3, r4
 800b83a:	eba3 0204 	sub.w	r2, r3, r4
 800b83e:	bf08      	it	eq
 800b840:	2300      	moveq	r3, #0
 800b842:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b846:	6102      	str	r2, [r0, #16]
 800b848:	bf08      	it	eq
 800b84a:	6143      	streq	r3, [r0, #20]
 800b84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b850:	f8dc c000 	ldr.w	ip, [ip]
 800b854:	fa0c fc08 	lsl.w	ip, ip, r8
 800b858:	ea4c 0707 	orr.w	r7, ip, r7
 800b85c:	f849 7b04 	str.w	r7, [r9], #4
 800b860:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b864:	40cf      	lsrs	r7, r1
 800b866:	e7d9      	b.n	800b81c <rshift+0x4c>
 800b868:	f851 cb04 	ldr.w	ip, [r1], #4
 800b86c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b870:	e7c2      	b.n	800b7f8 <rshift+0x28>
 800b872:	4623      	mov	r3, r4
 800b874:	e7e0      	b.n	800b838 <rshift+0x68>

0800b876 <__hexdig_fun>:
 800b876:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d802      	bhi.n	800b884 <__hexdig_fun+0xe>
 800b87e:	3820      	subs	r0, #32
 800b880:	b2c0      	uxtb	r0, r0
 800b882:	4770      	bx	lr
 800b884:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b888:	2b05      	cmp	r3, #5
 800b88a:	d801      	bhi.n	800b890 <__hexdig_fun+0x1a>
 800b88c:	3847      	subs	r0, #71	; 0x47
 800b88e:	e7f7      	b.n	800b880 <__hexdig_fun+0xa>
 800b890:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b894:	2b05      	cmp	r3, #5
 800b896:	d801      	bhi.n	800b89c <__hexdig_fun+0x26>
 800b898:	3827      	subs	r0, #39	; 0x27
 800b89a:	e7f1      	b.n	800b880 <__hexdig_fun+0xa>
 800b89c:	2000      	movs	r0, #0
 800b89e:	4770      	bx	lr

0800b8a0 <__gethex>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	4681      	mov	r9, r0
 800b8a6:	468a      	mov	sl, r1
 800b8a8:	4617      	mov	r7, r2
 800b8aa:	680a      	ldr	r2, [r1, #0]
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	f102 0b02 	add.w	fp, r2, #2
 800b8b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8ba:	9302      	str	r3, [sp, #8]
 800b8bc:	32fe      	adds	r2, #254	; 0xfe
 800b8be:	eb02 030b 	add.w	r3, r2, fp
 800b8c2:	46d8      	mov	r8, fp
 800b8c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	2830      	cmp	r0, #48	; 0x30
 800b8cc:	d0f7      	beq.n	800b8be <__gethex+0x1e>
 800b8ce:	f7ff ffd2 	bl	800b876 <__hexdig_fun>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d138      	bne.n	800b94a <__gethex+0xaa>
 800b8d8:	2201      	movs	r2, #1
 800b8da:	4640      	mov	r0, r8
 800b8dc:	49a7      	ldr	r1, [pc, #668]	; (800bb7c <__gethex+0x2dc>)
 800b8de:	f7fe ff8c 	bl	800a7fa <strncmp>
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d169      	bne.n	800b9bc <__gethex+0x11c>
 800b8e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b8ec:	465d      	mov	r5, fp
 800b8ee:	f7ff ffc2 	bl	800b876 <__hexdig_fun>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d064      	beq.n	800b9c0 <__gethex+0x120>
 800b8f6:	465a      	mov	r2, fp
 800b8f8:	7810      	ldrb	r0, [r2, #0]
 800b8fa:	4690      	mov	r8, r2
 800b8fc:	2830      	cmp	r0, #48	; 0x30
 800b8fe:	f102 0201 	add.w	r2, r2, #1
 800b902:	d0f9      	beq.n	800b8f8 <__gethex+0x58>
 800b904:	f7ff ffb7 	bl	800b876 <__hexdig_fun>
 800b908:	2301      	movs	r3, #1
 800b90a:	fab0 f480 	clz	r4, r0
 800b90e:	465e      	mov	r6, fp
 800b910:	0964      	lsrs	r4, r4, #5
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	4642      	mov	r2, r8
 800b916:	4615      	mov	r5, r2
 800b918:	7828      	ldrb	r0, [r5, #0]
 800b91a:	3201      	adds	r2, #1
 800b91c:	f7ff ffab 	bl	800b876 <__hexdig_fun>
 800b920:	2800      	cmp	r0, #0
 800b922:	d1f8      	bne.n	800b916 <__gethex+0x76>
 800b924:	2201      	movs	r2, #1
 800b926:	4628      	mov	r0, r5
 800b928:	4994      	ldr	r1, [pc, #592]	; (800bb7c <__gethex+0x2dc>)
 800b92a:	f7fe ff66 	bl	800a7fa <strncmp>
 800b92e:	b978      	cbnz	r0, 800b950 <__gethex+0xb0>
 800b930:	b946      	cbnz	r6, 800b944 <__gethex+0xa4>
 800b932:	1c6e      	adds	r6, r5, #1
 800b934:	4632      	mov	r2, r6
 800b936:	4615      	mov	r5, r2
 800b938:	7828      	ldrb	r0, [r5, #0]
 800b93a:	3201      	adds	r2, #1
 800b93c:	f7ff ff9b 	bl	800b876 <__hexdig_fun>
 800b940:	2800      	cmp	r0, #0
 800b942:	d1f8      	bne.n	800b936 <__gethex+0x96>
 800b944:	1b73      	subs	r3, r6, r5
 800b946:	009e      	lsls	r6, r3, #2
 800b948:	e004      	b.n	800b954 <__gethex+0xb4>
 800b94a:	2400      	movs	r4, #0
 800b94c:	4626      	mov	r6, r4
 800b94e:	e7e1      	b.n	800b914 <__gethex+0x74>
 800b950:	2e00      	cmp	r6, #0
 800b952:	d1f7      	bne.n	800b944 <__gethex+0xa4>
 800b954:	782b      	ldrb	r3, [r5, #0]
 800b956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b95a:	2b50      	cmp	r3, #80	; 0x50
 800b95c:	d13d      	bne.n	800b9da <__gethex+0x13a>
 800b95e:	786b      	ldrb	r3, [r5, #1]
 800b960:	2b2b      	cmp	r3, #43	; 0x2b
 800b962:	d02f      	beq.n	800b9c4 <__gethex+0x124>
 800b964:	2b2d      	cmp	r3, #45	; 0x2d
 800b966:	d031      	beq.n	800b9cc <__gethex+0x12c>
 800b968:	f04f 0b00 	mov.w	fp, #0
 800b96c:	1c69      	adds	r1, r5, #1
 800b96e:	7808      	ldrb	r0, [r1, #0]
 800b970:	f7ff ff81 	bl	800b876 <__hexdig_fun>
 800b974:	1e42      	subs	r2, r0, #1
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	2a18      	cmp	r2, #24
 800b97a:	d82e      	bhi.n	800b9da <__gethex+0x13a>
 800b97c:	f1a0 0210 	sub.w	r2, r0, #16
 800b980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b984:	f7ff ff77 	bl	800b876 <__hexdig_fun>
 800b988:	f100 3cff 	add.w	ip, r0, #4294967295
 800b98c:	fa5f fc8c 	uxtb.w	ip, ip
 800b990:	f1bc 0f18 	cmp.w	ip, #24
 800b994:	d91d      	bls.n	800b9d2 <__gethex+0x132>
 800b996:	f1bb 0f00 	cmp.w	fp, #0
 800b99a:	d000      	beq.n	800b99e <__gethex+0xfe>
 800b99c:	4252      	negs	r2, r2
 800b99e:	4416      	add	r6, r2
 800b9a0:	f8ca 1000 	str.w	r1, [sl]
 800b9a4:	b1dc      	cbz	r4, 800b9de <__gethex+0x13e>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bf14      	ite	ne
 800b9ac:	f04f 0800 	movne.w	r8, #0
 800b9b0:	f04f 0806 	moveq.w	r8, #6
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	b005      	add	sp, #20
 800b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9bc:	4645      	mov	r5, r8
 800b9be:	4626      	mov	r6, r4
 800b9c0:	2401      	movs	r4, #1
 800b9c2:	e7c7      	b.n	800b954 <__gethex+0xb4>
 800b9c4:	f04f 0b00 	mov.w	fp, #0
 800b9c8:	1ca9      	adds	r1, r5, #2
 800b9ca:	e7d0      	b.n	800b96e <__gethex+0xce>
 800b9cc:	f04f 0b01 	mov.w	fp, #1
 800b9d0:	e7fa      	b.n	800b9c8 <__gethex+0x128>
 800b9d2:	230a      	movs	r3, #10
 800b9d4:	fb03 0002 	mla	r0, r3, r2, r0
 800b9d8:	e7d0      	b.n	800b97c <__gethex+0xdc>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	e7e0      	b.n	800b9a0 <__gethex+0x100>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	eba5 0308 	sub.w	r3, r5, r8
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	2b07      	cmp	r3, #7
 800b9e8:	dc0a      	bgt.n	800ba00 <__gethex+0x160>
 800b9ea:	4648      	mov	r0, r9
 800b9ec:	f000 fa5c 	bl	800bea8 <_Balloc>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b940      	cbnz	r0, 800ba06 <__gethex+0x166>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	21e4      	movs	r1, #228	; 0xe4
 800b9f8:	4b61      	ldr	r3, [pc, #388]	; (800bb80 <__gethex+0x2e0>)
 800b9fa:	4862      	ldr	r0, [pc, #392]	; (800bb84 <__gethex+0x2e4>)
 800b9fc:	f7ff f812 	bl	800aa24 <__assert_func>
 800ba00:	3101      	adds	r1, #1
 800ba02:	105b      	asrs	r3, r3, #1
 800ba04:	e7ef      	b.n	800b9e6 <__gethex+0x146>
 800ba06:	2300      	movs	r3, #0
 800ba08:	469b      	mov	fp, r3
 800ba0a:	f100 0a14 	add.w	sl, r0, #20
 800ba0e:	f8cd a004 	str.w	sl, [sp, #4]
 800ba12:	45a8      	cmp	r8, r5
 800ba14:	d344      	bcc.n	800baa0 <__gethex+0x200>
 800ba16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba1a:	4658      	mov	r0, fp
 800ba1c:	f848 bb04 	str.w	fp, [r8], #4
 800ba20:	eba8 080a 	sub.w	r8, r8, sl
 800ba24:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ba28:	6122      	str	r2, [r4, #16]
 800ba2a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ba2e:	f000 fb2d 	bl	800c08c <__hi0bits>
 800ba32:	683d      	ldr	r5, [r7, #0]
 800ba34:	eba8 0800 	sub.w	r8, r8, r0
 800ba38:	45a8      	cmp	r8, r5
 800ba3a:	dd59      	ble.n	800baf0 <__gethex+0x250>
 800ba3c:	eba8 0805 	sub.w	r8, r8, r5
 800ba40:	4641      	mov	r1, r8
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 feab 	bl	800c79e <__any_on>
 800ba48:	4683      	mov	fp, r0
 800ba4a:	b1b8      	cbz	r0, 800ba7c <__gethex+0x1dc>
 800ba4c:	f04f 0b01 	mov.w	fp, #1
 800ba50:	f108 33ff 	add.w	r3, r8, #4294967295
 800ba54:	1159      	asrs	r1, r3, #5
 800ba56:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba5a:	f003 021f 	and.w	r2, r3, #31
 800ba5e:	fa0b f202 	lsl.w	r2, fp, r2
 800ba62:	420a      	tst	r2, r1
 800ba64:	d00a      	beq.n	800ba7c <__gethex+0x1dc>
 800ba66:	455b      	cmp	r3, fp
 800ba68:	dd06      	ble.n	800ba78 <__gethex+0x1d8>
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f1a8 0102 	sub.w	r1, r8, #2
 800ba70:	f000 fe95 	bl	800c79e <__any_on>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d138      	bne.n	800baea <__gethex+0x24a>
 800ba78:	f04f 0b02 	mov.w	fp, #2
 800ba7c:	4641      	mov	r1, r8
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff fea6 	bl	800b7d0 <rshift>
 800ba84:	4446      	add	r6, r8
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	42b3      	cmp	r3, r6
 800ba8a:	da41      	bge.n	800bb10 <__gethex+0x270>
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4648      	mov	r0, r9
 800ba90:	f000 fa4a 	bl	800bf28 <_Bfree>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	e789      	b.n	800b9b4 <__gethex+0x114>
 800baa0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800baa4:	2a2e      	cmp	r2, #46	; 0x2e
 800baa6:	d014      	beq.n	800bad2 <__gethex+0x232>
 800baa8:	2b20      	cmp	r3, #32
 800baaa:	d106      	bne.n	800baba <__gethex+0x21a>
 800baac:	9b01      	ldr	r3, [sp, #4]
 800baae:	f843 bb04 	str.w	fp, [r3], #4
 800bab2:	f04f 0b00 	mov.w	fp, #0
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	465b      	mov	r3, fp
 800baba:	7828      	ldrb	r0, [r5, #0]
 800babc:	9303      	str	r3, [sp, #12]
 800babe:	f7ff feda 	bl	800b876 <__hexdig_fun>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	f000 000f 	and.w	r0, r0, #15
 800bac8:	4098      	lsls	r0, r3
 800baca:	ea4b 0b00 	orr.w	fp, fp, r0
 800bace:	3304      	adds	r3, #4
 800bad0:	e79f      	b.n	800ba12 <__gethex+0x172>
 800bad2:	45a8      	cmp	r8, r5
 800bad4:	d8e8      	bhi.n	800baa8 <__gethex+0x208>
 800bad6:	2201      	movs	r2, #1
 800bad8:	4628      	mov	r0, r5
 800bada:	4928      	ldr	r1, [pc, #160]	; (800bb7c <__gethex+0x2dc>)
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	f7fe fe8c 	bl	800a7fa <strncmp>
 800bae2:	9b03      	ldr	r3, [sp, #12]
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d1df      	bne.n	800baa8 <__gethex+0x208>
 800bae8:	e793      	b.n	800ba12 <__gethex+0x172>
 800baea:	f04f 0b03 	mov.w	fp, #3
 800baee:	e7c5      	b.n	800ba7c <__gethex+0x1dc>
 800baf0:	da0b      	bge.n	800bb0a <__gethex+0x26a>
 800baf2:	eba5 0808 	sub.w	r8, r5, r8
 800baf6:	4621      	mov	r1, r4
 800baf8:	4642      	mov	r2, r8
 800bafa:	4648      	mov	r0, r9
 800bafc:	f000 fc2c 	bl	800c358 <__lshift>
 800bb00:	4604      	mov	r4, r0
 800bb02:	eba6 0608 	sub.w	r6, r6, r8
 800bb06:	f100 0a14 	add.w	sl, r0, #20
 800bb0a:	f04f 0b00 	mov.w	fp, #0
 800bb0e:	e7ba      	b.n	800ba86 <__gethex+0x1e6>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	42b3      	cmp	r3, r6
 800bb14:	dd74      	ble.n	800bc00 <__gethex+0x360>
 800bb16:	1b9e      	subs	r6, r3, r6
 800bb18:	42b5      	cmp	r5, r6
 800bb1a:	dc35      	bgt.n	800bb88 <__gethex+0x2e8>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d023      	beq.n	800bb6a <__gethex+0x2ca>
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d025      	beq.n	800bb72 <__gethex+0x2d2>
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d115      	bne.n	800bb56 <__gethex+0x2b6>
 800bb2a:	42b5      	cmp	r5, r6
 800bb2c:	d113      	bne.n	800bb56 <__gethex+0x2b6>
 800bb2e:	2d01      	cmp	r5, #1
 800bb30:	d10b      	bne.n	800bb4a <__gethex+0x2aa>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	9a02      	ldr	r2, [sp, #8]
 800bb36:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	f8ca 3000 	str.w	r3, [sl]
 800bb44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb46:	601c      	str	r4, [r3, #0]
 800bb48:	e734      	b.n	800b9b4 <__gethex+0x114>
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	1e69      	subs	r1, r5, #1
 800bb4e:	f000 fe26 	bl	800c79e <__any_on>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1ed      	bne.n	800bb32 <__gethex+0x292>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4648      	mov	r0, r9
 800bb5a:	f000 f9e5 	bl	800bf28 <_Bfree>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb62:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	e724      	b.n	800b9b4 <__gethex+0x114>
 800bb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1f2      	bne.n	800bb56 <__gethex+0x2b6>
 800bb70:	e7df      	b.n	800bb32 <__gethex+0x292>
 800bb72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1dc      	bne.n	800bb32 <__gethex+0x292>
 800bb78:	e7ed      	b.n	800bb56 <__gethex+0x2b6>
 800bb7a:	bf00      	nop
 800bb7c:	0800d615 	.word	0x0800d615
 800bb80:	0800d846 	.word	0x0800d846
 800bb84:	0800d857 	.word	0x0800d857
 800bb88:	f106 38ff 	add.w	r8, r6, #4294967295
 800bb8c:	f1bb 0f00 	cmp.w	fp, #0
 800bb90:	d133      	bne.n	800bbfa <__gethex+0x35a>
 800bb92:	f1b8 0f00 	cmp.w	r8, #0
 800bb96:	d004      	beq.n	800bba2 <__gethex+0x302>
 800bb98:	4641      	mov	r1, r8
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fdff 	bl	800c79e <__any_on>
 800bba0:	4683      	mov	fp, r0
 800bba2:	2301      	movs	r3, #1
 800bba4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bba8:	f008 081f 	and.w	r8, r8, #31
 800bbac:	fa03 f308 	lsl.w	r3, r3, r8
 800bbb0:	f04f 0802 	mov.w	r8, #2
 800bbb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4213      	tst	r3, r2
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	bf18      	it	ne
 800bbc0:	f04b 0b02 	orrne.w	fp, fp, #2
 800bbc4:	1bad      	subs	r5, r5, r6
 800bbc6:	f7ff fe03 	bl	800b7d0 <rshift>
 800bbca:	687e      	ldr	r6, [r7, #4]
 800bbcc:	f1bb 0f00 	cmp.w	fp, #0
 800bbd0:	d04a      	beq.n	800bc68 <__gethex+0x3c8>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d016      	beq.n	800bc06 <__gethex+0x366>
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d018      	beq.n	800bc0e <__gethex+0x36e>
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d109      	bne.n	800bbf4 <__gethex+0x354>
 800bbe0:	f01b 0f02 	tst.w	fp, #2
 800bbe4:	d006      	beq.n	800bbf4 <__gethex+0x354>
 800bbe6:	f8da 3000 	ldr.w	r3, [sl]
 800bbea:	ea4b 0b03 	orr.w	fp, fp, r3
 800bbee:	f01b 0f01 	tst.w	fp, #1
 800bbf2:	d10f      	bne.n	800bc14 <__gethex+0x374>
 800bbf4:	f048 0810 	orr.w	r8, r8, #16
 800bbf8:	e036      	b.n	800bc68 <__gethex+0x3c8>
 800bbfa:	f04f 0b01 	mov.w	fp, #1
 800bbfe:	e7d0      	b.n	800bba2 <__gethex+0x302>
 800bc00:	f04f 0801 	mov.w	r8, #1
 800bc04:	e7e2      	b.n	800bbcc <__gethex+0x32c>
 800bc06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc08:	f1c3 0301 	rsb	r3, r3, #1
 800bc0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0ef      	beq.n	800bbf4 <__gethex+0x354>
 800bc14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc18:	f104 0214 	add.w	r2, r4, #20
 800bc1c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	2300      	movs	r3, #0
 800bc24:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bc28:	4694      	mov	ip, r2
 800bc2a:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc2e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bc32:	d01e      	beq.n	800bc72 <__gethex+0x3d2>
 800bc34:	3101      	adds	r1, #1
 800bc36:	f8cc 1000 	str.w	r1, [ip]
 800bc3a:	f1b8 0f02 	cmp.w	r8, #2
 800bc3e:	f104 0214 	add.w	r2, r4, #20
 800bc42:	d13d      	bne.n	800bcc0 <__gethex+0x420>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	d10b      	bne.n	800bc64 <__gethex+0x3c4>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	1169      	asrs	r1, r5, #5
 800bc50:	f005 051f 	and.w	r5, r5, #31
 800bc54:	fa03 f505 	lsl.w	r5, r3, r5
 800bc58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc5c:	421d      	tst	r5, r3
 800bc5e:	bf18      	it	ne
 800bc60:	f04f 0801 	movne.w	r8, #1
 800bc64:	f048 0820 	orr.w	r8, r8, #32
 800bc68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc6a:	601c      	str	r4, [r3, #0]
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	601e      	str	r6, [r3, #0]
 800bc70:	e6a0      	b.n	800b9b4 <__gethex+0x114>
 800bc72:	4290      	cmp	r0, r2
 800bc74:	f842 3c04 	str.w	r3, [r2, #-4]
 800bc78:	d8d6      	bhi.n	800bc28 <__gethex+0x388>
 800bc7a:	68a2      	ldr	r2, [r4, #8]
 800bc7c:	4593      	cmp	fp, r2
 800bc7e:	db17      	blt.n	800bcb0 <__gethex+0x410>
 800bc80:	6861      	ldr	r1, [r4, #4]
 800bc82:	4648      	mov	r0, r9
 800bc84:	3101      	adds	r1, #1
 800bc86:	f000 f90f 	bl	800bea8 <_Balloc>
 800bc8a:	4682      	mov	sl, r0
 800bc8c:	b918      	cbnz	r0, 800bc96 <__gethex+0x3f6>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	2184      	movs	r1, #132	; 0x84
 800bc92:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <__gethex+0x45c>)
 800bc94:	e6b1      	b.n	800b9fa <__gethex+0x15a>
 800bc96:	6922      	ldr	r2, [r4, #16]
 800bc98:	f104 010c 	add.w	r1, r4, #12
 800bc9c:	3202      	adds	r2, #2
 800bc9e:	0092      	lsls	r2, r2, #2
 800bca0:	300c      	adds	r0, #12
 800bca2:	f7fe feab 	bl	800a9fc <memcpy>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4648      	mov	r0, r9
 800bcaa:	f000 f93d 	bl	800bf28 <_Bfree>
 800bcae:	4654      	mov	r4, sl
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	1c51      	adds	r1, r2, #1
 800bcb4:	6121      	str	r1, [r4, #16]
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bcbc:	6151      	str	r1, [r2, #20]
 800bcbe:	e7bc      	b.n	800bc3a <__gethex+0x39a>
 800bcc0:	6921      	ldr	r1, [r4, #16]
 800bcc2:	4559      	cmp	r1, fp
 800bcc4:	dd0b      	ble.n	800bcde <__gethex+0x43e>
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f7ff fd81 	bl	800b7d0 <rshift>
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	3601      	adds	r6, #1
 800bcd2:	42b3      	cmp	r3, r6
 800bcd4:	f6ff aeda 	blt.w	800ba8c <__gethex+0x1ec>
 800bcd8:	f04f 0801 	mov.w	r8, #1
 800bcdc:	e7c2      	b.n	800bc64 <__gethex+0x3c4>
 800bcde:	f015 051f 	ands.w	r5, r5, #31
 800bce2:	d0f9      	beq.n	800bcd8 <__gethex+0x438>
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	f1c5 0520 	rsb	r5, r5, #32
 800bcea:	441a      	add	r2, r3
 800bcec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bcf0:	f000 f9cc 	bl	800c08c <__hi0bits>
 800bcf4:	42a8      	cmp	r0, r5
 800bcf6:	dbe6      	blt.n	800bcc6 <__gethex+0x426>
 800bcf8:	e7ee      	b.n	800bcd8 <__gethex+0x438>
 800bcfa:	bf00      	nop
 800bcfc:	0800d846 	.word	0x0800d846

0800bd00 <L_shift>:
 800bd00:	f1c2 0208 	rsb	r2, r2, #8
 800bd04:	0092      	lsls	r2, r2, #2
 800bd06:	b570      	push	{r4, r5, r6, lr}
 800bd08:	f1c2 0620 	rsb	r6, r2, #32
 800bd0c:	6843      	ldr	r3, [r0, #4]
 800bd0e:	6804      	ldr	r4, [r0, #0]
 800bd10:	fa03 f506 	lsl.w	r5, r3, r6
 800bd14:	432c      	orrs	r4, r5
 800bd16:	40d3      	lsrs	r3, r2
 800bd18:	6004      	str	r4, [r0, #0]
 800bd1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd1e:	4288      	cmp	r0, r1
 800bd20:	d3f4      	bcc.n	800bd0c <L_shift+0xc>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}

0800bd24 <__match>:
 800bd24:	b530      	push	{r4, r5, lr}
 800bd26:	6803      	ldr	r3, [r0, #0]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd2e:	b914      	cbnz	r4, 800bd36 <__match+0x12>
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	2001      	movs	r0, #1
 800bd34:	bd30      	pop	{r4, r5, pc}
 800bd36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd3e:	2d19      	cmp	r5, #25
 800bd40:	bf98      	it	ls
 800bd42:	3220      	addls	r2, #32
 800bd44:	42a2      	cmp	r2, r4
 800bd46:	d0f0      	beq.n	800bd2a <__match+0x6>
 800bd48:	2000      	movs	r0, #0
 800bd4a:	e7f3      	b.n	800bd34 <__match+0x10>

0800bd4c <__hexnan>:
 800bd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd50:	2500      	movs	r5, #0
 800bd52:	680b      	ldr	r3, [r1, #0]
 800bd54:	4682      	mov	sl, r0
 800bd56:	115e      	asrs	r6, r3, #5
 800bd58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd5c:	f013 031f 	ands.w	r3, r3, #31
 800bd60:	bf18      	it	ne
 800bd62:	3604      	addne	r6, #4
 800bd64:	1f37      	subs	r7, r6, #4
 800bd66:	4690      	mov	r8, r2
 800bd68:	46b9      	mov	r9, r7
 800bd6a:	463c      	mov	r4, r7
 800bd6c:	46ab      	mov	fp, r5
 800bd6e:	b087      	sub	sp, #28
 800bd70:	6801      	ldr	r1, [r0, #0]
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd78:	9502      	str	r5, [sp, #8]
 800bd7a:	784a      	ldrb	r2, [r1, #1]
 800bd7c:	1c4b      	adds	r3, r1, #1
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	b342      	cbz	r2, 800bdd4 <__hexnan+0x88>
 800bd82:	4610      	mov	r0, r2
 800bd84:	9105      	str	r1, [sp, #20]
 800bd86:	9204      	str	r2, [sp, #16]
 800bd88:	f7ff fd75 	bl	800b876 <__hexdig_fun>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d14f      	bne.n	800be30 <__hexnan+0xe4>
 800bd90:	9a04      	ldr	r2, [sp, #16]
 800bd92:	9905      	ldr	r1, [sp, #20]
 800bd94:	2a20      	cmp	r2, #32
 800bd96:	d818      	bhi.n	800bdca <__hexnan+0x7e>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	459b      	cmp	fp, r3
 800bd9c:	dd13      	ble.n	800bdc6 <__hexnan+0x7a>
 800bd9e:	454c      	cmp	r4, r9
 800bda0:	d206      	bcs.n	800bdb0 <__hexnan+0x64>
 800bda2:	2d07      	cmp	r5, #7
 800bda4:	dc04      	bgt.n	800bdb0 <__hexnan+0x64>
 800bda6:	462a      	mov	r2, r5
 800bda8:	4649      	mov	r1, r9
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7ff ffa8 	bl	800bd00 <L_shift>
 800bdb0:	4544      	cmp	r4, r8
 800bdb2:	d950      	bls.n	800be56 <__hexnan+0x10a>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f1a4 0904 	sub.w	r9, r4, #4
 800bdba:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdbe:	461d      	mov	r5, r3
 800bdc0:	464c      	mov	r4, r9
 800bdc2:	f8cd b008 	str.w	fp, [sp, #8]
 800bdc6:	9903      	ldr	r1, [sp, #12]
 800bdc8:	e7d7      	b.n	800bd7a <__hexnan+0x2e>
 800bdca:	2a29      	cmp	r2, #41	; 0x29
 800bdcc:	d155      	bne.n	800be7a <__hexnan+0x12e>
 800bdce:	3102      	adds	r1, #2
 800bdd0:	f8ca 1000 	str.w	r1, [sl]
 800bdd4:	f1bb 0f00 	cmp.w	fp, #0
 800bdd8:	d04f      	beq.n	800be7a <__hexnan+0x12e>
 800bdda:	454c      	cmp	r4, r9
 800bddc:	d206      	bcs.n	800bdec <__hexnan+0xa0>
 800bdde:	2d07      	cmp	r5, #7
 800bde0:	dc04      	bgt.n	800bdec <__hexnan+0xa0>
 800bde2:	462a      	mov	r2, r5
 800bde4:	4649      	mov	r1, r9
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff ff8a 	bl	800bd00 <L_shift>
 800bdec:	4544      	cmp	r4, r8
 800bdee:	d934      	bls.n	800be5a <__hexnan+0x10e>
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	f1a8 0204 	sub.w	r2, r8, #4
 800bdf6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdfa:	429f      	cmp	r7, r3
 800bdfc:	f842 1f04 	str.w	r1, [r2, #4]!
 800be00:	d2f9      	bcs.n	800bdf6 <__hexnan+0xaa>
 800be02:	1b3b      	subs	r3, r7, r4
 800be04:	f023 0303 	bic.w	r3, r3, #3
 800be08:	3304      	adds	r3, #4
 800be0a:	3e03      	subs	r6, #3
 800be0c:	3401      	adds	r4, #1
 800be0e:	42a6      	cmp	r6, r4
 800be10:	bf38      	it	cc
 800be12:	2304      	movcc	r3, #4
 800be14:	2200      	movs	r2, #0
 800be16:	4443      	add	r3, r8
 800be18:	f843 2b04 	str.w	r2, [r3], #4
 800be1c:	429f      	cmp	r7, r3
 800be1e:	d2fb      	bcs.n	800be18 <__hexnan+0xcc>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	b91b      	cbnz	r3, 800be2c <__hexnan+0xe0>
 800be24:	4547      	cmp	r7, r8
 800be26:	d126      	bne.n	800be76 <__hexnan+0x12a>
 800be28:	2301      	movs	r3, #1
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	2005      	movs	r0, #5
 800be2e:	e025      	b.n	800be7c <__hexnan+0x130>
 800be30:	3501      	adds	r5, #1
 800be32:	2d08      	cmp	r5, #8
 800be34:	f10b 0b01 	add.w	fp, fp, #1
 800be38:	dd06      	ble.n	800be48 <__hexnan+0xfc>
 800be3a:	4544      	cmp	r4, r8
 800be3c:	d9c3      	bls.n	800bdc6 <__hexnan+0x7a>
 800be3e:	2300      	movs	r3, #0
 800be40:	2501      	movs	r5, #1
 800be42:	f844 3c04 	str.w	r3, [r4, #-4]
 800be46:	3c04      	subs	r4, #4
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	f000 000f 	and.w	r0, r0, #15
 800be4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be52:	6020      	str	r0, [r4, #0]
 800be54:	e7b7      	b.n	800bdc6 <__hexnan+0x7a>
 800be56:	2508      	movs	r5, #8
 800be58:	e7b5      	b.n	800bdc6 <__hexnan+0x7a>
 800be5a:	9b01      	ldr	r3, [sp, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0df      	beq.n	800be20 <__hexnan+0xd4>
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	f1c3 0320 	rsb	r3, r3, #32
 800be68:	40da      	lsrs	r2, r3
 800be6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be6e:	4013      	ands	r3, r2
 800be70:	f846 3c04 	str.w	r3, [r6, #-4]
 800be74:	e7d4      	b.n	800be20 <__hexnan+0xd4>
 800be76:	3f04      	subs	r7, #4
 800be78:	e7d2      	b.n	800be20 <__hexnan+0xd4>
 800be7a:	2004      	movs	r0, #4
 800be7c:	b007      	add	sp, #28
 800be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be82 <__ascii_mbtowc>:
 800be82:	b082      	sub	sp, #8
 800be84:	b901      	cbnz	r1, 800be88 <__ascii_mbtowc+0x6>
 800be86:	a901      	add	r1, sp, #4
 800be88:	b142      	cbz	r2, 800be9c <__ascii_mbtowc+0x1a>
 800be8a:	b14b      	cbz	r3, 800bea0 <__ascii_mbtowc+0x1e>
 800be8c:	7813      	ldrb	r3, [r2, #0]
 800be8e:	600b      	str	r3, [r1, #0]
 800be90:	7812      	ldrb	r2, [r2, #0]
 800be92:	1e10      	subs	r0, r2, #0
 800be94:	bf18      	it	ne
 800be96:	2001      	movne	r0, #1
 800be98:	b002      	add	sp, #8
 800be9a:	4770      	bx	lr
 800be9c:	4610      	mov	r0, r2
 800be9e:	e7fb      	b.n	800be98 <__ascii_mbtowc+0x16>
 800bea0:	f06f 0001 	mvn.w	r0, #1
 800bea4:	e7f8      	b.n	800be98 <__ascii_mbtowc+0x16>
	...

0800bea8 <_Balloc>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	69c6      	ldr	r6, [r0, #28]
 800beac:	4604      	mov	r4, r0
 800beae:	460d      	mov	r5, r1
 800beb0:	b976      	cbnz	r6, 800bed0 <_Balloc+0x28>
 800beb2:	2010      	movs	r0, #16
 800beb4:	f7fc fdf2 	bl	8008a9c <malloc>
 800beb8:	4602      	mov	r2, r0
 800beba:	61e0      	str	r0, [r4, #28]
 800bebc:	b920      	cbnz	r0, 800bec8 <_Balloc+0x20>
 800bebe:	216b      	movs	r1, #107	; 0x6b
 800bec0:	4b17      	ldr	r3, [pc, #92]	; (800bf20 <_Balloc+0x78>)
 800bec2:	4818      	ldr	r0, [pc, #96]	; (800bf24 <_Balloc+0x7c>)
 800bec4:	f7fe fdae 	bl	800aa24 <__assert_func>
 800bec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800becc:	6006      	str	r6, [r0, #0]
 800bece:	60c6      	str	r6, [r0, #12]
 800bed0:	69e6      	ldr	r6, [r4, #28]
 800bed2:	68f3      	ldr	r3, [r6, #12]
 800bed4:	b183      	cbz	r3, 800bef8 <_Balloc+0x50>
 800bed6:	69e3      	ldr	r3, [r4, #28]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bede:	b9b8      	cbnz	r0, 800bf10 <_Balloc+0x68>
 800bee0:	2101      	movs	r1, #1
 800bee2:	fa01 f605 	lsl.w	r6, r1, r5
 800bee6:	1d72      	adds	r2, r6, #5
 800bee8:	4620      	mov	r0, r4
 800beea:	0092      	lsls	r2, r2, #2
 800beec:	f001 f87a 	bl	800cfe4 <_calloc_r>
 800bef0:	b160      	cbz	r0, 800bf0c <_Balloc+0x64>
 800bef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bef6:	e00e      	b.n	800bf16 <_Balloc+0x6e>
 800bef8:	2221      	movs	r2, #33	; 0x21
 800befa:	2104      	movs	r1, #4
 800befc:	4620      	mov	r0, r4
 800befe:	f001 f871 	bl	800cfe4 <_calloc_r>
 800bf02:	69e3      	ldr	r3, [r4, #28]
 800bf04:	60f0      	str	r0, [r6, #12]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e4      	bne.n	800bed6 <_Balloc+0x2e>
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}
 800bf10:	6802      	ldr	r2, [r0, #0]
 800bf12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf16:	2300      	movs	r3, #0
 800bf18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf1c:	e7f7      	b.n	800bf0e <_Balloc+0x66>
 800bf1e:	bf00      	nop
 800bf20:	0800d5a6 	.word	0x0800d5a6
 800bf24:	0800d8b7 	.word	0x0800d8b7

0800bf28 <_Bfree>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	69c6      	ldr	r6, [r0, #28]
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	460c      	mov	r4, r1
 800bf30:	b976      	cbnz	r6, 800bf50 <_Bfree+0x28>
 800bf32:	2010      	movs	r0, #16
 800bf34:	f7fc fdb2 	bl	8008a9c <malloc>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	61e8      	str	r0, [r5, #28]
 800bf3c:	b920      	cbnz	r0, 800bf48 <_Bfree+0x20>
 800bf3e:	218f      	movs	r1, #143	; 0x8f
 800bf40:	4b08      	ldr	r3, [pc, #32]	; (800bf64 <_Bfree+0x3c>)
 800bf42:	4809      	ldr	r0, [pc, #36]	; (800bf68 <_Bfree+0x40>)
 800bf44:	f7fe fd6e 	bl	800aa24 <__assert_func>
 800bf48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf4c:	6006      	str	r6, [r0, #0]
 800bf4e:	60c6      	str	r6, [r0, #12]
 800bf50:	b13c      	cbz	r4, 800bf62 <_Bfree+0x3a>
 800bf52:	69eb      	ldr	r3, [r5, #28]
 800bf54:	6862      	ldr	r2, [r4, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf5c:	6021      	str	r1, [r4, #0]
 800bf5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	0800d5a6 	.word	0x0800d5a6
 800bf68:	0800d8b7 	.word	0x0800d8b7

0800bf6c <__multadd>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	4607      	mov	r7, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	461e      	mov	r6, r3
 800bf76:	2000      	movs	r0, #0
 800bf78:	690d      	ldr	r5, [r1, #16]
 800bf7a:	f101 0c14 	add.w	ip, r1, #20
 800bf7e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf82:	3001      	adds	r0, #1
 800bf84:	b299      	uxth	r1, r3
 800bf86:	fb02 6101 	mla	r1, r2, r1, r6
 800bf8a:	0c1e      	lsrs	r6, r3, #16
 800bf8c:	0c0b      	lsrs	r3, r1, #16
 800bf8e:	fb02 3306 	mla	r3, r2, r6, r3
 800bf92:	b289      	uxth	r1, r1
 800bf94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf98:	4285      	cmp	r5, r0
 800bf9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bfa2:	dcec      	bgt.n	800bf7e <__multadd+0x12>
 800bfa4:	b30e      	cbz	r6, 800bfea <__multadd+0x7e>
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	dc19      	bgt.n	800bfe0 <__multadd+0x74>
 800bfac:	6861      	ldr	r1, [r4, #4]
 800bfae:	4638      	mov	r0, r7
 800bfb0:	3101      	adds	r1, #1
 800bfb2:	f7ff ff79 	bl	800bea8 <_Balloc>
 800bfb6:	4680      	mov	r8, r0
 800bfb8:	b928      	cbnz	r0, 800bfc6 <__multadd+0x5a>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	21ba      	movs	r1, #186	; 0xba
 800bfbe:	4b0c      	ldr	r3, [pc, #48]	; (800bff0 <__multadd+0x84>)
 800bfc0:	480c      	ldr	r0, [pc, #48]	; (800bff4 <__multadd+0x88>)
 800bfc2:	f7fe fd2f 	bl	800aa24 <__assert_func>
 800bfc6:	6922      	ldr	r2, [r4, #16]
 800bfc8:	f104 010c 	add.w	r1, r4, #12
 800bfcc:	3202      	adds	r2, #2
 800bfce:	0092      	lsls	r2, r2, #2
 800bfd0:	300c      	adds	r0, #12
 800bfd2:	f7fe fd13 	bl	800a9fc <memcpy>
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ffa5 	bl	800bf28 <_Bfree>
 800bfde:	4644      	mov	r4, r8
 800bfe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	615e      	str	r6, [r3, #20]
 800bfe8:	6125      	str	r5, [r4, #16]
 800bfea:	4620      	mov	r0, r4
 800bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff0:	0800d846 	.word	0x0800d846
 800bff4:	0800d8b7 	.word	0x0800d8b7

0800bff8 <__s2b>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	4615      	mov	r5, r2
 800bffe:	2209      	movs	r2, #9
 800c000:	461f      	mov	r7, r3
 800c002:	3308      	adds	r3, #8
 800c004:	460c      	mov	r4, r1
 800c006:	fb93 f3f2 	sdiv	r3, r3, r2
 800c00a:	4606      	mov	r6, r0
 800c00c:	2201      	movs	r2, #1
 800c00e:	2100      	movs	r1, #0
 800c010:	429a      	cmp	r2, r3
 800c012:	db09      	blt.n	800c028 <__s2b+0x30>
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff ff47 	bl	800bea8 <_Balloc>
 800c01a:	b940      	cbnz	r0, 800c02e <__s2b+0x36>
 800c01c:	4602      	mov	r2, r0
 800c01e:	21d3      	movs	r1, #211	; 0xd3
 800c020:	4b18      	ldr	r3, [pc, #96]	; (800c084 <__s2b+0x8c>)
 800c022:	4819      	ldr	r0, [pc, #100]	; (800c088 <__s2b+0x90>)
 800c024:	f7fe fcfe 	bl	800aa24 <__assert_func>
 800c028:	0052      	lsls	r2, r2, #1
 800c02a:	3101      	adds	r1, #1
 800c02c:	e7f0      	b.n	800c010 <__s2b+0x18>
 800c02e:	9b08      	ldr	r3, [sp, #32]
 800c030:	2d09      	cmp	r5, #9
 800c032:	6143      	str	r3, [r0, #20]
 800c034:	f04f 0301 	mov.w	r3, #1
 800c038:	6103      	str	r3, [r0, #16]
 800c03a:	dd16      	ble.n	800c06a <__s2b+0x72>
 800c03c:	f104 0909 	add.w	r9, r4, #9
 800c040:	46c8      	mov	r8, r9
 800c042:	442c      	add	r4, r5
 800c044:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c048:	4601      	mov	r1, r0
 800c04a:	220a      	movs	r2, #10
 800c04c:	4630      	mov	r0, r6
 800c04e:	3b30      	subs	r3, #48	; 0x30
 800c050:	f7ff ff8c 	bl	800bf6c <__multadd>
 800c054:	45a0      	cmp	r8, r4
 800c056:	d1f5      	bne.n	800c044 <__s2b+0x4c>
 800c058:	f1a5 0408 	sub.w	r4, r5, #8
 800c05c:	444c      	add	r4, r9
 800c05e:	1b2d      	subs	r5, r5, r4
 800c060:	1963      	adds	r3, r4, r5
 800c062:	42bb      	cmp	r3, r7
 800c064:	db04      	blt.n	800c070 <__s2b+0x78>
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	2509      	movs	r5, #9
 800c06c:	340a      	adds	r4, #10
 800c06e:	e7f6      	b.n	800c05e <__s2b+0x66>
 800c070:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c074:	4601      	mov	r1, r0
 800c076:	220a      	movs	r2, #10
 800c078:	4630      	mov	r0, r6
 800c07a:	3b30      	subs	r3, #48	; 0x30
 800c07c:	f7ff ff76 	bl	800bf6c <__multadd>
 800c080:	e7ee      	b.n	800c060 <__s2b+0x68>
 800c082:	bf00      	nop
 800c084:	0800d846 	.word	0x0800d846
 800c088:	0800d8b7 	.word	0x0800d8b7

0800c08c <__hi0bits>:
 800c08c:	0c02      	lsrs	r2, r0, #16
 800c08e:	0412      	lsls	r2, r2, #16
 800c090:	4603      	mov	r3, r0
 800c092:	b9ca      	cbnz	r2, 800c0c8 <__hi0bits+0x3c>
 800c094:	0403      	lsls	r3, r0, #16
 800c096:	2010      	movs	r0, #16
 800c098:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c09c:	bf04      	itt	eq
 800c09e:	021b      	lsleq	r3, r3, #8
 800c0a0:	3008      	addeq	r0, #8
 800c0a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c0a6:	bf04      	itt	eq
 800c0a8:	011b      	lsleq	r3, r3, #4
 800c0aa:	3004      	addeq	r0, #4
 800c0ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c0b0:	bf04      	itt	eq
 800c0b2:	009b      	lsleq	r3, r3, #2
 800c0b4:	3002      	addeq	r0, #2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	db05      	blt.n	800c0c6 <__hi0bits+0x3a>
 800c0ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c0be:	f100 0001 	add.w	r0, r0, #1
 800c0c2:	bf08      	it	eq
 800c0c4:	2020      	moveq	r0, #32
 800c0c6:	4770      	bx	lr
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e7e5      	b.n	800c098 <__hi0bits+0xc>

0800c0cc <__lo0bits>:
 800c0cc:	6803      	ldr	r3, [r0, #0]
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	f013 0007 	ands.w	r0, r3, #7
 800c0d4:	d00b      	beq.n	800c0ee <__lo0bits+0x22>
 800c0d6:	07d9      	lsls	r1, r3, #31
 800c0d8:	d421      	bmi.n	800c11e <__lo0bits+0x52>
 800c0da:	0798      	lsls	r0, r3, #30
 800c0dc:	bf49      	itett	mi
 800c0de:	085b      	lsrmi	r3, r3, #1
 800c0e0:	089b      	lsrpl	r3, r3, #2
 800c0e2:	2001      	movmi	r0, #1
 800c0e4:	6013      	strmi	r3, [r2, #0]
 800c0e6:	bf5c      	itt	pl
 800c0e8:	2002      	movpl	r0, #2
 800c0ea:	6013      	strpl	r3, [r2, #0]
 800c0ec:	4770      	bx	lr
 800c0ee:	b299      	uxth	r1, r3
 800c0f0:	b909      	cbnz	r1, 800c0f6 <__lo0bits+0x2a>
 800c0f2:	2010      	movs	r0, #16
 800c0f4:	0c1b      	lsrs	r3, r3, #16
 800c0f6:	b2d9      	uxtb	r1, r3
 800c0f8:	b909      	cbnz	r1, 800c0fe <__lo0bits+0x32>
 800c0fa:	3008      	adds	r0, #8
 800c0fc:	0a1b      	lsrs	r3, r3, #8
 800c0fe:	0719      	lsls	r1, r3, #28
 800c100:	bf04      	itt	eq
 800c102:	091b      	lsreq	r3, r3, #4
 800c104:	3004      	addeq	r0, #4
 800c106:	0799      	lsls	r1, r3, #30
 800c108:	bf04      	itt	eq
 800c10a:	089b      	lsreq	r3, r3, #2
 800c10c:	3002      	addeq	r0, #2
 800c10e:	07d9      	lsls	r1, r3, #31
 800c110:	d403      	bmi.n	800c11a <__lo0bits+0x4e>
 800c112:	085b      	lsrs	r3, r3, #1
 800c114:	f100 0001 	add.w	r0, r0, #1
 800c118:	d003      	beq.n	800c122 <__lo0bits+0x56>
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	4770      	bx	lr
 800c11e:	2000      	movs	r0, #0
 800c120:	4770      	bx	lr
 800c122:	2020      	movs	r0, #32
 800c124:	4770      	bx	lr
	...

0800c128 <__i2b>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	2101      	movs	r1, #1
 800c12e:	f7ff febb 	bl	800bea8 <_Balloc>
 800c132:	4602      	mov	r2, r0
 800c134:	b928      	cbnz	r0, 800c142 <__i2b+0x1a>
 800c136:	f240 1145 	movw	r1, #325	; 0x145
 800c13a:	4b04      	ldr	r3, [pc, #16]	; (800c14c <__i2b+0x24>)
 800c13c:	4804      	ldr	r0, [pc, #16]	; (800c150 <__i2b+0x28>)
 800c13e:	f7fe fc71 	bl	800aa24 <__assert_func>
 800c142:	2301      	movs	r3, #1
 800c144:	6144      	str	r4, [r0, #20]
 800c146:	6103      	str	r3, [r0, #16]
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	bf00      	nop
 800c14c:	0800d846 	.word	0x0800d846
 800c150:	0800d8b7 	.word	0x0800d8b7

0800c154 <__multiply>:
 800c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c158:	4691      	mov	r9, r2
 800c15a:	690a      	ldr	r2, [r1, #16]
 800c15c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c160:	460c      	mov	r4, r1
 800c162:	429a      	cmp	r2, r3
 800c164:	bfbe      	ittt	lt
 800c166:	460b      	movlt	r3, r1
 800c168:	464c      	movlt	r4, r9
 800c16a:	4699      	movlt	r9, r3
 800c16c:	6927      	ldr	r7, [r4, #16]
 800c16e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	6861      	ldr	r1, [r4, #4]
 800c176:	eb07 060a 	add.w	r6, r7, sl
 800c17a:	42b3      	cmp	r3, r6
 800c17c:	b085      	sub	sp, #20
 800c17e:	bfb8      	it	lt
 800c180:	3101      	addlt	r1, #1
 800c182:	f7ff fe91 	bl	800bea8 <_Balloc>
 800c186:	b930      	cbnz	r0, 800c196 <__multiply+0x42>
 800c188:	4602      	mov	r2, r0
 800c18a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c18e:	4b43      	ldr	r3, [pc, #268]	; (800c29c <__multiply+0x148>)
 800c190:	4843      	ldr	r0, [pc, #268]	; (800c2a0 <__multiply+0x14c>)
 800c192:	f7fe fc47 	bl	800aa24 <__assert_func>
 800c196:	f100 0514 	add.w	r5, r0, #20
 800c19a:	462b      	mov	r3, r5
 800c19c:	2200      	movs	r2, #0
 800c19e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1a2:	4543      	cmp	r3, r8
 800c1a4:	d321      	bcc.n	800c1ea <__multiply+0x96>
 800c1a6:	f104 0314 	add.w	r3, r4, #20
 800c1aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1ae:	f109 0314 	add.w	r3, r9, #20
 800c1b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1b6:	9202      	str	r2, [sp, #8]
 800c1b8:	1b3a      	subs	r2, r7, r4
 800c1ba:	3a15      	subs	r2, #21
 800c1bc:	f022 0203 	bic.w	r2, r2, #3
 800c1c0:	3204      	adds	r2, #4
 800c1c2:	f104 0115 	add.w	r1, r4, #21
 800c1c6:	428f      	cmp	r7, r1
 800c1c8:	bf38      	it	cc
 800c1ca:	2204      	movcc	r2, #4
 800c1cc:	9201      	str	r2, [sp, #4]
 800c1ce:	9a02      	ldr	r2, [sp, #8]
 800c1d0:	9303      	str	r3, [sp, #12]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d80c      	bhi.n	800c1f0 <__multiply+0x9c>
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	dd03      	ble.n	800c1e2 <__multiply+0x8e>
 800c1da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d05a      	beq.n	800c298 <__multiply+0x144>
 800c1e2:	6106      	str	r6, [r0, #16]
 800c1e4:	b005      	add	sp, #20
 800c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ea:	f843 2b04 	str.w	r2, [r3], #4
 800c1ee:	e7d8      	b.n	800c1a2 <__multiply+0x4e>
 800c1f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1f4:	f1ba 0f00 	cmp.w	sl, #0
 800c1f8:	d023      	beq.n	800c242 <__multiply+0xee>
 800c1fa:	46a9      	mov	r9, r5
 800c1fc:	f04f 0c00 	mov.w	ip, #0
 800c200:	f104 0e14 	add.w	lr, r4, #20
 800c204:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c208:	f8d9 1000 	ldr.w	r1, [r9]
 800c20c:	fa1f fb82 	uxth.w	fp, r2
 800c210:	b289      	uxth	r1, r1
 800c212:	fb0a 110b 	mla	r1, sl, fp, r1
 800c216:	4461      	add	r1, ip
 800c218:	f8d9 c000 	ldr.w	ip, [r9]
 800c21c:	0c12      	lsrs	r2, r2, #16
 800c21e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c222:	fb0a c202 	mla	r2, sl, r2, ip
 800c226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c22a:	b289      	uxth	r1, r1
 800c22c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c230:	4577      	cmp	r7, lr
 800c232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c236:	f849 1b04 	str.w	r1, [r9], #4
 800c23a:	d8e3      	bhi.n	800c204 <__multiply+0xb0>
 800c23c:	9a01      	ldr	r2, [sp, #4]
 800c23e:	f845 c002 	str.w	ip, [r5, r2]
 800c242:	9a03      	ldr	r2, [sp, #12]
 800c244:	3304      	adds	r3, #4
 800c246:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c24a:	f1b9 0f00 	cmp.w	r9, #0
 800c24e:	d021      	beq.n	800c294 <__multiply+0x140>
 800c250:	46ae      	mov	lr, r5
 800c252:	f04f 0a00 	mov.w	sl, #0
 800c256:	6829      	ldr	r1, [r5, #0]
 800c258:	f104 0c14 	add.w	ip, r4, #20
 800c25c:	f8bc b000 	ldrh.w	fp, [ip]
 800c260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c264:	b289      	uxth	r1, r1
 800c266:	fb09 220b 	mla	r2, r9, fp, r2
 800c26a:	4452      	add	r2, sl
 800c26c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c270:	f84e 1b04 	str.w	r1, [lr], #4
 800c274:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c278:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c27c:	f8be 1000 	ldrh.w	r1, [lr]
 800c280:	4567      	cmp	r7, ip
 800c282:	fb09 110a 	mla	r1, r9, sl, r1
 800c286:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c28a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c28e:	d8e5      	bhi.n	800c25c <__multiply+0x108>
 800c290:	9a01      	ldr	r2, [sp, #4]
 800c292:	50a9      	str	r1, [r5, r2]
 800c294:	3504      	adds	r5, #4
 800c296:	e79a      	b.n	800c1ce <__multiply+0x7a>
 800c298:	3e01      	subs	r6, #1
 800c29a:	e79c      	b.n	800c1d6 <__multiply+0x82>
 800c29c:	0800d846 	.word	0x0800d846
 800c2a0:	0800d8b7 	.word	0x0800d8b7

0800c2a4 <__pow5mult>:
 800c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	4615      	mov	r5, r2
 800c2aa:	f012 0203 	ands.w	r2, r2, #3
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460f      	mov	r7, r1
 800c2b2:	d007      	beq.n	800c2c4 <__pow5mult+0x20>
 800c2b4:	4c25      	ldr	r4, [pc, #148]	; (800c34c <__pow5mult+0xa8>)
 800c2b6:	3a01      	subs	r2, #1
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2be:	f7ff fe55 	bl	800bf6c <__multadd>
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	10ad      	asrs	r5, r5, #2
 800c2c6:	d03d      	beq.n	800c344 <__pow5mult+0xa0>
 800c2c8:	69f4      	ldr	r4, [r6, #28]
 800c2ca:	b97c      	cbnz	r4, 800c2ec <__pow5mult+0x48>
 800c2cc:	2010      	movs	r0, #16
 800c2ce:	f7fc fbe5 	bl	8008a9c <malloc>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	61f0      	str	r0, [r6, #28]
 800c2d6:	b928      	cbnz	r0, 800c2e4 <__pow5mult+0x40>
 800c2d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c2dc:	4b1c      	ldr	r3, [pc, #112]	; (800c350 <__pow5mult+0xac>)
 800c2de:	481d      	ldr	r0, [pc, #116]	; (800c354 <__pow5mult+0xb0>)
 800c2e0:	f7fe fba0 	bl	800aa24 <__assert_func>
 800c2e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2e8:	6004      	str	r4, [r0, #0]
 800c2ea:	60c4      	str	r4, [r0, #12]
 800c2ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c2f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2f4:	b94c      	cbnz	r4, 800c30a <__pow5mult+0x66>
 800c2f6:	f240 2171 	movw	r1, #625	; 0x271
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ff14 	bl	800c128 <__i2b>
 800c300:	2300      	movs	r3, #0
 800c302:	4604      	mov	r4, r0
 800c304:	f8c8 0008 	str.w	r0, [r8, #8]
 800c308:	6003      	str	r3, [r0, #0]
 800c30a:	f04f 0900 	mov.w	r9, #0
 800c30e:	07eb      	lsls	r3, r5, #31
 800c310:	d50a      	bpl.n	800c328 <__pow5mult+0x84>
 800c312:	4639      	mov	r1, r7
 800c314:	4622      	mov	r2, r4
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ff1c 	bl	800c154 <__multiply>
 800c31c:	4680      	mov	r8, r0
 800c31e:	4639      	mov	r1, r7
 800c320:	4630      	mov	r0, r6
 800c322:	f7ff fe01 	bl	800bf28 <_Bfree>
 800c326:	4647      	mov	r7, r8
 800c328:	106d      	asrs	r5, r5, #1
 800c32a:	d00b      	beq.n	800c344 <__pow5mult+0xa0>
 800c32c:	6820      	ldr	r0, [r4, #0]
 800c32e:	b938      	cbnz	r0, 800c340 <__pow5mult+0x9c>
 800c330:	4622      	mov	r2, r4
 800c332:	4621      	mov	r1, r4
 800c334:	4630      	mov	r0, r6
 800c336:	f7ff ff0d 	bl	800c154 <__multiply>
 800c33a:	6020      	str	r0, [r4, #0]
 800c33c:	f8c0 9000 	str.w	r9, [r0]
 800c340:	4604      	mov	r4, r0
 800c342:	e7e4      	b.n	800c30e <__pow5mult+0x6a>
 800c344:	4638      	mov	r0, r7
 800c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34a:	bf00      	nop
 800c34c:	0800da00 	.word	0x0800da00
 800c350:	0800d5a6 	.word	0x0800d5a6
 800c354:	0800d8b7 	.word	0x0800d8b7

0800c358 <__lshift>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	460c      	mov	r4, r1
 800c35e:	4607      	mov	r7, r0
 800c360:	4691      	mov	r9, r2
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	6849      	ldr	r1, [r1, #4]
 800c366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c370:	f108 0601 	add.w	r6, r8, #1
 800c374:	42b3      	cmp	r3, r6
 800c376:	db0b      	blt.n	800c390 <__lshift+0x38>
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff fd95 	bl	800bea8 <_Balloc>
 800c37e:	4605      	mov	r5, r0
 800c380:	b948      	cbnz	r0, 800c396 <__lshift+0x3e>
 800c382:	4602      	mov	r2, r0
 800c384:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c388:	4b27      	ldr	r3, [pc, #156]	; (800c428 <__lshift+0xd0>)
 800c38a:	4828      	ldr	r0, [pc, #160]	; (800c42c <__lshift+0xd4>)
 800c38c:	f7fe fb4a 	bl	800aa24 <__assert_func>
 800c390:	3101      	adds	r1, #1
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	e7ee      	b.n	800c374 <__lshift+0x1c>
 800c396:	2300      	movs	r3, #0
 800c398:	f100 0114 	add.w	r1, r0, #20
 800c39c:	f100 0210 	add.w	r2, r0, #16
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	4553      	cmp	r3, sl
 800c3a4:	db33      	blt.n	800c40e <__lshift+0xb6>
 800c3a6:	6920      	ldr	r0, [r4, #16]
 800c3a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3ac:	f104 0314 	add.w	r3, r4, #20
 800c3b0:	f019 091f 	ands.w	r9, r9, #31
 800c3b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3bc:	d02b      	beq.n	800c416 <__lshift+0xbe>
 800c3be:	468a      	mov	sl, r1
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3c6:	6818      	ldr	r0, [r3, #0]
 800c3c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c3cc:	4310      	orrs	r0, r2
 800c3ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3d6:	459c      	cmp	ip, r3
 800c3d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3dc:	d8f3      	bhi.n	800c3c6 <__lshift+0x6e>
 800c3de:	ebac 0304 	sub.w	r3, ip, r4
 800c3e2:	3b15      	subs	r3, #21
 800c3e4:	f023 0303 	bic.w	r3, r3, #3
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	f104 0015 	add.w	r0, r4, #21
 800c3ee:	4584      	cmp	ip, r0
 800c3f0:	bf38      	it	cc
 800c3f2:	2304      	movcc	r3, #4
 800c3f4:	50ca      	str	r2, [r1, r3]
 800c3f6:	b10a      	cbz	r2, 800c3fc <__lshift+0xa4>
 800c3f8:	f108 0602 	add.w	r6, r8, #2
 800c3fc:	3e01      	subs	r6, #1
 800c3fe:	4638      	mov	r0, r7
 800c400:	4621      	mov	r1, r4
 800c402:	612e      	str	r6, [r5, #16]
 800c404:	f7ff fd90 	bl	800bf28 <_Bfree>
 800c408:	4628      	mov	r0, r5
 800c40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c40e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c412:	3301      	adds	r3, #1
 800c414:	e7c5      	b.n	800c3a2 <__lshift+0x4a>
 800c416:	3904      	subs	r1, #4
 800c418:	f853 2b04 	ldr.w	r2, [r3], #4
 800c41c:	459c      	cmp	ip, r3
 800c41e:	f841 2f04 	str.w	r2, [r1, #4]!
 800c422:	d8f9      	bhi.n	800c418 <__lshift+0xc0>
 800c424:	e7ea      	b.n	800c3fc <__lshift+0xa4>
 800c426:	bf00      	nop
 800c428:	0800d846 	.word	0x0800d846
 800c42c:	0800d8b7 	.word	0x0800d8b7

0800c430 <__mcmp>:
 800c430:	4603      	mov	r3, r0
 800c432:	690a      	ldr	r2, [r1, #16]
 800c434:	6900      	ldr	r0, [r0, #16]
 800c436:	b530      	push	{r4, r5, lr}
 800c438:	1a80      	subs	r0, r0, r2
 800c43a:	d10d      	bne.n	800c458 <__mcmp+0x28>
 800c43c:	3314      	adds	r3, #20
 800c43e:	3114      	adds	r1, #20
 800c440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c44c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c450:	4295      	cmp	r5, r2
 800c452:	d002      	beq.n	800c45a <__mcmp+0x2a>
 800c454:	d304      	bcc.n	800c460 <__mcmp+0x30>
 800c456:	2001      	movs	r0, #1
 800c458:	bd30      	pop	{r4, r5, pc}
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	d3f4      	bcc.n	800c448 <__mcmp+0x18>
 800c45e:	e7fb      	b.n	800c458 <__mcmp+0x28>
 800c460:	f04f 30ff 	mov.w	r0, #4294967295
 800c464:	e7f8      	b.n	800c458 <__mcmp+0x28>
	...

0800c468 <__mdiff>:
 800c468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	460d      	mov	r5, r1
 800c46e:	4607      	mov	r7, r0
 800c470:	4611      	mov	r1, r2
 800c472:	4628      	mov	r0, r5
 800c474:	4614      	mov	r4, r2
 800c476:	f7ff ffdb 	bl	800c430 <__mcmp>
 800c47a:	1e06      	subs	r6, r0, #0
 800c47c:	d111      	bne.n	800c4a2 <__mdiff+0x3a>
 800c47e:	4631      	mov	r1, r6
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff fd11 	bl	800bea8 <_Balloc>
 800c486:	4602      	mov	r2, r0
 800c488:	b928      	cbnz	r0, 800c496 <__mdiff+0x2e>
 800c48a:	f240 2137 	movw	r1, #567	; 0x237
 800c48e:	4b3a      	ldr	r3, [pc, #232]	; (800c578 <__mdiff+0x110>)
 800c490:	483a      	ldr	r0, [pc, #232]	; (800c57c <__mdiff+0x114>)
 800c492:	f7fe fac7 	bl	800aa24 <__assert_func>
 800c496:	2301      	movs	r3, #1
 800c498:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c49c:	4610      	mov	r0, r2
 800c49e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	bfa4      	itt	ge
 800c4a4:	4623      	movge	r3, r4
 800c4a6:	462c      	movge	r4, r5
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	6861      	ldr	r1, [r4, #4]
 800c4ac:	bfa6      	itte	ge
 800c4ae:	461d      	movge	r5, r3
 800c4b0:	2600      	movge	r6, #0
 800c4b2:	2601      	movlt	r6, #1
 800c4b4:	f7ff fcf8 	bl	800bea8 <_Balloc>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	b918      	cbnz	r0, 800c4c4 <__mdiff+0x5c>
 800c4bc:	f240 2145 	movw	r1, #581	; 0x245
 800c4c0:	4b2d      	ldr	r3, [pc, #180]	; (800c578 <__mdiff+0x110>)
 800c4c2:	e7e5      	b.n	800c490 <__mdiff+0x28>
 800c4c4:	f102 0814 	add.w	r8, r2, #20
 800c4c8:	46c2      	mov	sl, r8
 800c4ca:	f04f 0c00 	mov.w	ip, #0
 800c4ce:	6927      	ldr	r7, [r4, #16]
 800c4d0:	60c6      	str	r6, [r0, #12]
 800c4d2:	692e      	ldr	r6, [r5, #16]
 800c4d4:	f104 0014 	add.w	r0, r4, #20
 800c4d8:	f105 0914 	add.w	r9, r5, #20
 800c4dc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4e4:	3410      	adds	r4, #16
 800c4e6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c4ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4ee:	fa1f f18b 	uxth.w	r1, fp
 800c4f2:	4461      	add	r1, ip
 800c4f4:	fa1f fc83 	uxth.w	ip, r3
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	eba1 010c 	sub.w	r1, r1, ip
 800c4fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c502:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c506:	b289      	uxth	r1, r1
 800c508:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c50c:	454e      	cmp	r6, r9
 800c50e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c512:	f84a 1b04 	str.w	r1, [sl], #4
 800c516:	d8e6      	bhi.n	800c4e6 <__mdiff+0x7e>
 800c518:	1b73      	subs	r3, r6, r5
 800c51a:	3b15      	subs	r3, #21
 800c51c:	f023 0303 	bic.w	r3, r3, #3
 800c520:	3515      	adds	r5, #21
 800c522:	3304      	adds	r3, #4
 800c524:	42ae      	cmp	r6, r5
 800c526:	bf38      	it	cc
 800c528:	2304      	movcc	r3, #4
 800c52a:	4418      	add	r0, r3
 800c52c:	4443      	add	r3, r8
 800c52e:	461e      	mov	r6, r3
 800c530:	4605      	mov	r5, r0
 800c532:	4575      	cmp	r5, lr
 800c534:	d30e      	bcc.n	800c554 <__mdiff+0xec>
 800c536:	f10e 0103 	add.w	r1, lr, #3
 800c53a:	1a09      	subs	r1, r1, r0
 800c53c:	f021 0103 	bic.w	r1, r1, #3
 800c540:	3803      	subs	r0, #3
 800c542:	4586      	cmp	lr, r0
 800c544:	bf38      	it	cc
 800c546:	2100      	movcc	r1, #0
 800c548:	440b      	add	r3, r1
 800c54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c54e:	b189      	cbz	r1, 800c574 <__mdiff+0x10c>
 800c550:	6117      	str	r7, [r2, #16]
 800c552:	e7a3      	b.n	800c49c <__mdiff+0x34>
 800c554:	f855 8b04 	ldr.w	r8, [r5], #4
 800c558:	fa1f f188 	uxth.w	r1, r8
 800c55c:	4461      	add	r1, ip
 800c55e:	140c      	asrs	r4, r1, #16
 800c560:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c564:	b289      	uxth	r1, r1
 800c566:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c56a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c56e:	f846 1b04 	str.w	r1, [r6], #4
 800c572:	e7de      	b.n	800c532 <__mdiff+0xca>
 800c574:	3f01      	subs	r7, #1
 800c576:	e7e8      	b.n	800c54a <__mdiff+0xe2>
 800c578:	0800d846 	.word	0x0800d846
 800c57c:	0800d8b7 	.word	0x0800d8b7

0800c580 <__ulp>:
 800c580:	4b0e      	ldr	r3, [pc, #56]	; (800c5bc <__ulp+0x3c>)
 800c582:	400b      	ands	r3, r1
 800c584:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	dc08      	bgt.n	800c59e <__ulp+0x1e>
 800c58c:	425b      	negs	r3, r3
 800c58e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c592:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c596:	da04      	bge.n	800c5a2 <__ulp+0x22>
 800c598:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c59c:	4113      	asrs	r3, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	e008      	b.n	800c5b4 <__ulp+0x34>
 800c5a2:	f1a2 0314 	sub.w	r3, r2, #20
 800c5a6:	2b1e      	cmp	r3, #30
 800c5a8:	bfd6      	itet	le
 800c5aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c5ae:	2201      	movgt	r2, #1
 800c5b0:	40da      	lsrle	r2, r3
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	7ff00000 	.word	0x7ff00000

0800c5c0 <__b2d>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	6905      	ldr	r5, [r0, #16]
 800c5c4:	f100 0714 	add.w	r7, r0, #20
 800c5c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c5cc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c5d0:	1f2e      	subs	r6, r5, #4
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7ff fd5a 	bl	800c08c <__hi0bits>
 800c5d8:	f1c0 0220 	rsb	r2, r0, #32
 800c5dc:	280a      	cmp	r0, #10
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800c64c <__b2d+0x8c>
 800c5e4:	600a      	str	r2, [r1, #0]
 800c5e6:	dc12      	bgt.n	800c60e <__b2d+0x4e>
 800c5e8:	f1c0 0e0b 	rsb	lr, r0, #11
 800c5ec:	fa24 f20e 	lsr.w	r2, r4, lr
 800c5f0:	42b7      	cmp	r7, r6
 800c5f2:	ea42 010c 	orr.w	r1, r2, ip
 800c5f6:	bf2c      	ite	cs
 800c5f8:	2200      	movcs	r2, #0
 800c5fa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c5fe:	3315      	adds	r3, #21
 800c600:	fa04 f303 	lsl.w	r3, r4, r3
 800c604:	fa22 f20e 	lsr.w	r2, r2, lr
 800c608:	431a      	orrs	r2, r3
 800c60a:	4610      	mov	r0, r2
 800c60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c60e:	42b7      	cmp	r7, r6
 800c610:	bf2e      	itee	cs
 800c612:	2200      	movcs	r2, #0
 800c614:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800c618:	f1a5 0608 	subcc.w	r6, r5, #8
 800c61c:	3b0b      	subs	r3, #11
 800c61e:	d012      	beq.n	800c646 <__b2d+0x86>
 800c620:	f1c3 0520 	rsb	r5, r3, #32
 800c624:	fa22 f105 	lsr.w	r1, r2, r5
 800c628:	409c      	lsls	r4, r3
 800c62a:	430c      	orrs	r4, r1
 800c62c:	42be      	cmp	r6, r7
 800c62e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800c632:	bf94      	ite	ls
 800c634:	2400      	movls	r4, #0
 800c636:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c63a:	409a      	lsls	r2, r3
 800c63c:	40ec      	lsrs	r4, r5
 800c63e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c642:	4322      	orrs	r2, r4
 800c644:	e7e1      	b.n	800c60a <__b2d+0x4a>
 800c646:	ea44 010c 	orr.w	r1, r4, ip
 800c64a:	e7de      	b.n	800c60a <__b2d+0x4a>
 800c64c:	3ff00000 	.word	0x3ff00000

0800c650 <__d2b>:
 800c650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c652:	2101      	movs	r1, #1
 800c654:	4617      	mov	r7, r2
 800c656:	461c      	mov	r4, r3
 800c658:	9e08      	ldr	r6, [sp, #32]
 800c65a:	f7ff fc25 	bl	800bea8 <_Balloc>
 800c65e:	4605      	mov	r5, r0
 800c660:	b930      	cbnz	r0, 800c670 <__d2b+0x20>
 800c662:	4602      	mov	r2, r0
 800c664:	f240 310f 	movw	r1, #783	; 0x30f
 800c668:	4b22      	ldr	r3, [pc, #136]	; (800c6f4 <__d2b+0xa4>)
 800c66a:	4823      	ldr	r0, [pc, #140]	; (800c6f8 <__d2b+0xa8>)
 800c66c:	f7fe f9da 	bl	800aa24 <__assert_func>
 800c670:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c674:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c678:	bb24      	cbnz	r4, 800c6c4 <__d2b+0x74>
 800c67a:	2f00      	cmp	r7, #0
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	d026      	beq.n	800c6ce <__d2b+0x7e>
 800c680:	4668      	mov	r0, sp
 800c682:	9700      	str	r7, [sp, #0]
 800c684:	f7ff fd22 	bl	800c0cc <__lo0bits>
 800c688:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c68c:	b1e8      	cbz	r0, 800c6ca <__d2b+0x7a>
 800c68e:	f1c0 0320 	rsb	r3, r0, #32
 800c692:	fa02 f303 	lsl.w	r3, r2, r3
 800c696:	430b      	orrs	r3, r1
 800c698:	40c2      	lsrs	r2, r0
 800c69a:	616b      	str	r3, [r5, #20]
 800c69c:	9201      	str	r2, [sp, #4]
 800c69e:	9b01      	ldr	r3, [sp, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bf14      	ite	ne
 800c6a4:	2102      	movne	r1, #2
 800c6a6:	2101      	moveq	r1, #1
 800c6a8:	61ab      	str	r3, [r5, #24]
 800c6aa:	6129      	str	r1, [r5, #16]
 800c6ac:	b1bc      	cbz	r4, 800c6de <__d2b+0x8e>
 800c6ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c6b2:	4404      	add	r4, r0
 800c6b4:	6034      	str	r4, [r6, #0]
 800c6b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6bc:	6018      	str	r0, [r3, #0]
 800c6be:	4628      	mov	r0, r5
 800c6c0:	b003      	add	sp, #12
 800c6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6c8:	e7d7      	b.n	800c67a <__d2b+0x2a>
 800c6ca:	6169      	str	r1, [r5, #20]
 800c6cc:	e7e7      	b.n	800c69e <__d2b+0x4e>
 800c6ce:	a801      	add	r0, sp, #4
 800c6d0:	f7ff fcfc 	bl	800c0cc <__lo0bits>
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	616b      	str	r3, [r5, #20]
 800c6da:	3020      	adds	r0, #32
 800c6dc:	e7e5      	b.n	800c6aa <__d2b+0x5a>
 800c6de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6e2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c6e6:	6030      	str	r0, [r6, #0]
 800c6e8:	6918      	ldr	r0, [r3, #16]
 800c6ea:	f7ff fccf 	bl	800c08c <__hi0bits>
 800c6ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c6f2:	e7e2      	b.n	800c6ba <__d2b+0x6a>
 800c6f4:	0800d846 	.word	0x0800d846
 800c6f8:	0800d8b7 	.word	0x0800d8b7

0800c6fc <__ratio>:
 800c6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	4688      	mov	r8, r1
 800c702:	4669      	mov	r1, sp
 800c704:	4681      	mov	r9, r0
 800c706:	f7ff ff5b 	bl	800c5c0 <__b2d>
 800c70a:	460f      	mov	r7, r1
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	4640      	mov	r0, r8
 800c712:	a901      	add	r1, sp, #4
 800c714:	f7ff ff54 	bl	800c5c0 <__b2d>
 800c718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c71c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c720:	468b      	mov	fp, r1
 800c722:	eba3 0c02 	sub.w	ip, r3, r2
 800c726:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c72a:	1a9b      	subs	r3, r3, r2
 800c72c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c730:	2b00      	cmp	r3, #0
 800c732:	bfd5      	itete	le
 800c734:	460a      	movle	r2, r1
 800c736:	462a      	movgt	r2, r5
 800c738:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c73c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c740:	bfd8      	it	le
 800c742:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c746:	465b      	mov	r3, fp
 800c748:	4602      	mov	r2, r0
 800c74a:	4639      	mov	r1, r7
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7f3 ffed 	bl	800072c <__aeabi_ddiv>
 800c752:	b003      	add	sp, #12
 800c754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c758 <__copybits>:
 800c758:	3901      	subs	r1, #1
 800c75a:	b570      	push	{r4, r5, r6, lr}
 800c75c:	1149      	asrs	r1, r1, #5
 800c75e:	6914      	ldr	r4, [r2, #16]
 800c760:	3101      	adds	r1, #1
 800c762:	f102 0314 	add.w	r3, r2, #20
 800c766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c76a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c76e:	1f05      	subs	r5, r0, #4
 800c770:	42a3      	cmp	r3, r4
 800c772:	d30c      	bcc.n	800c78e <__copybits+0x36>
 800c774:	1aa3      	subs	r3, r4, r2
 800c776:	3b11      	subs	r3, #17
 800c778:	f023 0303 	bic.w	r3, r3, #3
 800c77c:	3211      	adds	r2, #17
 800c77e:	42a2      	cmp	r2, r4
 800c780:	bf88      	it	hi
 800c782:	2300      	movhi	r3, #0
 800c784:	4418      	add	r0, r3
 800c786:	2300      	movs	r3, #0
 800c788:	4288      	cmp	r0, r1
 800c78a:	d305      	bcc.n	800c798 <__copybits+0x40>
 800c78c:	bd70      	pop	{r4, r5, r6, pc}
 800c78e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c792:	f845 6f04 	str.w	r6, [r5, #4]!
 800c796:	e7eb      	b.n	800c770 <__copybits+0x18>
 800c798:	f840 3b04 	str.w	r3, [r0], #4
 800c79c:	e7f4      	b.n	800c788 <__copybits+0x30>

0800c79e <__any_on>:
 800c79e:	f100 0214 	add.w	r2, r0, #20
 800c7a2:	6900      	ldr	r0, [r0, #16]
 800c7a4:	114b      	asrs	r3, r1, #5
 800c7a6:	4298      	cmp	r0, r3
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	db11      	blt.n	800c7d0 <__any_on+0x32>
 800c7ac:	dd0a      	ble.n	800c7c4 <__any_on+0x26>
 800c7ae:	f011 011f 	ands.w	r1, r1, #31
 800c7b2:	d007      	beq.n	800c7c4 <__any_on+0x26>
 800c7b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7b8:	fa24 f001 	lsr.w	r0, r4, r1
 800c7bc:	fa00 f101 	lsl.w	r1, r0, r1
 800c7c0:	428c      	cmp	r4, r1
 800c7c2:	d10b      	bne.n	800c7dc <__any_on+0x3e>
 800c7c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d803      	bhi.n	800c7d4 <__any_on+0x36>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	bd10      	pop	{r4, pc}
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	e7f7      	b.n	800c7c4 <__any_on+0x26>
 800c7d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	d0f5      	beq.n	800c7c8 <__any_on+0x2a>
 800c7dc:	2001      	movs	r0, #1
 800c7de:	e7f6      	b.n	800c7ce <__any_on+0x30>

0800c7e0 <__ascii_wctomb>:
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	b141      	cbz	r1, 800c7f8 <__ascii_wctomb+0x18>
 800c7e6:	2aff      	cmp	r2, #255	; 0xff
 800c7e8:	d904      	bls.n	800c7f4 <__ascii_wctomb+0x14>
 800c7ea:	228a      	movs	r2, #138	; 0x8a
 800c7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	4770      	bx	lr
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	700a      	strb	r2, [r1, #0]
 800c7f8:	4770      	bx	lr

0800c7fa <__ssputs_r>:
 800c7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fe:	461f      	mov	r7, r3
 800c800:	688e      	ldr	r6, [r1, #8]
 800c802:	4682      	mov	sl, r0
 800c804:	42be      	cmp	r6, r7
 800c806:	460c      	mov	r4, r1
 800c808:	4690      	mov	r8, r2
 800c80a:	680b      	ldr	r3, [r1, #0]
 800c80c:	d82c      	bhi.n	800c868 <__ssputs_r+0x6e>
 800c80e:	898a      	ldrh	r2, [r1, #12]
 800c810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c814:	d026      	beq.n	800c864 <__ssputs_r+0x6a>
 800c816:	6965      	ldr	r5, [r4, #20]
 800c818:	6909      	ldr	r1, [r1, #16]
 800c81a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c81e:	eba3 0901 	sub.w	r9, r3, r1
 800c822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c826:	1c7b      	adds	r3, r7, #1
 800c828:	444b      	add	r3, r9
 800c82a:	106d      	asrs	r5, r5, #1
 800c82c:	429d      	cmp	r5, r3
 800c82e:	bf38      	it	cc
 800c830:	461d      	movcc	r5, r3
 800c832:	0553      	lsls	r3, r2, #21
 800c834:	d527      	bpl.n	800c886 <__ssputs_r+0x8c>
 800c836:	4629      	mov	r1, r5
 800c838:	f7fc f960 	bl	8008afc <_malloc_r>
 800c83c:	4606      	mov	r6, r0
 800c83e:	b360      	cbz	r0, 800c89a <__ssputs_r+0xa0>
 800c840:	464a      	mov	r2, r9
 800c842:	6921      	ldr	r1, [r4, #16]
 800c844:	f7fe f8da 	bl	800a9fc <memcpy>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	6126      	str	r6, [r4, #16]
 800c856:	444e      	add	r6, r9
 800c858:	6026      	str	r6, [r4, #0]
 800c85a:	463e      	mov	r6, r7
 800c85c:	6165      	str	r5, [r4, #20]
 800c85e:	eba5 0509 	sub.w	r5, r5, r9
 800c862:	60a5      	str	r5, [r4, #8]
 800c864:	42be      	cmp	r6, r7
 800c866:	d900      	bls.n	800c86a <__ssputs_r+0x70>
 800c868:	463e      	mov	r6, r7
 800c86a:	4632      	mov	r2, r6
 800c86c:	4641      	mov	r1, r8
 800c86e:	6820      	ldr	r0, [r4, #0]
 800c870:	f000 fb7b 	bl	800cf6a <memmove>
 800c874:	2000      	movs	r0, #0
 800c876:	68a3      	ldr	r3, [r4, #8]
 800c878:	1b9b      	subs	r3, r3, r6
 800c87a:	60a3      	str	r3, [r4, #8]
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	4433      	add	r3, r6
 800c880:	6023      	str	r3, [r4, #0]
 800c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c886:	462a      	mov	r2, r5
 800c888:	f000 fbc0 	bl	800d00c <_realloc_r>
 800c88c:	4606      	mov	r6, r0
 800c88e:	2800      	cmp	r0, #0
 800c890:	d1e0      	bne.n	800c854 <__ssputs_r+0x5a>
 800c892:	4650      	mov	r0, sl
 800c894:	6921      	ldr	r1, [r4, #16]
 800c896:	f7fe ff53 	bl	800b740 <_free_r>
 800c89a:	230c      	movs	r3, #12
 800c89c:	f8ca 3000 	str.w	r3, [sl]
 800c8a0:	89a3      	ldrh	r3, [r4, #12]
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8aa:	81a3      	strh	r3, [r4, #12]
 800c8ac:	e7e9      	b.n	800c882 <__ssputs_r+0x88>
	...

0800c8b0 <_svfiprintf_r>:
 800c8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	4698      	mov	r8, r3
 800c8b6:	898b      	ldrh	r3, [r1, #12]
 800c8b8:	4607      	mov	r7, r0
 800c8ba:	061b      	lsls	r3, r3, #24
 800c8bc:	460d      	mov	r5, r1
 800c8be:	4614      	mov	r4, r2
 800c8c0:	b09d      	sub	sp, #116	; 0x74
 800c8c2:	d50e      	bpl.n	800c8e2 <_svfiprintf_r+0x32>
 800c8c4:	690b      	ldr	r3, [r1, #16]
 800c8c6:	b963      	cbnz	r3, 800c8e2 <_svfiprintf_r+0x32>
 800c8c8:	2140      	movs	r1, #64	; 0x40
 800c8ca:	f7fc f917 	bl	8008afc <_malloc_r>
 800c8ce:	6028      	str	r0, [r5, #0]
 800c8d0:	6128      	str	r0, [r5, #16]
 800c8d2:	b920      	cbnz	r0, 800c8de <_svfiprintf_r+0x2e>
 800c8d4:	230c      	movs	r3, #12
 800c8d6:	603b      	str	r3, [r7, #0]
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	e0d0      	b.n	800ca80 <_svfiprintf_r+0x1d0>
 800c8de:	2340      	movs	r3, #64	; 0x40
 800c8e0:	616b      	str	r3, [r5, #20]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e6:	2320      	movs	r3, #32
 800c8e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8ec:	2330      	movs	r3, #48	; 0x30
 800c8ee:	f04f 0901 	mov.w	r9, #1
 800c8f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca98 <_svfiprintf_r+0x1e8>
 800c8fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8fe:	4623      	mov	r3, r4
 800c900:	469a      	mov	sl, r3
 800c902:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c906:	b10a      	cbz	r2, 800c90c <_svfiprintf_r+0x5c>
 800c908:	2a25      	cmp	r2, #37	; 0x25
 800c90a:	d1f9      	bne.n	800c900 <_svfiprintf_r+0x50>
 800c90c:	ebba 0b04 	subs.w	fp, sl, r4
 800c910:	d00b      	beq.n	800c92a <_svfiprintf_r+0x7a>
 800c912:	465b      	mov	r3, fp
 800c914:	4622      	mov	r2, r4
 800c916:	4629      	mov	r1, r5
 800c918:	4638      	mov	r0, r7
 800c91a:	f7ff ff6e 	bl	800c7fa <__ssputs_r>
 800c91e:	3001      	adds	r0, #1
 800c920:	f000 80a9 	beq.w	800ca76 <_svfiprintf_r+0x1c6>
 800c924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c926:	445a      	add	r2, fp
 800c928:	9209      	str	r2, [sp, #36]	; 0x24
 800c92a:	f89a 3000 	ldrb.w	r3, [sl]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 80a1 	beq.w	800ca76 <_svfiprintf_r+0x1c6>
 800c934:	2300      	movs	r3, #0
 800c936:	f04f 32ff 	mov.w	r2, #4294967295
 800c93a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c93e:	f10a 0a01 	add.w	sl, sl, #1
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	9307      	str	r3, [sp, #28]
 800c946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c94a:	931a      	str	r3, [sp, #104]	; 0x68
 800c94c:	4654      	mov	r4, sl
 800c94e:	2205      	movs	r2, #5
 800c950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c954:	4850      	ldr	r0, [pc, #320]	; (800ca98 <_svfiprintf_r+0x1e8>)
 800c956:	f7fe f843 	bl	800a9e0 <memchr>
 800c95a:	9a04      	ldr	r2, [sp, #16]
 800c95c:	b9d8      	cbnz	r0, 800c996 <_svfiprintf_r+0xe6>
 800c95e:	06d0      	lsls	r0, r2, #27
 800c960:	bf44      	itt	mi
 800c962:	2320      	movmi	r3, #32
 800c964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c968:	0711      	lsls	r1, r2, #28
 800c96a:	bf44      	itt	mi
 800c96c:	232b      	movmi	r3, #43	; 0x2b
 800c96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c972:	f89a 3000 	ldrb.w	r3, [sl]
 800c976:	2b2a      	cmp	r3, #42	; 0x2a
 800c978:	d015      	beq.n	800c9a6 <_svfiprintf_r+0xf6>
 800c97a:	4654      	mov	r4, sl
 800c97c:	2000      	movs	r0, #0
 800c97e:	f04f 0c0a 	mov.w	ip, #10
 800c982:	9a07      	ldr	r2, [sp, #28]
 800c984:	4621      	mov	r1, r4
 800c986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c98a:	3b30      	subs	r3, #48	; 0x30
 800c98c:	2b09      	cmp	r3, #9
 800c98e:	d94d      	bls.n	800ca2c <_svfiprintf_r+0x17c>
 800c990:	b1b0      	cbz	r0, 800c9c0 <_svfiprintf_r+0x110>
 800c992:	9207      	str	r2, [sp, #28]
 800c994:	e014      	b.n	800c9c0 <_svfiprintf_r+0x110>
 800c996:	eba0 0308 	sub.w	r3, r0, r8
 800c99a:	fa09 f303 	lsl.w	r3, r9, r3
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	46a2      	mov	sl, r4
 800c9a2:	9304      	str	r3, [sp, #16]
 800c9a4:	e7d2      	b.n	800c94c <_svfiprintf_r+0x9c>
 800c9a6:	9b03      	ldr	r3, [sp, #12]
 800c9a8:	1d19      	adds	r1, r3, #4
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	9103      	str	r1, [sp, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	bfbb      	ittet	lt
 800c9b2:	425b      	neglt	r3, r3
 800c9b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c9b8:	9307      	strge	r3, [sp, #28]
 800c9ba:	9307      	strlt	r3, [sp, #28]
 800c9bc:	bfb8      	it	lt
 800c9be:	9204      	strlt	r2, [sp, #16]
 800c9c0:	7823      	ldrb	r3, [r4, #0]
 800c9c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c4:	d10c      	bne.n	800c9e0 <_svfiprintf_r+0x130>
 800c9c6:	7863      	ldrb	r3, [r4, #1]
 800c9c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ca:	d134      	bne.n	800ca36 <_svfiprintf_r+0x186>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	3402      	adds	r4, #2
 800c9d0:	1d1a      	adds	r2, r3, #4
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	9203      	str	r2, [sp, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	bfb8      	it	lt
 800c9da:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9de:	9305      	str	r3, [sp, #20]
 800c9e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca9c <_svfiprintf_r+0x1ec>
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	7821      	ldrb	r1, [r4, #0]
 800c9ea:	f7fd fff9 	bl	800a9e0 <memchr>
 800c9ee:	b138      	cbz	r0, 800ca00 <_svfiprintf_r+0x150>
 800c9f0:	2240      	movs	r2, #64	; 0x40
 800c9f2:	9b04      	ldr	r3, [sp, #16]
 800c9f4:	eba0 000a 	sub.w	r0, r0, sl
 800c9f8:	4082      	lsls	r2, r0
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	3401      	adds	r4, #1
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca04:	2206      	movs	r2, #6
 800ca06:	4826      	ldr	r0, [pc, #152]	; (800caa0 <_svfiprintf_r+0x1f0>)
 800ca08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca0c:	f7fd ffe8 	bl	800a9e0 <memchr>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d038      	beq.n	800ca86 <_svfiprintf_r+0x1d6>
 800ca14:	4b23      	ldr	r3, [pc, #140]	; (800caa4 <_svfiprintf_r+0x1f4>)
 800ca16:	bb1b      	cbnz	r3, 800ca60 <_svfiprintf_r+0x1b0>
 800ca18:	9b03      	ldr	r3, [sp, #12]
 800ca1a:	3307      	adds	r3, #7
 800ca1c:	f023 0307 	bic.w	r3, r3, #7
 800ca20:	3308      	adds	r3, #8
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca26:	4433      	add	r3, r6
 800ca28:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2a:	e768      	b.n	800c8fe <_svfiprintf_r+0x4e>
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	2001      	movs	r0, #1
 800ca30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca34:	e7a6      	b.n	800c984 <_svfiprintf_r+0xd4>
 800ca36:	2300      	movs	r3, #0
 800ca38:	f04f 0c0a 	mov.w	ip, #10
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	3401      	adds	r4, #1
 800ca40:	9305      	str	r3, [sp, #20]
 800ca42:	4620      	mov	r0, r4
 800ca44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca48:	3a30      	subs	r2, #48	; 0x30
 800ca4a:	2a09      	cmp	r2, #9
 800ca4c:	d903      	bls.n	800ca56 <_svfiprintf_r+0x1a6>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0c6      	beq.n	800c9e0 <_svfiprintf_r+0x130>
 800ca52:	9105      	str	r1, [sp, #20]
 800ca54:	e7c4      	b.n	800c9e0 <_svfiprintf_r+0x130>
 800ca56:	4604      	mov	r4, r0
 800ca58:	2301      	movs	r3, #1
 800ca5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca5e:	e7f0      	b.n	800ca42 <_svfiprintf_r+0x192>
 800ca60:	ab03      	add	r3, sp, #12
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	462a      	mov	r2, r5
 800ca66:	4638      	mov	r0, r7
 800ca68:	4b0f      	ldr	r3, [pc, #60]	; (800caa8 <_svfiprintf_r+0x1f8>)
 800ca6a:	a904      	add	r1, sp, #16
 800ca6c:	f7fd f8a4 	bl	8009bb8 <_printf_float>
 800ca70:	1c42      	adds	r2, r0, #1
 800ca72:	4606      	mov	r6, r0
 800ca74:	d1d6      	bne.n	800ca24 <_svfiprintf_r+0x174>
 800ca76:	89ab      	ldrh	r3, [r5, #12]
 800ca78:	065b      	lsls	r3, r3, #25
 800ca7a:	f53f af2d 	bmi.w	800c8d8 <_svfiprintf_r+0x28>
 800ca7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca80:	b01d      	add	sp, #116	; 0x74
 800ca82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca86:	ab03      	add	r3, sp, #12
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4638      	mov	r0, r7
 800ca8e:	4b06      	ldr	r3, [pc, #24]	; (800caa8 <_svfiprintf_r+0x1f8>)
 800ca90:	a904      	add	r1, sp, #16
 800ca92:	f7fd fb31 	bl	800a0f8 <_printf_i>
 800ca96:	e7eb      	b.n	800ca70 <_svfiprintf_r+0x1c0>
 800ca98:	0800da0c 	.word	0x0800da0c
 800ca9c:	0800da12 	.word	0x0800da12
 800caa0:	0800da16 	.word	0x0800da16
 800caa4:	08009bb9 	.word	0x08009bb9
 800caa8:	0800c7fb 	.word	0x0800c7fb

0800caac <__sfputc_r>:
 800caac:	6893      	ldr	r3, [r2, #8]
 800caae:	b410      	push	{r4}
 800cab0:	3b01      	subs	r3, #1
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	6093      	str	r3, [r2, #8]
 800cab6:	da07      	bge.n	800cac8 <__sfputc_r+0x1c>
 800cab8:	6994      	ldr	r4, [r2, #24]
 800caba:	42a3      	cmp	r3, r4
 800cabc:	db01      	blt.n	800cac2 <__sfputc_r+0x16>
 800cabe:	290a      	cmp	r1, #10
 800cac0:	d102      	bne.n	800cac8 <__sfputc_r+0x1c>
 800cac2:	bc10      	pop	{r4}
 800cac4:	f7fd bdef 	b.w	800a6a6 <__swbuf_r>
 800cac8:	6813      	ldr	r3, [r2, #0]
 800caca:	1c58      	adds	r0, r3, #1
 800cacc:	6010      	str	r0, [r2, #0]
 800cace:	7019      	strb	r1, [r3, #0]
 800cad0:	4608      	mov	r0, r1
 800cad2:	bc10      	pop	{r4}
 800cad4:	4770      	bx	lr

0800cad6 <__sfputs_r>:
 800cad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad8:	4606      	mov	r6, r0
 800cada:	460f      	mov	r7, r1
 800cadc:	4614      	mov	r4, r2
 800cade:	18d5      	adds	r5, r2, r3
 800cae0:	42ac      	cmp	r4, r5
 800cae2:	d101      	bne.n	800cae8 <__sfputs_r+0x12>
 800cae4:	2000      	movs	r0, #0
 800cae6:	e007      	b.n	800caf8 <__sfputs_r+0x22>
 800cae8:	463a      	mov	r2, r7
 800caea:	4630      	mov	r0, r6
 800caec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf0:	f7ff ffdc 	bl	800caac <__sfputc_r>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d1f3      	bne.n	800cae0 <__sfputs_r+0xa>
 800caf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cafc <_vfiprintf_r>:
 800cafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb00:	460d      	mov	r5, r1
 800cb02:	4614      	mov	r4, r2
 800cb04:	4698      	mov	r8, r3
 800cb06:	4606      	mov	r6, r0
 800cb08:	b09d      	sub	sp, #116	; 0x74
 800cb0a:	b118      	cbz	r0, 800cb14 <_vfiprintf_r+0x18>
 800cb0c:	6a03      	ldr	r3, [r0, #32]
 800cb0e:	b90b      	cbnz	r3, 800cb14 <_vfiprintf_r+0x18>
 800cb10:	f7fd fc8e 	bl	800a430 <__sinit>
 800cb14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb16:	07d9      	lsls	r1, r3, #31
 800cb18:	d405      	bmi.n	800cb26 <_vfiprintf_r+0x2a>
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	059a      	lsls	r2, r3, #22
 800cb1e:	d402      	bmi.n	800cb26 <_vfiprintf_r+0x2a>
 800cb20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb22:	f7fd ff5b 	bl	800a9dc <__retarget_lock_acquire_recursive>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	071b      	lsls	r3, r3, #28
 800cb2a:	d501      	bpl.n	800cb30 <_vfiprintf_r+0x34>
 800cb2c:	692b      	ldr	r3, [r5, #16]
 800cb2e:	b99b      	cbnz	r3, 800cb58 <_vfiprintf_r+0x5c>
 800cb30:	4629      	mov	r1, r5
 800cb32:	4630      	mov	r0, r6
 800cb34:	f7fd fdf4 	bl	800a720 <__swsetup_r>
 800cb38:	b170      	cbz	r0, 800cb58 <_vfiprintf_r+0x5c>
 800cb3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb3c:	07dc      	lsls	r4, r3, #31
 800cb3e:	d504      	bpl.n	800cb4a <_vfiprintf_r+0x4e>
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295
 800cb44:	b01d      	add	sp, #116	; 0x74
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	89ab      	ldrh	r3, [r5, #12]
 800cb4c:	0598      	lsls	r0, r3, #22
 800cb4e:	d4f7      	bmi.n	800cb40 <_vfiprintf_r+0x44>
 800cb50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb52:	f7fd ff44 	bl	800a9de <__retarget_lock_release_recursive>
 800cb56:	e7f3      	b.n	800cb40 <_vfiprintf_r+0x44>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb62:	2330      	movs	r3, #48	; 0x30
 800cb64:	f04f 0901 	mov.w	r9, #1
 800cb68:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cd1c <_vfiprintf_r+0x220>
 800cb70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb74:	4623      	mov	r3, r4
 800cb76:	469a      	mov	sl, r3
 800cb78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7c:	b10a      	cbz	r2, 800cb82 <_vfiprintf_r+0x86>
 800cb7e:	2a25      	cmp	r2, #37	; 0x25
 800cb80:	d1f9      	bne.n	800cb76 <_vfiprintf_r+0x7a>
 800cb82:	ebba 0b04 	subs.w	fp, sl, r4
 800cb86:	d00b      	beq.n	800cba0 <_vfiprintf_r+0xa4>
 800cb88:	465b      	mov	r3, fp
 800cb8a:	4622      	mov	r2, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7ff ffa1 	bl	800cad6 <__sfputs_r>
 800cb94:	3001      	adds	r0, #1
 800cb96:	f000 80a9 	beq.w	800ccec <_vfiprintf_r+0x1f0>
 800cb9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb9c:	445a      	add	r2, fp
 800cb9e:	9209      	str	r2, [sp, #36]	; 0x24
 800cba0:	f89a 3000 	ldrb.w	r3, [sl]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 80a1 	beq.w	800ccec <_vfiprintf_r+0x1f0>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb4:	f10a 0a01 	add.w	sl, sl, #1
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	9307      	str	r3, [sp, #28]
 800cbbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbc0:	931a      	str	r3, [sp, #104]	; 0x68
 800cbc2:	4654      	mov	r4, sl
 800cbc4:	2205      	movs	r2, #5
 800cbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbca:	4854      	ldr	r0, [pc, #336]	; (800cd1c <_vfiprintf_r+0x220>)
 800cbcc:	f7fd ff08 	bl	800a9e0 <memchr>
 800cbd0:	9a04      	ldr	r2, [sp, #16]
 800cbd2:	b9d8      	cbnz	r0, 800cc0c <_vfiprintf_r+0x110>
 800cbd4:	06d1      	lsls	r1, r2, #27
 800cbd6:	bf44      	itt	mi
 800cbd8:	2320      	movmi	r3, #32
 800cbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbde:	0713      	lsls	r3, r2, #28
 800cbe0:	bf44      	itt	mi
 800cbe2:	232b      	movmi	r3, #43	; 0x2b
 800cbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbec:	2b2a      	cmp	r3, #42	; 0x2a
 800cbee:	d015      	beq.n	800cc1c <_vfiprintf_r+0x120>
 800cbf0:	4654      	mov	r4, sl
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	f04f 0c0a 	mov.w	ip, #10
 800cbf8:	9a07      	ldr	r2, [sp, #28]
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc00:	3b30      	subs	r3, #48	; 0x30
 800cc02:	2b09      	cmp	r3, #9
 800cc04:	d94d      	bls.n	800cca2 <_vfiprintf_r+0x1a6>
 800cc06:	b1b0      	cbz	r0, 800cc36 <_vfiprintf_r+0x13a>
 800cc08:	9207      	str	r2, [sp, #28]
 800cc0a:	e014      	b.n	800cc36 <_vfiprintf_r+0x13a>
 800cc0c:	eba0 0308 	sub.w	r3, r0, r8
 800cc10:	fa09 f303 	lsl.w	r3, r9, r3
 800cc14:	4313      	orrs	r3, r2
 800cc16:	46a2      	mov	sl, r4
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	e7d2      	b.n	800cbc2 <_vfiprintf_r+0xc6>
 800cc1c:	9b03      	ldr	r3, [sp, #12]
 800cc1e:	1d19      	adds	r1, r3, #4
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	9103      	str	r1, [sp, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bfbb      	ittet	lt
 800cc28:	425b      	neglt	r3, r3
 800cc2a:	f042 0202 	orrlt.w	r2, r2, #2
 800cc2e:	9307      	strge	r3, [sp, #28]
 800cc30:	9307      	strlt	r3, [sp, #28]
 800cc32:	bfb8      	it	lt
 800cc34:	9204      	strlt	r2, [sp, #16]
 800cc36:	7823      	ldrb	r3, [r4, #0]
 800cc38:	2b2e      	cmp	r3, #46	; 0x2e
 800cc3a:	d10c      	bne.n	800cc56 <_vfiprintf_r+0x15a>
 800cc3c:	7863      	ldrb	r3, [r4, #1]
 800cc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc40:	d134      	bne.n	800ccac <_vfiprintf_r+0x1b0>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	3402      	adds	r4, #2
 800cc46:	1d1a      	adds	r2, r3, #4
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	9203      	str	r2, [sp, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	bfb8      	it	lt
 800cc50:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd20 <_vfiprintf_r+0x224>
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	7821      	ldrb	r1, [r4, #0]
 800cc60:	f7fd febe 	bl	800a9e0 <memchr>
 800cc64:	b138      	cbz	r0, 800cc76 <_vfiprintf_r+0x17a>
 800cc66:	2240      	movs	r2, #64	; 0x40
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	eba0 000a 	sub.w	r0, r0, sl
 800cc6e:	4082      	lsls	r2, r0
 800cc70:	4313      	orrs	r3, r2
 800cc72:	3401      	adds	r4, #1
 800cc74:	9304      	str	r3, [sp, #16]
 800cc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7a:	2206      	movs	r2, #6
 800cc7c:	4829      	ldr	r0, [pc, #164]	; (800cd24 <_vfiprintf_r+0x228>)
 800cc7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc82:	f7fd fead 	bl	800a9e0 <memchr>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d03f      	beq.n	800cd0a <_vfiprintf_r+0x20e>
 800cc8a:	4b27      	ldr	r3, [pc, #156]	; (800cd28 <_vfiprintf_r+0x22c>)
 800cc8c:	bb1b      	cbnz	r3, 800ccd6 <_vfiprintf_r+0x1da>
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	3307      	adds	r3, #7
 800cc92:	f023 0307 	bic.w	r3, r3, #7
 800cc96:	3308      	adds	r3, #8
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9c:	443b      	add	r3, r7
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	e768      	b.n	800cb74 <_vfiprintf_r+0x78>
 800cca2:	460c      	mov	r4, r1
 800cca4:	2001      	movs	r0, #1
 800cca6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccaa:	e7a6      	b.n	800cbfa <_vfiprintf_r+0xfe>
 800ccac:	2300      	movs	r3, #0
 800ccae:	f04f 0c0a 	mov.w	ip, #10
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	3401      	adds	r4, #1
 800ccb6:	9305      	str	r3, [sp, #20]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccbe:	3a30      	subs	r2, #48	; 0x30
 800ccc0:	2a09      	cmp	r2, #9
 800ccc2:	d903      	bls.n	800cccc <_vfiprintf_r+0x1d0>
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0c6      	beq.n	800cc56 <_vfiprintf_r+0x15a>
 800ccc8:	9105      	str	r1, [sp, #20]
 800ccca:	e7c4      	b.n	800cc56 <_vfiprintf_r+0x15a>
 800cccc:	4604      	mov	r4, r0
 800ccce:	2301      	movs	r3, #1
 800ccd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd4:	e7f0      	b.n	800ccb8 <_vfiprintf_r+0x1bc>
 800ccd6:	ab03      	add	r3, sp, #12
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	462a      	mov	r2, r5
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <_vfiprintf_r+0x230>)
 800cce0:	a904      	add	r1, sp, #16
 800cce2:	f7fc ff69 	bl	8009bb8 <_printf_float>
 800cce6:	4607      	mov	r7, r0
 800cce8:	1c78      	adds	r0, r7, #1
 800ccea:	d1d6      	bne.n	800cc9a <_vfiprintf_r+0x19e>
 800ccec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccee:	07d9      	lsls	r1, r3, #31
 800ccf0:	d405      	bmi.n	800ccfe <_vfiprintf_r+0x202>
 800ccf2:	89ab      	ldrh	r3, [r5, #12]
 800ccf4:	059a      	lsls	r2, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_vfiprintf_r+0x202>
 800ccf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccfa:	f7fd fe70 	bl	800a9de <__retarget_lock_release_recursive>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	065b      	lsls	r3, r3, #25
 800cd02:	f53f af1d 	bmi.w	800cb40 <_vfiprintf_r+0x44>
 800cd06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd08:	e71c      	b.n	800cb44 <_vfiprintf_r+0x48>
 800cd0a:	ab03      	add	r3, sp, #12
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	462a      	mov	r2, r5
 800cd10:	4630      	mov	r0, r6
 800cd12:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <_vfiprintf_r+0x230>)
 800cd14:	a904      	add	r1, sp, #16
 800cd16:	f7fd f9ef 	bl	800a0f8 <_printf_i>
 800cd1a:	e7e4      	b.n	800cce6 <_vfiprintf_r+0x1ea>
 800cd1c:	0800da0c 	.word	0x0800da0c
 800cd20:	0800da12 	.word	0x0800da12
 800cd24:	0800da16 	.word	0x0800da16
 800cd28:	08009bb9 	.word	0x08009bb9
 800cd2c:	0800cad7 	.word	0x0800cad7

0800cd30 <__sflush_r>:
 800cd30:	898a      	ldrh	r2, [r1, #12]
 800cd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd34:	4605      	mov	r5, r0
 800cd36:	0710      	lsls	r0, r2, #28
 800cd38:	460c      	mov	r4, r1
 800cd3a:	d457      	bmi.n	800cdec <__sflush_r+0xbc>
 800cd3c:	684b      	ldr	r3, [r1, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dc04      	bgt.n	800cd4c <__sflush_r+0x1c>
 800cd42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dc01      	bgt.n	800cd4c <__sflush_r+0x1c>
 800cd48:	2000      	movs	r0, #0
 800cd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	d0fa      	beq.n	800cd48 <__sflush_r+0x18>
 800cd52:	2300      	movs	r3, #0
 800cd54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd58:	682f      	ldr	r7, [r5, #0]
 800cd5a:	6a21      	ldr	r1, [r4, #32]
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	d032      	beq.n	800cdc6 <__sflush_r+0x96>
 800cd60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	075a      	lsls	r2, r3, #29
 800cd66:	d505      	bpl.n	800cd74 <__sflush_r+0x44>
 800cd68:	6863      	ldr	r3, [r4, #4]
 800cd6a:	1ac0      	subs	r0, r0, r3
 800cd6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd6e:	b10b      	cbz	r3, 800cd74 <__sflush_r+0x44>
 800cd70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd72:	1ac0      	subs	r0, r0, r3
 800cd74:	2300      	movs	r3, #0
 800cd76:	4602      	mov	r2, r0
 800cd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	6a21      	ldr	r1, [r4, #32]
 800cd7e:	47b0      	blx	r6
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	d106      	bne.n	800cd94 <__sflush_r+0x64>
 800cd86:	6829      	ldr	r1, [r5, #0]
 800cd88:	291d      	cmp	r1, #29
 800cd8a:	d82b      	bhi.n	800cde4 <__sflush_r+0xb4>
 800cd8c:	4a28      	ldr	r2, [pc, #160]	; (800ce30 <__sflush_r+0x100>)
 800cd8e:	410a      	asrs	r2, r1
 800cd90:	07d6      	lsls	r6, r2, #31
 800cd92:	d427      	bmi.n	800cde4 <__sflush_r+0xb4>
 800cd94:	2200      	movs	r2, #0
 800cd96:	6062      	str	r2, [r4, #4]
 800cd98:	6922      	ldr	r2, [r4, #16]
 800cd9a:	04d9      	lsls	r1, r3, #19
 800cd9c:	6022      	str	r2, [r4, #0]
 800cd9e:	d504      	bpl.n	800cdaa <__sflush_r+0x7a>
 800cda0:	1c42      	adds	r2, r0, #1
 800cda2:	d101      	bne.n	800cda8 <__sflush_r+0x78>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	b903      	cbnz	r3, 800cdaa <__sflush_r+0x7a>
 800cda8:	6560      	str	r0, [r4, #84]	; 0x54
 800cdaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdac:	602f      	str	r7, [r5, #0]
 800cdae:	2900      	cmp	r1, #0
 800cdb0:	d0ca      	beq.n	800cd48 <__sflush_r+0x18>
 800cdb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdb6:	4299      	cmp	r1, r3
 800cdb8:	d002      	beq.n	800cdc0 <__sflush_r+0x90>
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f7fe fcc0 	bl	800b740 <_free_r>
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	6360      	str	r0, [r4, #52]	; 0x34
 800cdc4:	e7c1      	b.n	800cd4a <__sflush_r+0x1a>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	4628      	mov	r0, r5
 800cdca:	47b0      	blx	r6
 800cdcc:	1c41      	adds	r1, r0, #1
 800cdce:	d1c8      	bne.n	800cd62 <__sflush_r+0x32>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0c5      	beq.n	800cd62 <__sflush_r+0x32>
 800cdd6:	2b1d      	cmp	r3, #29
 800cdd8:	d001      	beq.n	800cdde <__sflush_r+0xae>
 800cdda:	2b16      	cmp	r3, #22
 800cddc:	d101      	bne.n	800cde2 <__sflush_r+0xb2>
 800cdde:	602f      	str	r7, [r5, #0]
 800cde0:	e7b2      	b.n	800cd48 <__sflush_r+0x18>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde8:	81a3      	strh	r3, [r4, #12]
 800cdea:	e7ae      	b.n	800cd4a <__sflush_r+0x1a>
 800cdec:	690f      	ldr	r7, [r1, #16]
 800cdee:	2f00      	cmp	r7, #0
 800cdf0:	d0aa      	beq.n	800cd48 <__sflush_r+0x18>
 800cdf2:	0793      	lsls	r3, r2, #30
 800cdf4:	bf18      	it	ne
 800cdf6:	2300      	movne	r3, #0
 800cdf8:	680e      	ldr	r6, [r1, #0]
 800cdfa:	bf08      	it	eq
 800cdfc:	694b      	ldreq	r3, [r1, #20]
 800cdfe:	1bf6      	subs	r6, r6, r7
 800ce00:	600f      	str	r7, [r1, #0]
 800ce02:	608b      	str	r3, [r1, #8]
 800ce04:	2e00      	cmp	r6, #0
 800ce06:	dd9f      	ble.n	800cd48 <__sflush_r+0x18>
 800ce08:	4633      	mov	r3, r6
 800ce0a:	463a      	mov	r2, r7
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	6a21      	ldr	r1, [r4, #32]
 800ce10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ce14:	47e0      	blx	ip
 800ce16:	2800      	cmp	r0, #0
 800ce18:	dc06      	bgt.n	800ce28 <__sflush_r+0xf8>
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	e790      	b.n	800cd4a <__sflush_r+0x1a>
 800ce28:	4407      	add	r7, r0
 800ce2a:	1a36      	subs	r6, r6, r0
 800ce2c:	e7ea      	b.n	800ce04 <__sflush_r+0xd4>
 800ce2e:	bf00      	nop
 800ce30:	dfbffffe 	.word	0xdfbffffe

0800ce34 <_fflush_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	690b      	ldr	r3, [r1, #16]
 800ce38:	4605      	mov	r5, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	b913      	cbnz	r3, 800ce44 <_fflush_r+0x10>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	4628      	mov	r0, r5
 800ce42:	bd38      	pop	{r3, r4, r5, pc}
 800ce44:	b118      	cbz	r0, 800ce4e <_fflush_r+0x1a>
 800ce46:	6a03      	ldr	r3, [r0, #32]
 800ce48:	b90b      	cbnz	r3, 800ce4e <_fflush_r+0x1a>
 800ce4a:	f7fd faf1 	bl	800a430 <__sinit>
 800ce4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0f3      	beq.n	800ce3e <_fflush_r+0xa>
 800ce56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce58:	07d0      	lsls	r0, r2, #31
 800ce5a:	d404      	bmi.n	800ce66 <_fflush_r+0x32>
 800ce5c:	0599      	lsls	r1, r3, #22
 800ce5e:	d402      	bmi.n	800ce66 <_fflush_r+0x32>
 800ce60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce62:	f7fd fdbb 	bl	800a9dc <__retarget_lock_acquire_recursive>
 800ce66:	4628      	mov	r0, r5
 800ce68:	4621      	mov	r1, r4
 800ce6a:	f7ff ff61 	bl	800cd30 <__sflush_r>
 800ce6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce70:	4605      	mov	r5, r0
 800ce72:	07da      	lsls	r2, r3, #31
 800ce74:	d4e4      	bmi.n	800ce40 <_fflush_r+0xc>
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	059b      	lsls	r3, r3, #22
 800ce7a:	d4e1      	bmi.n	800ce40 <_fflush_r+0xc>
 800ce7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce7e:	f7fd fdae 	bl	800a9de <__retarget_lock_release_recursive>
 800ce82:	e7dd      	b.n	800ce40 <_fflush_r+0xc>

0800ce84 <fiprintf>:
 800ce84:	b40e      	push	{r1, r2, r3}
 800ce86:	b503      	push	{r0, r1, lr}
 800ce88:	4601      	mov	r1, r0
 800ce8a:	ab03      	add	r3, sp, #12
 800ce8c:	4805      	ldr	r0, [pc, #20]	; (800cea4 <fiprintf+0x20>)
 800ce8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce92:	6800      	ldr	r0, [r0, #0]
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	f7ff fe31 	bl	800cafc <_vfiprintf_r>
 800ce9a:	b002      	add	sp, #8
 800ce9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cea0:	b003      	add	sp, #12
 800cea2:	4770      	bx	lr
 800cea4:	200001dc 	.word	0x200001dc

0800cea8 <__swhatbuf_r>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	460c      	mov	r4, r1
 800ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	2900      	cmp	r1, #0
 800ceb4:	461e      	mov	r6, r3
 800ceb6:	b096      	sub	sp, #88	; 0x58
 800ceb8:	da0c      	bge.n	800ced4 <__swhatbuf_r+0x2c>
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	2100      	movs	r1, #0
 800cebe:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cec2:	bf0c      	ite	eq
 800cec4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cec8:	2340      	movne	r3, #64	; 0x40
 800ceca:	2000      	movs	r0, #0
 800cecc:	6031      	str	r1, [r6, #0]
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	b016      	add	sp, #88	; 0x58
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	466a      	mov	r2, sp
 800ced6:	f000 f863 	bl	800cfa0 <_fstat_r>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	dbed      	blt.n	800ceba <__swhatbuf_r+0x12>
 800cede:	9901      	ldr	r1, [sp, #4]
 800cee0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cee4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cee8:	4259      	negs	r1, r3
 800ceea:	4159      	adcs	r1, r3
 800ceec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cef0:	e7eb      	b.n	800ceca <__swhatbuf_r+0x22>

0800cef2 <__smakebuf_r>:
 800cef2:	898b      	ldrh	r3, [r1, #12]
 800cef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cef6:	079d      	lsls	r5, r3, #30
 800cef8:	4606      	mov	r6, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	d507      	bpl.n	800cf0e <__smakebuf_r+0x1c>
 800cefe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf02:	6023      	str	r3, [r4, #0]
 800cf04:	6123      	str	r3, [r4, #16]
 800cf06:	2301      	movs	r3, #1
 800cf08:	6163      	str	r3, [r4, #20]
 800cf0a:	b002      	add	sp, #8
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
 800cf0e:	466a      	mov	r2, sp
 800cf10:	ab01      	add	r3, sp, #4
 800cf12:	f7ff ffc9 	bl	800cea8 <__swhatbuf_r>
 800cf16:	9900      	ldr	r1, [sp, #0]
 800cf18:	4605      	mov	r5, r0
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7fb fdee 	bl	8008afc <_malloc_r>
 800cf20:	b948      	cbnz	r0, 800cf36 <__smakebuf_r+0x44>
 800cf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf26:	059a      	lsls	r2, r3, #22
 800cf28:	d4ef      	bmi.n	800cf0a <__smakebuf_r+0x18>
 800cf2a:	f023 0303 	bic.w	r3, r3, #3
 800cf2e:	f043 0302 	orr.w	r3, r3, #2
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	e7e3      	b.n	800cefe <__smakebuf_r+0xc>
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	6020      	str	r0, [r4, #0]
 800cf3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	9b00      	ldr	r3, [sp, #0]
 800cf42:	6120      	str	r0, [r4, #16]
 800cf44:	6163      	str	r3, [r4, #20]
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	b15b      	cbz	r3, 800cf62 <__smakebuf_r+0x70>
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf50:	f000 f838 	bl	800cfc4 <_isatty_r>
 800cf54:	b128      	cbz	r0, 800cf62 <__smakebuf_r+0x70>
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	f023 0303 	bic.w	r3, r3, #3
 800cf5c:	f043 0301 	orr.w	r3, r3, #1
 800cf60:	81a3      	strh	r3, [r4, #12]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	431d      	orrs	r5, r3
 800cf66:	81a5      	strh	r5, [r4, #12]
 800cf68:	e7cf      	b.n	800cf0a <__smakebuf_r+0x18>

0800cf6a <memmove>:
 800cf6a:	4288      	cmp	r0, r1
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	eb01 0402 	add.w	r4, r1, r2
 800cf72:	d902      	bls.n	800cf7a <memmove+0x10>
 800cf74:	4284      	cmp	r4, r0
 800cf76:	4623      	mov	r3, r4
 800cf78:	d807      	bhi.n	800cf8a <memmove+0x20>
 800cf7a:	1e43      	subs	r3, r0, #1
 800cf7c:	42a1      	cmp	r1, r4
 800cf7e:	d008      	beq.n	800cf92 <memmove+0x28>
 800cf80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf88:	e7f8      	b.n	800cf7c <memmove+0x12>
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4402      	add	r2, r0
 800cf8e:	428a      	cmp	r2, r1
 800cf90:	d100      	bne.n	800cf94 <memmove+0x2a>
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf9c:	e7f7      	b.n	800cf8e <memmove+0x24>
	...

0800cfa0 <_fstat_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4d06      	ldr	r5, [pc, #24]	; (800cfc0 <_fstat_r+0x20>)
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	4611      	mov	r1, r2
 800cfac:	602b      	str	r3, [r5, #0]
 800cfae:	f7f6 fd72 	bl	8003a96 <_fstat>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	d102      	bne.n	800cfbc <_fstat_r+0x1c>
 800cfb6:	682b      	ldr	r3, [r5, #0]
 800cfb8:	b103      	cbz	r3, 800cfbc <_fstat_r+0x1c>
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	bd38      	pop	{r3, r4, r5, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20000934 	.word	0x20000934

0800cfc4 <_isatty_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	4d05      	ldr	r5, [pc, #20]	; (800cfe0 <_isatty_r+0x1c>)
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f6 fd70 	bl	8003ab4 <_isatty>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_isatty_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_isatty_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	20000934 	.word	0x20000934

0800cfe4 <_calloc_r>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	fba1 5402 	umull	r5, r4, r1, r2
 800cfea:	b934      	cbnz	r4, 800cffa <_calloc_r+0x16>
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7fb fd85 	bl	8008afc <_malloc_r>
 800cff2:	4606      	mov	r6, r0
 800cff4:	b928      	cbnz	r0, 800d002 <_calloc_r+0x1e>
 800cff6:	4630      	mov	r0, r6
 800cff8:	bd70      	pop	{r4, r5, r6, pc}
 800cffa:	220c      	movs	r2, #12
 800cffc:	2600      	movs	r6, #0
 800cffe:	6002      	str	r2, [r0, #0]
 800d000:	e7f9      	b.n	800cff6 <_calloc_r+0x12>
 800d002:	462a      	mov	r2, r5
 800d004:	4621      	mov	r1, r4
 800d006:	f7fd fbe3 	bl	800a7d0 <memset>
 800d00a:	e7f4      	b.n	800cff6 <_calloc_r+0x12>

0800d00c <_realloc_r>:
 800d00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d010:	4680      	mov	r8, r0
 800d012:	4614      	mov	r4, r2
 800d014:	460e      	mov	r6, r1
 800d016:	b921      	cbnz	r1, 800d022 <_realloc_r+0x16>
 800d018:	4611      	mov	r1, r2
 800d01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d01e:	f7fb bd6d 	b.w	8008afc <_malloc_r>
 800d022:	b92a      	cbnz	r2, 800d030 <_realloc_r+0x24>
 800d024:	f7fe fb8c 	bl	800b740 <_free_r>
 800d028:	4625      	mov	r5, r4
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	f000 f81b 	bl	800d06a <_malloc_usable_size_r>
 800d034:	4284      	cmp	r4, r0
 800d036:	4607      	mov	r7, r0
 800d038:	d802      	bhi.n	800d040 <_realloc_r+0x34>
 800d03a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d03e:	d812      	bhi.n	800d066 <_realloc_r+0x5a>
 800d040:	4621      	mov	r1, r4
 800d042:	4640      	mov	r0, r8
 800d044:	f7fb fd5a 	bl	8008afc <_malloc_r>
 800d048:	4605      	mov	r5, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0ed      	beq.n	800d02a <_realloc_r+0x1e>
 800d04e:	42bc      	cmp	r4, r7
 800d050:	4622      	mov	r2, r4
 800d052:	4631      	mov	r1, r6
 800d054:	bf28      	it	cs
 800d056:	463a      	movcs	r2, r7
 800d058:	f7fd fcd0 	bl	800a9fc <memcpy>
 800d05c:	4631      	mov	r1, r6
 800d05e:	4640      	mov	r0, r8
 800d060:	f7fe fb6e 	bl	800b740 <_free_r>
 800d064:	e7e1      	b.n	800d02a <_realloc_r+0x1e>
 800d066:	4635      	mov	r5, r6
 800d068:	e7df      	b.n	800d02a <_realloc_r+0x1e>

0800d06a <_malloc_usable_size_r>:
 800d06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d06e:	1f18      	subs	r0, r3, #4
 800d070:	2b00      	cmp	r3, #0
 800d072:	bfbc      	itt	lt
 800d074:	580b      	ldrlt	r3, [r1, r0]
 800d076:	18c0      	addlt	r0, r0, r3
 800d078:	4770      	bx	lr
	...

0800d07c <_init>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr

0800d088 <_fini>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr
